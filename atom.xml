<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>不知有晋</title>
  
  
  <link href="http://chenfeng.org/atom.xml" rel="self"/>
  
  <link href="http://chenfeng.org/"/>
  <updated>2022-09-15T16:41:47.894Z</updated>
  <id>http://chenfeng.org/</id>
  
  <author>
    <name>CFONG</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>redis-string数据类型小结</title>
    <link href="http://chenfeng.org/2022/08/24/redis-1-string/"/>
    <id>http://chenfeng.org/2022/08/24/redis-1-string/</id>
    <published>2022-08-24T15:00:00.000Z</published>
    <updated>2022-09-15T16:41:47.894Z</updated>
    
    <content type="html"><![CDATA[<p>Redis 字符串数据类型的相关命令用于管理 redis 字符串值。</p><ul><li><p>设置值</p><ul><li>设置一个键值 set key val</li><li>批量设置键值 mset key val [key val …]</li><li>设置唯一的键值对 setnx</li><li>批量设置唯一的键值对 msetnx</li><li>设置新值返回旧值 getset key val</li></ul></li><li><p>获取值</p><ul><li>获取键值 get</li><li>批量获取键值 mget</li></ul></li><li><p>修改值</p><ul><li>值增加1 incr key</li><li>值增加指定增幅 incrby key increment</li><li>值减1 decr key</li><li>值减少指定减幅 decrby key decrement</li></ul></li><li><p>过期时间</p><ul><li>设置值和过期时间，【单位秒 setex key seconds value】，【单位毫秒 psetex key milliseconds value】</li></ul></li><li><p>字符串操作</p><ul><li>返回值的子串 getrange key start end</li><li>使用子串覆盖值 setrange key offset val</li><li>返回值的长度 strlen key</li><li>字符串追加到值的后面 append key value</li></ul></li></ul><p><img src="/img/redis-string.png" alt="string"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;Redis 字符串数据类型的相关命令用于管理 redis 字符串值。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;设置值&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;设置一个键值 set key val&lt;/li&gt;
&lt;li&gt;批量设置键值 mset key val [key val …]&lt;/li&gt;
&lt;li&gt;</summary>
      
    
    
    
    <category term="redis" scheme="http://chenfeng.org/categories/redis/"/>
    
    
    <category term="redis" scheme="http://chenfeng.org/tags/redis/"/>
    
  </entry>
  
  <entry>
    <title>redis-hash数据类型小结</title>
    <link href="http://chenfeng.org/2022/08/24/redis-2-hash/"/>
    <id>http://chenfeng.org/2022/08/24/redis-2-hash/</id>
    <published>2022-08-24T15:00:00.000Z</published>
    <updated>2022-09-15T17:02:40.468Z</updated>
    
    <content type="html"><![CDATA[<p>Redis hash 是一个 string 类型的 field（字段） 和 value（值） 的映射表，hash 特别适合用于存储对象。</p><ul><li>新增记录<ul><li>新增一条 hset key field value</li><li>批量新增 hmset key field value [field value field value …]</li><li>新增一条记录，唯一性 hsetnx key field value</li></ul></li><li>查询记录<ul><li>查询一条 hget key field</li><li>批量查询 hmget key field [field field]</li><li>全表查询 hgetall key</li></ul></li><li>修改记录<ul><li>值增加指定增幅 hincrby key field increment</li><li>值增加指定增幅，浮点数 hincrbyfloat key field increment</li></ul></li><li>删除记录 hdel key field</li><li>查询表长 hlen key</li><li>查询所有的字段 hkeys key</li><li>查询所有的值 hvals key</li><li>判断字段是否存在 hexists key field</li></ul><p><img src="/img/redis-hash.png" alt="hash"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;Redis hash 是一个 string 类型的 field（字段） 和 value（值） 的映射表，hash 特别适合用于存储对象。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;新增记录&lt;ul&gt;
&lt;li&gt;新增一条 hset key field value&lt;/li&gt;
&lt;li&gt;批量新增 hm</summary>
      
    
    
    
    <category term="redis" scheme="http://chenfeng.org/categories/redis/"/>
    
    
    <category term="redis" scheme="http://chenfeng.org/tags/redis/"/>
    
  </entry>
  
  <entry>
    <title>redis-list数据类型小结</title>
    <link href="http://chenfeng.org/2022/08/24/redis-3-list/"/>
    <id>http://chenfeng.org/2022/08/24/redis-3-list/</id>
    <published>2022-08-24T15:00:00.000Z</published>
    <updated>2022-09-15T17:02:45.684Z</updated>
    
    <content type="html"><![CDATA[<p>链表可以看作是一个队列，左边是队列头，右边是队列尾，增加是push，删除是pop。</p><ul><li><p>新增值</p><ul><li>队列头增加值 lpush key value [value2 value3]</li><li>队列尾增加值 rpush key value [value2 value3]</li><li>相对位置插入值 linsert key before|after pivot value</li><li>新增带判断，链表不存在时增加失败<ul><li>队列头增加值 lpushx key value</li><li>队列尾增加值 rpushx key value</li></ul></li></ul></li><li><p>查询值</p><ul><li>通过索引获取单个值 lndex key index</li><li>通过索引获取多个值 lrange key start stop</li></ul></li><li><p>修改值</p><ul><li>通过索引修改指定位置的值 lset key index value</li></ul></li><li><p>删除值</p><ul><li>队列头删除并获得值 lpop key</li><li>阻塞式表头删除并获得值 blpop key timeout</li><li>表尾删除并获得值 rpop key</li><li>阻塞式表尾删除并获得值 brpop key timeout</li><li>删除指定元素值 lrem key count value 删除key链表中，与value值相同的元素值</li><li>删除索引范围外的元素值 ltrim key start stop</li></ul></li><li><p>操作链表</p><ul><li>移动元素 rpoplpush source destination</li><li>阻塞式移动元素 brpoplpush source destination</li></ul></li><li><p>获取链表长度 llen key</p></li></ul><p><img src="/img/redis-list.png" alt="list"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;链表可以看作是一个队列，左边是队列头，右边是队列尾，增加是push，删除是pop。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;新增值&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;队列头增加值 lpush key value [value2 value3]&lt;/li&gt;
&lt;li&gt;队列尾增加值 rpush k</summary>
      
    
    
    
    <category term="redis" scheme="http://chenfeng.org/categories/redis/"/>
    
    
    <category term="redis" scheme="http://chenfeng.org/tags/redis/"/>
    
  </entry>
  
  <entry>
    <title>redis-zset(有序集合)数据类型小结</title>
    <link href="http://chenfeng.org/2022/08/24/redis-5-zset/"/>
    <id>http://chenfeng.org/2022/08/24/redis-5-zset/</id>
    <published>2022-08-24T15:00:00.000Z</published>
    <updated>2022-09-15T17:02:59.639Z</updated>
    
    <content type="html"><![CDATA[<p>有序集合与集合类似，不同的是，每个元素会关联一个double类型的分数</p><ul><li>增加元素<ul><li>增加一个或多个元素 zadd key score1 menber1 [score2 member2 score3 member3]</li></ul></li><li>查询元素<ul><li>返回集合元素数量 zcard key</li><li>返回指定分数范围内元素数量 count key start stop</li><li>返回指定索引范围内元素 zrange key start stop [withscores]</li><li>返回指定分数范围内元素 zrangebyscore key start stop [withscores]</li><li>返回指定元素的索引 zrank key member</li><li>返回指定元素的分数 zscore key member</li></ul></li><li>修改元素<ul><li>修改元素分数 zincrby key increment member</li></ul></li><li>删除元素<ul><li>删除指定元素 zrem key member</li><li>删除指定分数范围里的元素 zremrangebyscore key start stop </li><li>删除指定索引范围里的元素 zremrangebyrank key start stop</li></ul></li><li>集合运算<ul><li>差集<ul><li>返回差集 sdiff num z1 z2</li><li>返回差集并存储 sdiffstore destination num z1 z2</li></ul></li><li>交集<ul><li>返回交集，分数相加 zinter num key key [key …]</li><li>返回交集，分数相加，另存为 zinterstore destination num key key [key …]</li></ul></li><li>并集<ul><li>返回并集 zunion num k1 k2</li><li>返回并集并存储 zunionstore destination num k1 k2</li></ul></li></ul></li></ul><p><img src="/img/redis-zset.png" alt="zset"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;有序集合与集合类似，不同的是，每个元素会关联一个double类型的分数&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;增加元素&lt;ul&gt;
&lt;li&gt;增加一个或多个元素 zadd key score1 menber1 [score2 member2 score3 member3]&lt;/li&gt;
&lt;/ul</summary>
      
    
    
    
    <category term="redis" scheme="http://chenfeng.org/categories/redis/"/>
    
    
    <category term="redis" scheme="http://chenfeng.org/tags/redis/"/>
    
  </entry>
  
  <entry>
    <title>redis-set数据类型小结</title>
    <link href="http://chenfeng.org/2022/08/24/redis-4-set/"/>
    <id>http://chenfeng.org/2022/08/24/redis-4-set/</id>
    <published>2022-08-24T15:00:00.000Z</published>
    <updated>2022-09-15T17:02:54.213Z</updated>
    
    <content type="html"><![CDATA[<p>集合具有无序性和唯一性</p><ul><li>增加元素<ul><li>增加一个或多个元素 sadd key menber1 [member2 member3]</li></ul></li><li>查询元素<ul><li>查询集合数量 scard key</li><li>返回所有集合元素 smembers key</li><li>随机返回集合元素 srandmember key [count]</li></ul></li><li>删除元素<ul><li>随机删除集合元素 spop key [count]</li><li>删除集合中指定元素 srem key member [m1 m2]</li></ul></li><li>判断是否存在元素 sismember key member</li><li>移动元素 smove source destination member</li><li>集合运算<ul><li>差集<ul><li>返回差集 sdiff s1 s2</li><li>返回差集并存储 sdiffstore destination s1 s2</li></ul></li><li>交集<ul><li>返回交集 sinter s1 s2</li><li>返回交集并存储 sinterstore destination s1 s2</li></ul></li><li>并集<ul><li>返回并集 sunion s1 s2</li><li>返回并集并存储 sunionstore destination s1 s2</li></ul></li></ul></li></ul><p><img src="/img/redis-set.png" alt="set"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;集合具有无序性和唯一性&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;增加元素&lt;ul&gt;
&lt;li&gt;增加一个或多个元素 sadd key menber1 [member2 member3]&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;查询元素&lt;ul&gt;
&lt;li&gt;查询集合数量 scard key&lt;/li</summary>
      
    
    
    
    <category term="redis" scheme="http://chenfeng.org/categories/redis/"/>
    
    
    <category term="redis" scheme="http://chenfeng.org/tags/redis/"/>
    
  </entry>
  
  <entry>
    <title>THINKPHP6如何实现门面模式</title>
    <link href="http://chenfeng.org/2022/07/25/facade/"/>
    <id>http://chenfeng.org/2022/07/25/facade/</id>
    <published>2022-07-25T15:00:00.000Z</published>
    <updated>2022-07-26T17:15:31.835Z</updated>
    
    <content type="html"><![CDATA[<p>THINKPHP6的门面为容器中的（动态）类提供了一个静态调用接口，相比于传统的静态方法调用， 带来了更好的可测试性和扩展性，你可以为任何的非静态类库定义一个facade类。</p><p>门面的核心文件是 facade.php ，文件内定义了 facade 类，包含有：</p><ul><li>待子类重写的方法 getFacadeClass </li><li>实例化子系统类的方法 createFacade</li><li>魔术方法__callstatic</li></ul><figure class="highlight php"><figcaption><span>facade.php</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">facade</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">abstract</span> <span class="built_in">static</span> <span class="function"><span class="keyword">function</span> <span class="title">getFacadeClass</span>(<span class="params"></span>)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">protected</span> <span class="built_in">static</span> <span class="function"><span class="keyword">function</span> <span class="title">createFacade</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="variable">$facadeClass</span> = <span class="built_in">static</span>::<span class="title function_ invoke__">getFacadeClass</span>();</span><br><span class="line">        <span class="keyword">include_once</span> <span class="string">&quot;<span class="subst">&#123;$facadeClass&#125;</span>.php&quot;</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="variable">$facadeClass</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">static</span> <span class="function"><span class="keyword">function</span> <span class="title">__callstatic</span>(<span class="params"><span class="variable">$method</span>,<span class="variable">$params</span></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="title function_ invoke__">call_user_func_array</span>([<span class="built_in">static</span>::<span class="title function_ invoke__">createFacade</span>(),<span class="variable">$method</span>],<span class="variable">$params</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>当新增一个子系统类时，同时需要新增一个子系统类的门面类，使得子系统类和 facade 类关联起来。</p><figure class="highlight php"><figcaption><span>子系统类tets1.php</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">test1</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">index</span>(<span class="params"><span class="variable">$name</span></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;test1,name=<span class="subst">&#123;$name&#125;</span>&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight php"><figcaption><span>子系统门面类test1facade.php</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">include_once</span> <span class="string">&#x27;facade.php&#x27;</span>;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">test1facade</span> <span class="keyword">extends</span> <span class="title">facade</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">protected</span> <span class="built_in">static</span> <span class="function"><span class="keyword">function</span> <span class="title">getFacadeClass</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&#x27;test1&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>客户端不需要直接调用子系统类，而是通过子系统门面类间接调用，并且采用静态调用的方式调用子系统类里的方法。</p><figure class="highlight php"><figcaption><span>client.php</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">include</span> <span class="string">&#x27;test1facade.php&#x27;</span>;</span><br><span class="line"><span class="keyword">include</span> <span class="string">&#x27;test2facade.php&#x27;</span>;</span><br><span class="line"><span class="keyword">echo</span> test1facade::<span class="title function_ invoke__">index</span>(<span class="string">&#x27;Jerry&#x27;</span>);</span><br><span class="line"><span class="keyword">echo</span> test2facade::<span class="title function_ invoke__">index</span>(<span class="string">&#x27;Page&#x27;</span>);</span><br></pre></td></tr></table></figure><p>结果输出</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">test1,name=Jerrytest2,name=Page</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;THINKPHP6的门面为容器中的（动态）类提供了一个静态调用接口，相比于传统的静态方法调用， 带来了更好的可测试性和扩展性，你可以为任何的非静态类库定义一个facade类。&lt;/p&gt;
&lt;p&gt;门面的核心文件是 facade.php ，文件内定义了 facade 类，包含有：&lt;</summary>
      
    
    
    
    <category term="php" scheme="http://chenfeng.org/categories/php/"/>
    
    
    <category term="php" scheme="http://chenfeng.org/tags/php/"/>
    
    <category term="设计模式" scheme="http://chenfeng.org/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>协变与工厂方法设计模式</title>
    <link href="http://chenfeng.org/2022/07/24/covariance/"/>
    <id>http://chenfeng.org/2022/07/24/covariance/</id>
    <published>2022-07-24T15:00:00.000Z</published>
    <updated>2022-07-26T17:21:22.317Z</updated>
    
    <content type="html"><![CDATA[<h2><span id="xie-bian-de-gai-nian">协变的概念</span><a href="#xie-bian-de-gai-nian" class="header-anchor">#</a></h2><p><a href="https://www.php.net/manual/zh/language.oop5.variance.php#language.oop5.variance.covariance">协变</a>使子类比父类方法能返回更具体的类型；<br>通俗点说就是如果某个返回的类型可以由其派生类型替换，那么这个类型就是支持协变的。</p><h2><span id="xie-bian-yu-gong-han-fang-fa-mo-shi">协变与工厂方法模式</span><a href="#xie-bian-yu-gong-han-fang-fa-mo-shi" class="header-anchor">#</a></h2><p>工厂方法模式的特点是一个工厂生产一种产品，有多少个产品就需要有多少个工厂。</p><p>基类工厂定义了操作方法和返回值，子类工厂继承自基类工厂，并且重写了操作方法，根据具体的工厂返回实际的类型。</p><p>以下代码定义了两个产品类（ShoesBasketball，ShoesRunning），<br>两个工厂子类（FactoryBasketball，FactoryRunning）。</p><p>产品类实现自产品接口（Shoes），产品接口定义了一个方法（whoami）。</p><p>工厂子类继承自工厂基类（Factory），工厂基类定义了一个操作方法（makeShoes），并且定义了返回值类型（Shoes）。</p><p>工厂子类重写方法（makeShoes），并且定义了比父类更加具体的返回值类型。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">Shoes</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">whoami</span>(<span class="params"></span>)</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ShoesBasketball</span> <span class="keyword">implements</span> <span class="title">Shoes</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">whoami</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;I am Basketball shoes.&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ShoesRunning</span> <span class="keyword">implements</span> <span class="title">Shoes</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">whoami</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;I am Running shoes.&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">Factory</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">static</span> <span class="function"><span class="keyword">function</span> <span class="title">makeShoes</span>(<span class="params"></span>):<span class="title">Shoes</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">FactoryBasketball</span> <span class="keyword">implements</span> <span class="title">Factory</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">static</span> <span class="function"><span class="keyword">function</span> <span class="title">makeShoes</span>(<span class="params"></span>):<span class="title">ShoesBasketball</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">ShoesBasketball</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">FactoryRunning</span> <span class="keyword">implements</span> <span class="title">Factory</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">static</span> <span class="function"><span class="keyword">function</span> <span class="title">makeShoes</span>(<span class="params"></span>):<span class="title">ShoesRunning</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">ShoesRunning</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable">$shoes</span> = <span class="title class_">FactoryBasketball</span>::<span class="title function_ invoke__">makeShoes</span>();</span><br><span class="line"><span class="keyword">echo</span> <span class="variable">$shoes</span>-&gt;<span class="title function_ invoke__">whoami</span>();</span><br><span class="line"><span class="variable">$shoes</span> = <span class="title class_">FactoryRunning</span>::<span class="title function_ invoke__">makeShoes</span>();</span><br><span class="line"><span class="keyword">echo</span> <span class="variable">$shoes</span>-&gt;<span class="title function_ invoke__">whoami</span>();</span><br></pre></td></tr></table></figure><p>结果输出</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">I am Basketball shoes.I am Running shoes.</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2&gt;&lt;span id=&quot;xie-bian-de-gai-nian&quot;&gt;协变的概念&lt;/span&gt;&lt;a href=&quot;#xie-bian-de-gai-nian&quot; class=&quot;header-anchor&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;https://www.php.</summary>
      
    
    
    
    <category term="php" scheme="http://chenfeng.org/categories/php/"/>
    
    
    <category term="php" scheme="http://chenfeng.org/tags/php/"/>
    
    <category term="设计模式" scheme="http://chenfeng.org/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>Homebrew -- macOS缺失的软件包的管理器</title>
    <link href="http://chenfeng.org/2022/07/18/homebrew/"/>
    <id>http://chenfeng.org/2022/07/18/homebrew/</id>
    <published>2022-07-18T15:00:00.000Z</published>
    <updated>2022-07-19T17:37:57.024Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://brew.sh/index_zh-cn">Homebrew</a> 是 macOS（或 Linux）缺失的软件包的管理器。</p><p>使用 Homebrew 安装 Apple（或您的 Linux 系统）没有预装但 你 <a href="https://formulae.brew.sh/">需要的东西</a>。</p><h2><span id="an-zhuang-homebrew">安装 Homebrew</span><a href="#an-zhuang-homebrew" class="header-anchor">#</a></h2><p>将以下命令粘贴至终端，实现安装。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/bin/bash -c <span class="string">&quot;<span class="subst">$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)</span>&quot;</span></span><br></pre></td></tr></table></figure><h2><span id="homebrew-lei-xing">Homebrew 类型</span><a href="#homebrew-lei-xing" class="header-anchor">#</a></h2><h3><span id="formula">formula</span><a href="#formula" class="header-anchor">#</a></h3><p>formula 意思是一些软件包，包含命令行工具、开发库、一些字体、插件等，共性是不提供界面，提供给终端或者是开发者使用。</p><p>安装 formula 前可以在 <a href="https://formulae.brew.sh/formula/">formulae listing页面</a> 搜索目标 formula ，查看 formula 的详情细节，包括安装命令，描述，版本号和安装数量统计等。</p><h3><span id="cask">cask</span><a href="#cask" class="header-anchor">#</a></h3><p>cask 是用户软件，比如 chrome、wechat、qq 这些提供用户交互界面的软件。</p><p>同样的，安装 cask 前可以在 <a href="https://formulae.brew.sh/cask/">casks listing页面</a> 搜索目标 cask ，查看 cask 的详情细节。</p><p><a href="https://formulae.brew.sh/cask/">casks listing页面</a> 包含了大部分常用的软件：微信、qq、浏览器、笔记、播放器等等。一定程度上可以代替App store。</p><h2><span id="homebrew-ming-ling">Homebrew 命令</span><a href="#homebrew-ming-ling" class="header-anchor">#</a></h2><h3><span id="chang-yong-ming-ling">常用命令</span><a href="#chang-yong-ming-ling" class="header-anchor">#</a></h3><table><thead><tr><th align="left">命令</th><th align="left">作用</th></tr></thead><tbody><tr><td align="left">brew update</td><td align="left">同步远程的 formulae 到本地，更新本地的 formulae 库</td></tr><tr><td align="left">brew install formula</td><td align="left">安装 formula</td></tr><tr><td align="left">brew remove formula</td><td align="left">卸载 formula</td></tr><tr><td align="left">brew install –cask cask</td><td align="left">安装 cask</td></tr><tr><td align="left">brew list</td><td align="left">查看已安装的包列表</td></tr><tr><td align="left">brew list –versions</td><td align="left">查看你安装过的包列表（包括版本号）</td></tr><tr><td align="left">brew info [formula|cask]</td><td align="left">查看[formula|cask]的简要信息</td></tr><tr><td align="left">brew upgrade [formula|cask]</td><td align="left">升级[formula|cask]</td></tr></tbody></table><h3><span id="chang-yong-ruan-jian-an-zhuang-ming-ling">常用软件安装命令</span><a href="#chang-yong-ruan-jian-an-zhuang-ming-ling" class="header-anchor">#</a></h3><table><thead><tr><th align="left">命令</th><th align="left">作用</th></tr></thead><tbody><tr><td align="left">brew install –cask sublime-text</td><td align="left">安装sublime编辑器</td></tr><tr><td align="left">brew install –cask qq</td><td align="left">安装qq</td></tr><tr><td align="left">brew install –cask wechat</td><td align="left">安装微信</td></tr><tr><td align="left">brew install –cask firefox</td><td align="left">安装firefox</td></tr><tr><td align="left">brew install –cask chrome-remote-desktop-host</td><td align="left">安装chrome</td></tr><tr><td align="left">brew install –cask yinxiangbiji</td><td align="left">安装印象笔记</td></tr></tbody></table><h3><span id="qi-ta-ming-ling">其他命令</span><a href="#qi-ta-ming-ling" class="header-anchor">#</a></h3><table><thead><tr><th align="left">命令</th><th align="left">作用</th></tr></thead><tbody><tr><td align="left">brew outdated</td><td align="left">列出需要升级的 formulae</td></tr><tr><td align="left">brew services</td><td align="left">管理后台运行服务工具</td></tr><tr><td align="left">brew services [list] (–json):</td><td align="left">列出有关当前用户的所有托管服务的信息</td></tr><tr><td align="left">brew services info (formula|–all) [–json]</td><td align="left">列出当前用户的所有托管服务</td></tr><tr><td align="left">brew services start (formula|–all)</td><td align="left">马上开启formula服务，并且注册到当前用户的启动进程上</td></tr><tr><td align="left">brew services stop (formula|–all)</td><td align="left">马上停止formula服务，并且取消注册到当前用户的启动进程上</td></tr><tr><td align="left">brew services restart (formula|–all)</td><td align="left"></td></tr><tr><td align="left">brew services run (formula|–all)</td><td align="left">运行formula服务，但是并不注册到当前用户的启动进程上</td></tr></tbody></table>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;a href=&quot;https://brew.sh/index_zh-cn&quot;&gt;Homebrew&lt;/a&gt; 是 macOS（或 Linux）缺失的软件包的管理器。&lt;/p&gt;
&lt;p&gt;使用 Homebrew 安装 Apple（或您的 Linux 系统）没有预装但 你 &lt;a href=&quot;</summary>
      
    
    
    
    <category term="macOS" scheme="http://chenfeng.org/categories/macOS/"/>
    
    
    <category term="macOS" scheme="http://chenfeng.org/tags/macOS/"/>
    
  </entry>
  
  <entry>
    <title>PHP反射机制</title>
    <link href="http://chenfeng.org/2022/07/10/php-reflecton/"/>
    <id>http://chenfeng.org/2022/07/10/php-reflecton/</id>
    <published>2022-07-10T15:00:00.000Z</published>
    <updated>2022-07-19T08:47:52.371Z</updated>
    
    <content type="html"><![CDATA[<p>PHP的反射机制提供了一套反射API，用来访问和使用类、方法、属性、参数和注释等。</p><p>比如可以通过一个对象知道这个对象所属的类，这个类包含哪些方法，这些方法需要传入什么参数，每个参数是什么类型等等。</p><p>不用创建类的实例也可以访问类的成员和方法，就算类成员定义为 private也可以在外部访问。</p><p><a href="https://www.php.net/manual/zh/intro.reflection.php">官方文档</a> 提供了诸如 ReflectionClass、ReflectionMethod、ReflectionObject、ReflectionExtension 等反射类及相应的API，用得最多的是 ReflectionClass。</p><h2><span id="reflectionclass-fan-she-lei">ReflectionClass 反射类</span><a href="#reflectionclass-fan-she-lei" class="header-anchor">#</a></h2><p>通过 ReflectionClass 反射一个类，参数是类名或者类实例。</p><h3><span id="tong-guo-gou-zao-fang-fa-shi-li-hua-lei">通过构造方法实例化类</span><a href="#tong-guo-gou-zao-fang-fa-shi-li-hua-lei" class="header-anchor">#</a></h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> *  Test1 类</span></span><br><span class="line"><span class="comment"> */</span> </span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Test1</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="variable">$id</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$name</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"><span class="keyword">int</span> <span class="variable">$id</span>,<span class="keyword">string</span> <span class="variable">$name</span></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;id = <span class="variable">$id</span>;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;name = <span class="variable">$name</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">getId</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">$this</span>-&gt;id;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">getName</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">$this</span>-&gt;name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>Test1 类拥有一个 private 类型的 id 和 一个 public 类型的 name 。</p><p>还有一个构造方法和两个普通方法。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 初始化 ReflectionClass 类</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getReflectObject</span>(<span class="params"><span class="variable">$class</span></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">ReflectionClass</span>(<span class="variable">$class</span>);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (ReflectionException <span class="variable">$e</span>) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">ClassNotFoundException</span>(<span class="string">&#x27;class not exists: &#x27;</span> . <span class="variable">$class</span>, <span class="variable">$class</span>, <span class="variable">$e</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 实例化类后调用方法</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">invokeClass_1</span>(<span class="params"><span class="keyword">string</span> <span class="variable">$class</span>,<span class="keyword">array</span> <span class="variable">$args</span></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="variable">$reflect</span> = <span class="title function_ invoke__">getReflectObject</span>(<span class="variable">$class</span>);</span><br><span class="line">    <span class="comment">// 创建一个类的新实例，给出的参数将传递到类的构造函数。</span></span><br><span class="line">    <span class="variable">$object</span> = <span class="variable">$reflect</span>-&gt;<span class="title function_ invoke__">newInstanceArgs</span>(<span class="variable">$args</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//  获取类的属性，返回ReflectionProperty 对象的数组。</span></span><br><span class="line">    <span class="variable">$props</span> = <span class="variable">$reflect</span>-&gt;<span class="title function_ invoke__">getProperties</span>();</span><br><span class="line">    <span class="keyword">foreach</span> (<span class="variable">$props</span> <span class="keyword">as</span> <span class="variable">$prop</span>) &#123;</span><br><span class="line">        <span class="comment">// 输出属性变量名和指定实例的属性值</span></span><br><span class="line">        <span class="keyword">echo</span> <span class="variable">$prop</span>-&gt;<span class="title function_ invoke__">getName</span>() . <span class="string">&quot;=&quot;</span>.<span class="variable">$prop</span>-&gt;<span class="title function_ invoke__">getValue</span>(<span class="variable">$object</span>).<span class="string">&quot;\n&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 类实例直接调用方法</span></span><br><span class="line">    <span class="variable">$name</span> = <span class="variable">$object</span>-&gt;<span class="title function_ invoke__">getName</span>();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="variable">$name</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable">$res</span> = <span class="title function_ invoke__">invokeClass_1</span>(<span class="string">&#x27;Test1&#x27;</span>,[<span class="number">1</span>,<span class="string">&#x27;Jerry&#x27;</span>]);</span><br><span class="line"><span class="title function_ invoke__">var_dump</span>(<span class="variable">$res</span>);</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>输出 </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">id=1</span><br><span class="line">name=Jerry</span><br><span class="line">string(5) &quot;Jerry&quot;</span><br></pre></td></tr></table></figure><h3><span id="tong-guo-dan-li-mo-shi-shi-li-hua-lei">通过单例模式实例化类</span><a href="#tong-guo-dan-li-mo-shi-shi-li-hua-lei" class="header-anchor">#</a></h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Test2 类</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Test2</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="variable">$id</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$name</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="built_in">static</span> <span class="variable">$_instance</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"><span class="keyword">int</span> <span class="variable">$id</span>,<span class="keyword">string</span> <span class="variable">$name</span></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;id = <span class="variable">$id</span>;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;name = <span class="variable">$name</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 把构造函数 __construct 改成 private，并增加 getInstance 方法</span></span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">static</span> <span class="function"><span class="keyword">function</span> <span class="title">getInstance</span>(<span class="params"><span class="keyword">int</span> <span class="variable">$id</span>,<span class="keyword">string</span> <span class="variable">$name</span></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="keyword">empty</span>(<span class="built_in">self</span>::<span class="variable">$_instance</span>))</span><br><span class="line">            <span class="built_in">self</span>::<span class="variable">$_instance</span> = <span class="keyword">new</span> <span class="built_in">static</span>(<span class="variable">$id</span>,<span class="variable">$name</span>);</span><br><span class="line">            </span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">self</span>::<span class="variable">$_instance</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">getId</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">$this</span>-&gt;id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">getName</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">$this</span>-&gt;name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">static</span> <span class="function"><span class="keyword">function</span> <span class="title">sayHi</span>(<span class="params"><span class="variable">$id</span>,<span class="variable">$name</span></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;hello <span class="subst">&#123;$name&#125;</span>, your id=<span class="subst">&#123;$id&#125;</span>.&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">static</span> <span class="function"><span class="keyword">function</span> <span class="title">index</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;hello index&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>Test2 类的构造方法是 private 的，因此外部需要通过静态方法 getInstance 来获得类的实例。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 初始化 ReflectionClass 类</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getReflectObject</span>(<span class="params"><span class="variable">$class</span></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">ReflectionClass</span>(<span class="variable">$class</span>);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (ReflectionException <span class="variable">$e</span>) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">ClassNotFoundException</span>(<span class="string">&#x27;class not exists: &#x27;</span> . <span class="variable">$class</span>, <span class="variable">$class</span>, <span class="variable">$e</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 调用静态方法</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">invokeClass_2</span>(<span class="params"><span class="keyword">string</span> <span class="variable">$class</span>,<span class="keyword">array</span> <span class="variable">$args</span></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="variable">$reflect</span> = <span class="title function_ invoke__">getReflectObject</span>(<span class="variable">$class</span>);</span><br><span class="line">    <span class="variable">$name</span> = <span class="literal">null</span>;</span><br><span class="line">    <span class="comment">// 检查类中是否存在指定的方法</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="variable">$reflect</span>-&gt;<span class="title function_ invoke__">hasMethod</span>(<span class="string">&#x27;getInstance&#x27;</span>)) &#123;</span><br><span class="line">        <span class="comment">// 获取一个类方法的 ReflectionMethod。</span></span><br><span class="line">        <span class="variable">$method</span> = <span class="variable">$reflect</span>-&gt;<span class="title function_ invoke__">getMethod</span>(<span class="string">&#x27;getInstance&#x27;</span>);</span><br><span class="line">        <span class="keyword">if</span> (<span class="variable">$method</span>-&gt;<span class="title function_ invoke__">isPublic</span>() &amp;&amp; <span class="variable">$method</span>-&gt;<span class="title function_ invoke__">isStatic</span>()) &#123;</span><br><span class="line">            <span class="comment">// 使用数组给方法传送参数，并执行他。</span></span><br><span class="line">            <span class="variable">$object</span> = <span class="variable">$method</span>-&gt;<span class="title function_ invoke__">invokeArgs</span>(<span class="literal">null</span>, <span class="variable">$args</span>);</span><br><span class="line">            <span class="variable">$name</span> = <span class="variable">$object</span>-&gt;<span class="title function_ invoke__">getName</span>();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable">$name</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable">$res</span> = <span class="title function_ invoke__">invokeClass_2</span>(<span class="string">&#x27;Test2&#x27;</span>,[<span class="number">2</span>,<span class="string">&#x27;Sam&#x27;</span>]);</span><br><span class="line"><span class="title function_ invoke__">var_dump</span>(<span class="variable">$res</span>);</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>输出 </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">string(3) &quot;Sam&quot;</span><br></pre></td></tr></table></figure><h2><span id="reflectionmethod-fan-she-lei">ReflectionMethod 反射类</span><a href="#reflectionmethod-fan-she-lei" class="header-anchor">#</a></h2><p>ReflectionMethod 类也具有反射一个类的作用。区别是参数需要传递类名和方法名。</p><h3><span id="diao-yong-you-can-shu-de-fang-fa">调用有参数的方法</span><a href="#diao-yong-you-can-shu-de-fang-fa" class="header-anchor">#</a></h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 初始化 ReflectionMethod 类</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getReflectMethodObject</span>(<span class="params"><span class="variable">$class</span>,<span class="variable">$name</span></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">ReflectionMethod</span>(<span class="variable">$class</span>,<span class="variable">$name</span>);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (ReflectionException <span class="variable">$e</span>) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">ClassNotFoundException</span>(<span class="string">&#x27;class or method not exists: &#x27;</span> . <span class="variable">$class</span>, <span class="variable">$class</span>, <span class="variable">$e</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 调用静态方法</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">invokeMethod_1</span>(<span class="params"><span class="keyword">string</span> <span class="variable">$class</span>,<span class="keyword">string</span> <span class="variable">$name</span>,<span class="keyword">array</span> <span class="variable">$args</span></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="variable">$method</span> = <span class="title function_ invoke__">getReflectMethodObject</span>(<span class="variable">$class</span>,<span class="variable">$name</span>);</span><br><span class="line">    <span class="comment">// 获取方法定义的参数数目，包括可选参数</span></span><br><span class="line">    <span class="variable">$num</span> = <span class="variable">$method</span>-&gt;<span class="title function_ invoke__">getNumberOfParameters</span>();</span><br><span class="line">    <span class="keyword">if</span>(<span class="variable">$num</span> &gt; <span class="number">0</span>)</span><br><span class="line">        <span class="comment">// 使用数组给方法传送参数，并执行他。</span></span><br><span class="line">        <span class="variable">$res</span> = <span class="variable">$method</span>-&gt;<span class="title function_ invoke__">invokeArgs</span>(<span class="literal">null</span>,<span class="variable">$args</span>);</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="comment">// 执行一个反射的方法。</span></span><br><span class="line">        <span class="variable">$res</span> = <span class="variable">$method</span>-&gt;<span class="title function_ invoke__">invoke</span>(<span class="literal">null</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="variable">$res</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable">$res</span> = <span class="title function_ invoke__">invokeMethod_1</span>(<span class="string">&#x27;Test2&#x27;</span>,<span class="string">&#x27;sayHi&#x27;</span>,[<span class="number">2</span>,<span class="string">&#x27;Sam&#x27;</span>]);</span><br><span class="line"><span class="title function_ invoke__">var_dump</span>(<span class="variable">$res</span>);</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>输出 </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">string(21) &quot;hello Sam, your id=2.&quot;</span><br></pre></td></tr></table></figure><p>以上功能作用与  </p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$res</span> = <span class="title function_ invoke__">call_user_func_array</span>([<span class="keyword">__NAMESPACE__</span>.<span class="string">&#x27;Test2&#x27;</span>,<span class="string">&#x27;sayHi&#x27;</span>],[<span class="number">2</span>,<span class="string">&#x27;Sam&#x27;</span>]); </span><br></pre></td></tr></table></figure><p>相似。</p><h3><span id="diao-yong-wu-can-shu-de-fang-fa">调用无参数的方法</span><a href="#diao-yong-wu-can-shu-de-fang-fa" class="header-anchor">#</a></h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$res</span> = <span class="title function_ invoke__">invokeMethod_1</span>(<span class="string">&#x27;Test2&#x27;</span>,<span class="string">&#x27;index&#x27;</span>,[]);</span><br><span class="line"><span class="title function_ invoke__">var_dump</span>(<span class="variable">$res</span>);</span><br></pre></td></tr></table></figure><p>输出 </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">string(11) &quot;hello index&quot;</span><br></pre></td></tr></table></figure><p>以上功能作用与  </p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$res</span> = <span class="title function_ invoke__">call_user_func</span>([<span class="keyword">__NAMESPACE__</span>.<span class="string">&#x27;Test2&#x27;</span>,<span class="string">&#x27;index&#x27;</span>]);</span><br></pre></td></tr></table></figure><p>相似。</p><h2><span id="reflectionfunction-fan-she-lei">ReflectionFunction 反射类</span><a href="#reflectionfunction-fan-she-lei" class="header-anchor">#</a></h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 一个处理数据的方法</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">processUserData</span>(<span class="params"><span class="variable">$name</span>, <span class="variable">$age</span>, <span class="variable">$job</span> = <span class="string">&quot;&quot;</span>, <span class="variable">$hobbie</span> = <span class="string">&quot;&quot;</span></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="variable">$msg</span> = <span class="string">&quot;Hello <span class="subst">$name</span>. You have <span class="subst">$age</span> years old&quot;</span>;</span><br><span class="line">    <span class="keyword">if</span> (!<span class="keyword">empty</span>(<span class="variable">$job</span>)) &#123;</span><br><span class="line">    <span class="variable">$msg</span> .= <span class="string">&quot;. Your job is <span class="subst">$job</span>&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (!<span class="keyword">empty</span>(<span class="variable">$hobbie</span>)) &#123;</span><br><span class="line">        <span class="variable">$msg</span> .= <span class="string">&quot;. Your hobbie is <span class="subst">$hobbie</span>&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="variable">$msg</span> . <span class="string">&quot;.&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable">$refFunction</span> = <span class="keyword">new</span> <span class="title class_">ReflectionFunction</span>(<span class="string">&#x27;processUserData&#x27;</span>);</span><br><span class="line"><span class="variable">$valuesToProcess</span> = [</span><br><span class="line">    <span class="string">&#x27;name&#x27;</span> =&gt; <span class="string">&#x27;Anderson Lucas Silva de Oliveira&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;age&#x27;</span> =&gt; <span class="number">21</span>,</span><br><span class="line">    <span class="string">&#x27;hobbie&#x27;</span> =&gt; <span class="string">&#x27;Play games&#x27;</span></span><br><span class="line">  ];</span><br><span class="line"><span class="variable">$res</span> = <span class="variable">$refFunction</span>-&gt;<span class="title function_ invoke__">invoke</span>(...<span class="variable">$valuesToProcess</span>);</span><br><span class="line"><span class="title function_ invoke__">var_dump</span>(<span class="variable">$res</span>);</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>输出 </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">string(89) &quot;Hello Anderson Lucas Silva de Oliveira. You have 21 years old. Your hobbie is Play games.&quot;</span><br></pre></td></tr></table></figure><h2><span id="yi-ge-demo">一个demo</span><a href="#yi-ge-demo" class="header-anchor">#</a></h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 通过反射调用函数或者类方法</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">invoke</span>(<span class="params"><span class="variable">$class</span>,<span class="variable">$function</span>,<span class="variable">$args</span></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(<span class="title function_ invoke__">function_exists</span>(<span class="variable">$function</span>))</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="variable">$refFunction</span> = <span class="keyword">new</span> <span class="title class_">ReflectionFunction</span>(<span class="variable">$function</span>);</span><br><span class="line">        <span class="variable">$res</span> = <span class="variable">$refFunction</span>-&gt;<span class="title function_ invoke__">invoke</span>(...<span class="variable">$args</span>);</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="variable">$reflect</span> = <span class="title function_ invoke__">getReflectObject</span>(<span class="variable">$class</span>);</span><br><span class="line">        <span class="variable">$constructor</span> = <span class="variable">$reflect</span>-&gt;<span class="title function_ invoke__">getConstructor</span>();</span><br><span class="line">        <span class="comment">// 构造函数是公有的</span></span><br><span class="line">        <span class="keyword">if</span>(<span class="variable">$constructor</span>-&gt;<span class="title function_ invoke__">isPublic</span>())</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="variable">$object</span> = <span class="variable">$reflect</span>-&gt;<span class="title function_ invoke__">newInstanceArgs</span>(<span class="variable">$args</span>);</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span>(<span class="variable">$reflect</span>-&gt;<span class="title function_ invoke__">hasMethod</span>(<span class="string">&#x27;getInstance&#x27;</span>))&#123;</span><br><span class="line">            <span class="comment">// 当构造函数为 private ，则通过 getInstance 方法获取类的实例</span></span><br><span class="line">            <span class="variable">$method</span> = <span class="variable">$reflect</span>-&gt;<span class="title function_ invoke__">getMethod</span>(<span class="string">&#x27;getInstance&#x27;</span>);</span><br><span class="line">            <span class="keyword">if</span> (<span class="variable">$method</span>-&gt;<span class="title function_ invoke__">isPublic</span>() &amp;&amp; <span class="variable">$method</span>-&gt;<span class="title function_ invoke__">isStatic</span>()) </span><br><span class="line">                <span class="comment">// 使用数组给方法传送参数，并执行他。</span></span><br><span class="line">                <span class="variable">$object</span> = <span class="variable">$method</span>-&gt;<span class="title function_ invoke__">invokeArgs</span>(<span class="literal">null</span>, <span class="variable">$args</span>);</span><br><span class="line">            </span><br><span class="line">        &#125;</span><br><span class="line">        <span class="variable">$res</span> = <span class="variable">$object</span>-&gt;<span class="variable">$function</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable">$res</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable">$valuesToProcess</span> = [</span><br><span class="line">    <span class="string">&#x27;name&#x27;</span> =&gt; <span class="string">&#x27;Anderson Lucas Silva de Oliveira&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;age&#x27;</span> =&gt; <span class="number">21</span>,</span><br><span class="line">    <span class="string">&#x27;hobbie&#x27;</span> =&gt; <span class="string">&#x27;Play games&#x27;</span></span><br><span class="line">  ];</span><br><span class="line"></span><br><span class="line"><span class="variable">$res</span> = <span class="title function_ invoke__">invoke</span>(<span class="literal">null</span>,<span class="string">&#x27;processUserData&#x27;</span>,<span class="variable">$valuesToProcess</span>);</span><br><span class="line"><span class="comment">// $res = invoke(&#x27;Test1&#x27;,&#x27;getName&#x27;,[2,&#x27;Sam&#x27;]);</span></span><br><span class="line"><span class="comment">// $res = invoke(&#x27;Test2&#x27;,&#x27;getName&#x27;,[1,&#x27;Jerry&#x27;]);</span></span><br><span class="line"></span><br><span class="line"><span class="title function_ invoke__">var_dump</span>(<span class="variable">$res</span>);</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>invoke 函数接收3个参数，分别是：类名，方法名&#x2F;函数名，传参数组。</p><p>invoke 函数会首先判断是否存在函数，存在的话则直接传递参数，执行函数；</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$res</span> = <span class="title function_ invoke__">invoke</span>(<span class="literal">null</span>,<span class="string">&#x27;processUserData&#x27;</span>,<span class="variable">$valuesToProcess</span>);</span><br></pre></td></tr></table></figure><p>若不存在对应的函数，则通过反射类反射指定的类。<br>首先判断构造函数的权限是否为 public ，是的话则通过构造函数实例化类，最后再调用方法；</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$res</span> = <span class="title function_ invoke__">invoke</span>(<span class="string">&#x27;Test1&#x27;</span>,<span class="string">&#x27;getName&#x27;</span>,[<span class="number">2</span>,<span class="string">&#x27;Sam&#x27;</span>]);</span><br></pre></td></tr></table></figure><p>若构造函数的权限不为 public ，则通过判断是否存在 getInstance 方法，并且方法权限为 public 和 static ， getInstance 方法体使用单例模式返回类的实例。调用 getInstance 方法得到类的实例，最后调用方法。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$res</span> = <span class="title function_ invoke__">invoke</span>(<span class="string">&#x27;Test2&#x27;</span>,<span class="string">&#x27;getName&#x27;</span>,[<span class="number">1</span>,<span class="string">&#x27;Jerry&#x27;</span>]);</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;PHP的反射机制提供了一套反射API，用来访问和使用类、方法、属性、参数和注释等。&lt;/p&gt;
&lt;p&gt;比如可以通过一个对象知道这个对象所属的类，这个类包含哪些方法，这些方法需要传入什么参数，每个参数是什么类型等等。&lt;/p&gt;
&lt;p&gt;不用创建类的实例也可以访问类的成员和方法，就算类</summary>
      
    
    
    
    <category term="php" scheme="http://chenfeng.org/categories/php/"/>
    
    
    <category term="php" scheme="http://chenfeng.org/tags/php/"/>
    
  </entry>
  
  <entry>
    <title>MySQL主键值不允许为NULL，为什么唯一索引值允许为NULL</title>
    <link href="http://chenfeng.org/2022/06/07/mysql/"/>
    <id>http://chenfeng.org/2022/06/07/mysql/</id>
    <published>2022-06-07T06:00:00.000Z</published>
    <updated>2022-06-18T18:51:31.560Z</updated>
    
    <content type="html"><![CDATA[<p>众所周知，主键是唯一标识一行数据的KEY，并且主键值不能为NULL。</p><p>但是同样是唯一标识一行数据的唯一索引却允许值为NULL，看起来似乎有些费解。<br>根据NULL的定义，NULL表示的是未知，因此两个NULL比较的结果既不相等，也不不等，结果仍然是未知。<br>根据这个定义，多个NULL值的存在不违反唯一约束，所以是合理的。</p><p>执行以下SQL语句<br> SELECT IF(NULL&#x3D;NULL,1,2);<br>结果输出2，表示NULL不等于NULL。</p><p>所以当唯一索引值存在NULL时，查询的时候结果不唯一，破坏了唯一性。</p><p>总结如果不是业务需要（例如某个字段暂时未能获得），应该使索引值不为NULL，以保证查询结果的唯一性。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;众所周知，主键是唯一标识一行数据的KEY，并且主键值不能为NULL。&lt;/p&gt;
&lt;p&gt;但是同样是唯一标识一行数据的唯一索引却允许值为NULL，看起来似乎有些费解。&lt;br&gt;根据NULL的定义，NULL表示的是未知，因此两个NULL比较的结果既不相等，也不不等，结果仍然是未知。&lt;</summary>
      
    
    
    
    <category term="mysql" scheme="http://chenfeng.org/categories/mysql/"/>
    
    
    <category term="mysql" scheme="http://chenfeng.org/tags/mysql/"/>
    
  </entry>
  
  <entry>
    <title>composer加载机制</title>
    <link href="http://chenfeng.org/2022/06/05/composer/"/>
    <id>http://chenfeng.org/2022/06/05/composer/</id>
    <published>2022-06-05T06:00:00.000Z</published>
    <updated>2022-06-21T14:16:32.099Z</updated>
    
    <content type="html"><![CDATA[<h1><span id="ru-kou-wen-jian-index-php">入口文件 index.php</span><a href="#ru-kou-wen-jian-index-php" class="header-anchor">#</a></h1><p>引入 vendor 的 autoload.php 文件 </p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">require</span> <span class="keyword">__DIR__</span> . <span class="string">&#x27;/../vendor/autoload.php&#x27;</span>; </span><br></pre></td></tr></table></figure><h1><span id="vendor-x2f-autoload-php-wen-jian">vendor&#x2F;autoload.php 文件</span><a href="#vendor-x2f-autoload-php-wen-jian" class="header-anchor">#</a></h1><p>引入 composer 的 autoload_real.php 文件，然后调用 getLoader 方法</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// autoload.php @generated by Composer</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">require_once</span> <span class="keyword">__DIR__</span> . <span class="string">&#x27;/composer/autoload_real.php&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="title class_">ComposerAutoloaderInit558596bf02a1b04254bb0a6c8d3be828</span>::<span class="title function_ invoke__">getLoader</span>();</span><br><span class="line"></span><br></pre></td></tr></table></figure><h1><span id="vendor-x2f-composer-x2f-autoload-real-php-wen-jian">vendor&#x2F;composer&#x2F;autoload_real.php 文件</span><a href="#vendor-x2f-composer-x2f-autoload-real-php-wen-jian" class="header-anchor">#</a></h1><p>该文件包含<br><strong>ComposerAutoloaderInit558596bf02a1b04254bb0a6c8d3be828</strong> 类<br>和引入文件函数 <strong>composerRequire558596bf02a1b04254bb0a6c8d3be828()</strong> 。</p><h2><span id="getloader-fang-fa">getLoader方法</span><a href="#getloader-fang-fa" class="header-anchor">#</a></h2><h3><span id="ban-ben-jian-ce">版本检测</span><a href="#ban-ben-jian-ce" class="header-anchor">#</a></h3><p>首先引入文件：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">require __DIR__ . &#x27;/platform_check.php&#x27;;</span><br></pre></td></tr></table></figure><p>检查 composer 依赖需要的 php 版本与环境的 php 版本是否一致，如果环境的 php 版本低于要求的版本，则会返回错误信息。</p><h3><span id="shi-li-hua-classloader-lei">实例化 ClassLoader 类</span><a href="#shi-li-hua-classloader-lei" class="header-anchor">#</a></h3><p>使用 spl_autoload_register 注册 loadClassLoader 方法：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="built_in">static</span> <span class="function"><span class="keyword">function</span> <span class="title">loadClassLoader</span>(<span class="params"><span class="variable">$class</span></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="string">&#x27;Composer\Autoload\ClassLoader&#x27;</span> === <span class="variable">$class</span>) &#123;</span><br><span class="line">        <span class="keyword">require</span> <span class="keyword">__DIR__</span> . <span class="string">&#x27;/ClassLoader.php&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>loadClassLoader 方法接收一个类名参数，当类名是 Composer\Autoload\ClassLoader 的时候，引入同级目录下的 ClassLoader.php 文件。</p><p>实例化 \Composer\Autoload\ClassLoader 类，参数是 vendor 目录的绝对路径，返回一个加载器实例 $loader。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">self</span>::<span class="variable">$loader</span> = <span class="variable">$loader</span> = <span class="keyword">new</span> <span class="title class_">\Composer\Autoload\ClassLoader</span>(\<span class="title function_ invoke__">dirname</span>(\<span class="title function_ invoke__">dirname</span>(<span class="keyword">__FILE__</span>)));</span><br></pre></td></tr></table></figure><p>使用 spl_autoload_unregister 取消注册 loadClassLoader 方法。</p><h3><span id="chu-shi-hua-loader-shi-li-de-shu-xing">初始化 $loader 实例的属性</span><a href="#chu-shi-hua-loader-shi-li-de-shu-xing" class="header-anchor">#</a></h3><p>初始化 $loader 实例的属性有： prefixLengthsPsr4,prefixDirsPsr4,fallbackDirsPsr0,classMap 。</p><p>根据环境变量的值（如php版本，是否定义HHVM_VERSION常量等）判断是否使用静态加载方式。</p><p>若使用静态加载方式，则引入同级目录下的 autoload_static.php 文件，并且使用 call_user_func 方法回调 getInitializer 方法，参数是加载器实例$loader。</p><p>autoload_static.php 文件定义了以上几个属性，通过 getInitializer 方法实现 $loader 属性初始化；</p><p>若不使用静态加载方式，则分别引入同级目录下的 autoload_namespaces.php,autoload_psr4.php,autoload_classmap.php 文件，再调用 $loader 实例的 set(),setPsr4(),addClassMap() 方法实现 $loader 属性初始化；</p><h3><span id="zhu-ce-zi-dong-jia-zai-han-shu">注册自动加载函数</span><a href="#zhu-ce-zi-dong-jia-zai-han-shu" class="header-anchor">#</a></h3><p>使用 $loader 实例调用 register 方法，注册加载函数，register 方法体下面再说。</p><h3><span id="yin-ru-dan-wen-jian">引入单文件</span><a href="#yin-ru-dan-wen-jian" class="header-anchor">#</a></h3><p>通过读取配置文件，获取单文件映射数组，通过 composerRequire558596bf02a1b04254bb0a6c8d3be828 函数引入单文件。</p><h3><span id="fan-hui-jia-zai-qi-loader">返回加载器 $loader</span><a href="#fan-hui-jia-zai-qi-loader" class="header-anchor">#</a></h3><p>最后返回加载器 $loader 。</p><h1><span id="vendor-x2f-composer-x2f-classloader-php-wen-jian">vendor&#x2F;composer&#x2F;ClassLoader.php 文件</span><a href="#vendor-x2f-composer-x2f-classloader-php-wen-jian" class="header-anchor">#</a></h1><h2><span id="register-fang-fa">register 方法</span><a href="#register-fang-fa" class="header-anchor">#</a></h2><p>使用 spl_autoload_register 注册加载器方法 loadClass ，并且添加到函数队列之首。</p><h2><span id="loadclass-fang-fa">loadClass 方法</span><a href="#loadclass-fang-fa" class="header-anchor">#</a></h2><p>调用 findFile 方法，通过类名查找类，返回类的绝对路径，然后调用 includeFile 方法，引入文件。</p><h2><span id="findfile-fang-fa">findFile 方法</span><a href="#findfile-fang-fa" class="header-anchor">#</a></h2><p>findFile 方法使用 $loader 加载器在前面初始化的属性，根据类名查找类的绝对路径，后返回。</p><h3><span id="shu-xing-zhi">属性值</span><a href="#shu-xing-zhi" class="header-anchor">#</a></h3><p>ClassLoader 类有几个重要的属性。</p><p>classMap 属性保存类名与文件绝对路径的映射</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="built_in">static</span> <span class="variable">$classMap</span> = <span class="keyword">array</span> (</span><br><span class="line">    <span class="string">&#x27;Attribute&#x27;</span> =&gt; <span class="keyword">__DIR__</span> . <span class="string">&#x27;/..&#x27;</span> . <span class="string">&#x27;/symfony/polyfill-php80/Resources/stubs/Attribute.php&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;Composer\\InstalledVersions&#x27;</span> =&gt; <span class="keyword">__DIR__</span> . <span class="string">&#x27;/..&#x27;</span> . <span class="string">&#x27;/composer/InstalledVersions.php&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;PhpToken&#x27;</span> =&gt; <span class="keyword">__DIR__</span> . <span class="string">&#x27;/..&#x27;</span> . <span class="string">&#x27;/symfony/polyfill-php80/Resources/stubs/PhpToken.php&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;Stringable&#x27;</span> =&gt; <span class="keyword">__DIR__</span> . <span class="string">&#x27;/..&#x27;</span> . <span class="string">&#x27;/symfony/polyfill-php80/Resources/stubs/Stringable.php&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;UnhandledMatchError&#x27;</span> =&gt; <span class="keyword">__DIR__</span> . <span class="string">&#x27;/..&#x27;</span> . <span class="string">&#x27;/symfony/polyfill-php80/Resources/stubs/UnhandledMatchError.php&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;ValueError&#x27;</span> =&gt; <span class="keyword">__DIR__</span> . <span class="string">&#x27;/..&#x27;</span> . <span class="string">&#x27;/symfony/polyfill-php80/Resources/stubs/ValueError.php&#x27;</span>,</span><br><span class="line">);</span><br></pre></td></tr></table></figure><p>prefixLengthsPsr4 和 prefixDirsPsr4 属性保存命名空间与文件相对路径的映射</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 保存命名空间与文件相对路径的映射，</span></span><br><span class="line"><span class="keyword">public</span> <span class="built_in">static</span> <span class="variable">$prefixDirsPsr4</span> = <span class="keyword">array</span> (</span><br><span class="line">    <span class="string">&#x27;think\\view\\driver\\&#x27;</span> =&gt; </span><br><span class="line">    <span class="keyword">array</span> (</span><br><span class="line">        <span class="number">0</span> =&gt; <span class="keyword">__DIR__</span> . <span class="string">&#x27;/..&#x27;</span> . <span class="string">&#x27;/topthink/think-view/src&#x27;</span>,</span><br><span class="line">    ),</span><br><span class="line">    <span class="string">&#x27;think\\trace\\&#x27;</span> =&gt; </span><br><span class="line">    <span class="keyword">array</span> (</span><br><span class="line">        <span class="number">0</span> =&gt; <span class="keyword">__DIR__</span> . <span class="string">&#x27;/..&#x27;</span> . <span class="string">&#x27;/topthink/think-trace/src&#x27;</span>,</span><br><span class="line">    ),</span><br><span class="line">    <span class="string">&#x27;think\\&#x27;</span> =&gt; </span><br><span class="line">    <span class="keyword">array</span> (</span><br><span class="line">        <span class="number">0</span> =&gt; <span class="keyword">__DIR__</span> . <span class="string">&#x27;/..&#x27;</span> . <span class="string">&#x27;/topthink/framework/src/think&#x27;</span>,</span><br><span class="line">        <span class="number">1</span> =&gt; <span class="keyword">__DIR__</span> . <span class="string">&#x27;/..&#x27;</span> . <span class="string">&#x27;/topthink/think-helper/src&#x27;</span>,</span><br><span class="line">        <span class="number">2</span> =&gt; <span class="keyword">__DIR__</span> . <span class="string">&#x27;/..&#x27;</span> . <span class="string">&#x27;/topthink/think-orm/src&#x27;</span>,</span><br><span class="line">        <span class="number">3</span> =&gt; <span class="keyword">__DIR__</span> . <span class="string">&#x27;/..&#x27;</span> . <span class="string">&#x27;/topthink/think-template/src&#x27;</span>,</span><br><span class="line">    ),</span><br><span class="line">    <span class="string">&#x27;app\\&#x27;</span> =&gt; </span><br><span class="line">    <span class="keyword">array</span> (</span><br><span class="line">        <span class="number">0</span> =&gt; <span class="keyword">__DIR__</span> . <span class="string">&#x27;/../..&#x27;</span> . <span class="string">&#x27;/app&#x27;</span>,</span><br><span class="line">    ),</span><br><span class="line">    <span class="comment">// 以下省略</span></span><br><span class="line">);</span><br><span class="line"><span class="comment">// 保存命名空间首字母为键的二维数组</span></span><br><span class="line"><span class="keyword">public</span> <span class="built_in">static</span> <span class="variable">$prefixLengthsPsr4</span> = <span class="keyword">array</span> (</span><br><span class="line">    <span class="string">&#x27;t&#x27;</span> =&gt; </span><br><span class="line">    <span class="keyword">array</span> (</span><br><span class="line">        <span class="string">&#x27;think\\view\\driver\\&#x27;</span> =&gt; <span class="number">18</span>,</span><br><span class="line">        <span class="string">&#x27;think\\trace\\&#x27;</span> =&gt; <span class="number">12</span>,</span><br><span class="line">        <span class="string">&#x27;think\\&#x27;</span> =&gt; <span class="number">6</span>,</span><br><span class="line">    ),</span><br><span class="line">    <span class="string">&#x27;a&#x27;</span> =&gt; </span><br><span class="line">    <span class="keyword">array</span> (</span><br><span class="line">        <span class="string">&#x27;app\\&#x27;</span> =&gt; <span class="number">4</span>,</span><br><span class="line">    ),</span><br><span class="line">    <span class="comment">// 以下省略</span></span><br><span class="line">);</span><br></pre></td></tr></table></figure><p>fallbackDirsPsr0 属性保存 $rootPath&#x2F;extend&#x2F; 目录下的文件</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="built_in">static</span> <span class="variable">$fallbackDirsPsr0</span> = <span class="keyword">array</span> (</span><br><span class="line">    <span class="number">0</span> =&gt; <span class="keyword">__DIR__</span> . <span class="string">&#x27;/../..&#x27;</span> . <span class="string">&#x27;/extend&#x27;</span>,</span><br><span class="line">);</span><br></pre></td></tr></table></figure><h3><span id="cha-zhao-classmap-lei-ying-she">查找 classMap 类映射</span><a href="#cha-zhao-classmap-lei-ying-she" class="header-anchor">#</a></h3><p>首先查找类名与文件绝对路径的映射，找到则返回文件路径</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// class map lookup</span></span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">isset</span>(<span class="variable language_">$this</span>-&gt;classMap[<span class="variable">$class</span>])) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">$this</span>-&gt;classMap[<span class="variable">$class</span>];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>若以上没有匹配到目标类，则继续向下执行。</p><p>调用 findFileWithExtension 方法，使用其余3个属性查找文件路径。</p><h2><span id="findfilewithextension-fang-fa">findFileWithExtension 方法</span><a href="#findfilewithextension-fang-fa" class="header-anchor">#</a></h2><h3><span id="cha-zhao-pi-pei-de-ming-ming-kong-jian">查找匹配的命名空间</span><a href="#cha-zhao-pi-pei-de-ming-ming-kong-jian" class="header-anchor">#</a></h3><p>findFileWithExtension 方法的第一个参数是一个类名，通过类名的首字母判断 prefixLengthsPsr4 属性是否存在对应的命名空间。<br>如果不存在的话，就进入下一个属性 fallbackDirsPsr0 的判断。</p><p>如果存在的话，进入一个 while 循环，直到找到第一个存在的文件路径后返回。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// PSR-4 lookup</span></span><br><span class="line"><span class="variable">$logicalPathPsr4</span> = <span class="title function_ invoke__">strtr</span>(<span class="variable">$class</span>, <span class="string">&#x27;\\&#x27;</span>, DIRECTORY_SEPARATOR) . <span class="variable">$ext</span>;</span><br><span class="line"></span><br><span class="line"><span class="variable">$first</span> = <span class="variable">$class</span>[<span class="number">0</span>];</span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">isset</span>(<span class="variable language_">$this</span>-&gt;prefixLengthsPsr4[<span class="variable">$first</span>])) &#123;</span><br><span class="line">    <span class="variable">$subPath</span> = <span class="variable">$class</span>;</span><br><span class="line">    <span class="keyword">while</span> (<span class="literal">false</span> !== <span class="variable">$lastPos</span> = <span class="title function_ invoke__">strrpos</span>(<span class="variable">$subPath</span>, <span class="string">&#x27;\\&#x27;</span>)) &#123;</span><br><span class="line">        <span class="variable">$subPath</span> = <span class="title function_ invoke__">substr</span>(<span class="variable">$subPath</span>, <span class="number">0</span>, <span class="variable">$lastPos</span>);</span><br><span class="line">        <span class="variable">$search</span> = <span class="variable">$subPath</span> . <span class="string">&#x27;\\&#x27;</span>;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">isset</span>(<span class="variable language_">$this</span>-&gt;prefixDirsPsr4[<span class="variable">$search</span>])) &#123;</span><br><span class="line">            <span class="variable">$pathEnd</span> = DIRECTORY_SEPARATOR . <span class="title function_ invoke__">substr</span>(<span class="variable">$logicalPathPsr4</span>, <span class="variable">$lastPos</span> + <span class="number">1</span>);</span><br><span class="line">            <span class="keyword">foreach</span> (<span class="variable language_">$this</span>-&gt;prefixDirsPsr4[<span class="variable">$search</span>] <span class="keyword">as</span> <span class="variable">$dir</span>) &#123;</span><br><span class="line">                <span class="keyword">if</span> (<span class="title function_ invoke__">file_exists</span>(<span class="variable">$file</span> = <span class="variable">$dir</span> . <span class="variable">$pathEnd</span>)) &#123;</span><br><span class="line">                    <span class="keyword">return</span> <span class="variable">$file</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>while 循环里，首先找到类名里最后一个反斜杠 “&quot; 的位置 $lastPos ,<br>从第0位到 $lastPos 位截取类名，得到一个字符串 $subPath ，<br>字符串 $subPath 后拼接一个反斜杠 “&quot;，得到一个[可能是的]命名空间 $search ，<br>prefixDirsPsr4 属性保存命名空间与相对路径的映射，判断 $search 是否存在 prefixDirsPsr4 映射中，<br>如果存在，则返回一个数组，包含有一个或者多个路径，<br>从第 $lastPos + 1 位到最后一位截取类名，保留除命中的命名空间外的类名 $pathEnd ， $pathEnd 与命名空间映射的相对路径拼接成绝对路径，判断文件路径是否存在，存在则返回文件路径。</p><h3><span id="mu-biao-lei-zai-rootpath-x2f-extend-x2f-mu-lu">目标类在 $rootPath&#x2F;extend&#x2F; 目录</span><a href="#mu-biao-lei-zai-rootpath-x2f-extend-x2f-mu-lu" class="header-anchor">#</a></h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// PSR-0 fallback dirs</span></span><br><span class="line"><span class="keyword">foreach</span> (<span class="variable language_">$this</span>-&gt;fallbackDirsPsr0 <span class="keyword">as</span> <span class="variable">$dir</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="title function_ invoke__">file_exists</span>(<span class="variable">$file</span> = <span class="variable">$dir</span> . DIRECTORY_SEPARATOR . <span class="variable">$logicalPathPsr0</span>)) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable">$file</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>遍历 fallbackDirsPsr0 属性，与类名拼接成一个路径，文件路径真实存在则返回。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1&gt;&lt;span id=&quot;ru-kou-wen-jian-index-php&quot;&gt;入口文件 index.php&lt;/span&gt;&lt;a href=&quot;#ru-kou-wen-jian-index-php&quot; class=&quot;header-anchor&quot;&gt;#&lt;/a&gt;&lt;/h1&gt;&lt;p&gt;引入 ven</summary>
      
    
    
    
    <category term="php" scheme="http://chenfeng.org/categories/php/"/>
    
    
    <category term="php" scheme="http://chenfeng.org/tags/php/"/>
    
    <category term="composer" scheme="http://chenfeng.org/tags/composer/"/>
    
  </entry>
  
  <entry>
    <title>PHP trait特性</title>
    <link href="http://chenfeng.org/2022/06/05/trait/"/>
    <id>http://chenfeng.org/2022/06/05/trait/</id>
    <published>2022-06-05T06:00:00.000Z</published>
    <updated>2022-06-21T14:33:15.210Z</updated>
    
    <content type="html"><![CDATA[<p>trait是一种代码复用的方法，使开发人员能够在不同层次结构的类中服用方法，增加类的灵活性。</p><p>继承机制为类型相似的子类提供方法复用的模板，<br>对于类型各异，处于不用层级结构的类，可以使用trait实现代码复用机制。</p><h2><span id="shi-yong-trait-fu-yong-fang-fa">使用trait复用方法</span><a href="#shi-yong-trait-fu-yong-fang-fa" class="header-anchor">#</a></h2><p>在调用类方法的时候通常都需要实例化类，并且实例化类几乎是每个类都需要的方法，因此复用实例化方法就显得有必要。</p><figure class="highlight php"><figcaption><span>Instances.php</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">namespace</span> <span class="title class_">tp</span>\<span class="title class_">trait</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">trait</span> <span class="title">Instances</span> </span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="built_in">static</span> <span class="variable">$instance</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">static</span> <span class="function"><span class="keyword">function</span> <span class="title">getInstance</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">echo</span> <span class="keyword">__TRAIT__</span>.<span class="string">&quot;\n&quot;</span>;</span><br><span class="line">        <span class="keyword">if</span>(<span class="title function_ invoke__">is_null</span>(<span class="built_in">self</span>::<span class="variable">$instance</span>))</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">self</span>::<span class="variable">$instance</span> = <span class="keyword">new</span> <span class="built_in">static</span>();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">self</span>::<span class="variable">$instance</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight php"><figcaption><span>Dog.php</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">namespace</span> <span class="title class_">tp</span>\<span class="title class_">controller</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">use</span> <span class="title">tp</span>\<span class="title">trait</span>\<span class="title">Instances</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Dog</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">use</span> <span class="title">Instances</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">eat</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Dog eat.&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight php"><figcaption><span>Desk.php</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">namespace</span> <span class="title class_">tp</span>\<span class="title class_">controller</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">use</span> <span class="title">tp</span>\<span class="title">trait</span>\<span class="title">Instances</span>;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Desk</span> </span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">use</span> <span class="title">Instances</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">color</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Desk white.&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight php"><figcaption><span>Road.php</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">namespace</span> <span class="title class_">tp</span>\<span class="title class_">controller</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">use</span> <span class="title">tp</span>\<span class="title">trait</span>\<span class="title">Instances</span>;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Road</span> </span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">use</span> <span class="title">Instances</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">length</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Road 1km.&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>声明 trait 语句</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">use</span> <span class="title">tp</span>\<span class="title">trait</span>\<span class="title">Instances</span>;</span><br></pre></td></tr></table></figure><p>和使用 trait</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">use</span> <span class="title">Instances</span>;</span><br></pre></td></tr></table></figure><p>必须要在同一个文件里面同时存在，不能分别存在于父类和子类。</p><figure class="highlight php"><figcaption><span>TraitC.php</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">namespace</span> <span class="title class_">app</span>\<span class="title class_">controller</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">use</span> <span class="title">tp</span>\<span class="title">controller</span>\<span class="title">Dog</span>;</span><br><span class="line"><span class="keyword">use</span> <span class="title">tp</span>\<span class="title">controller</span>\<span class="title">Desk</span>;</span><br><span class="line"><span class="keyword">use</span> <span class="title">tp</span>\<span class="title">controller</span>\<span class="title">Road</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TraitC</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">callDesk</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="title class_">Desk</span>::<span class="title function_ invoke__">getInstance</span>()-&gt;<span class="title function_ invoke__">color</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">callDog</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="title class_">Dog</span>::<span class="title function_ invoke__">getInstance</span>()-&gt;<span class="title function_ invoke__">eat</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">callRoad</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="title class_">Road</span>::<span class="title function_ invoke__">getInstance</span>()-&gt;<span class="title function_ invoke__">length</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>调用后依次返回：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">tp\trait\Instances</span><br><span class="line">Desk white.</span><br><span class="line"></span><br><span class="line">tp\trait\Instances</span><br><span class="line">Dog eat.</span><br><span class="line"></span><br><span class="line">tp\trait\Instances</span><br><span class="line">Road 1km.</span><br></pre></td></tr></table></figure><h2><span id="trait-de-you-xian-ji">trait的优先级</span><a href="#trait-de-you-xian-ji" class="header-anchor">#</a></h2><p>从基类继承的成员会被 trait 插入的成员所覆盖。<br>优先顺序是来自当前类的成员覆盖了 trait 的方法，<br>而 trait 则覆盖了被继承的方法。</p><figure class="highlight php"><figcaption><span>Dog.php</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">namespace</span> <span class="title class_">tp</span>\<span class="title class_">controller</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Dog</span> <span class="keyword">extends</span> <span class="title">Animal</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">eat</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Dog eat.&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight php"><figcaption><span>Animal.php</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">namespace</span> <span class="title class_">tp</span>\<span class="title class_">controller</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">use</span> <span class="title">tp</span>\<span class="title">trait</span>\<span class="title">Instances</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Animal</span> </span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">use</span> <span class="title">Instances</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> <span class="built_in">static</span> <span class="variable">$instance</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">static</span> <span class="function"><span class="keyword">function</span> <span class="title">getInstance</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="keyword">__CLASS__</span>.<span class="string">&quot;\n&quot;</span>;</span><br><span class="line">        <span class="keyword">if</span>(<span class="title function_ invoke__">is_null</span>(<span class="built_in">self</span>::<span class="variable">$instance</span>))</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">self</span>::<span class="variable">$instance</span> = <span class="keyword">new</span> <span class="built_in">static</span>();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">self</span>::<span class="variable">$instance</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>调用Dog类的eat方法后返回：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">tp\controller\Animal</span><br><span class="line">Dog eat.</span><br></pre></td></tr></table></figure><p>表明使用 Animal 类的 getInstance 方法实例化 Animal 类，最后调用 Dog 类的 eat 方法。</p><p>此处 Animal 是 Dog 的基类，但是在 Animal 类中引入了 trait ，所以 Animal 被当作当前类，<br>并且 Animal 没有父类，所以 Animal 类中的 getInstance 方法优先级最高，优先执行。</p><h2><span id="can-kao">参考</span><a href="#can-kao" class="header-anchor">#</a></h2><p><a href="https://www.php.net/manual/zh/language.oop5.traits.php">Trait</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;trait是一种代码复用的方法，使开发人员能够在不同层次结构的类中服用方法，增加类的灵活性。&lt;/p&gt;
&lt;p&gt;继承机制为类型相似的子类提供方法复用的模板，&lt;br&gt;对于类型各异，处于不用层级结构的类，可以使用trait实现代码复用机制。&lt;/p&gt;
&lt;h2&gt;&lt;span id=&quot;sh</summary>
      
    
    
    
    <category term="php" scheme="http://chenfeng.org/categories/php/"/>
    
    
    <category term="php" scheme="http://chenfeng.org/tags/php/"/>
    
  </entry>
  
  <entry>
    <title>MySQL自增ID和业务字段ID做主键的区别</title>
    <link href="http://chenfeng.org/2022/06/04/mysql/"/>
    <id>http://chenfeng.org/2022/06/04/mysql/</id>
    <published>2022-06-04T06:00:00.000Z</published>
    <updated>2022-06-18T18:51:16.570Z</updated>
    
    <content type="html"><![CDATA[<p>主键的作用是为了唯一标识出表中的一行数据，并且不能为空。</p><p>一、自增ID</p><p>自增ID作为主键的优缺点：</p><p>自增ID的优点</p><ol><li>ID值由数据库引擎产生，方便开发人员</li><li>ID值连续递增，提高数据库写入性能</li><li>整型类型，所需存储空间较小</li></ol><p>自增ID缺点</p><ol><li>ID值本身会暴露数据规模</li><li>ID值有序，容易暴露出其他ID值</li><li>ID值由数据库引擎自动生成，分布式环境不能做到全局唯一</li></ol><p>二、业务字段ID</p><p>业务字段ID作为主键可能产生的问题</p><ol><li>主键不能为空，某些业务字段可能非必需提供，或者因为隐私不能提供（例如电话号码、身份证号码）</li><li>业务字段ID可能遇到回收利用（例如会员号），导致在显示和统计上出错</li><li>业务字段ID有可能在一个表中多次出现（比如订单号）</li></ol><p>所以主键应该使用一个与业务无关的自增ID作为主键，但是也要接受自增ID的缺点。</p><p>三、自定义ID</p><p>主键除了使用自增ID，还可以自定义一个ID，例如：<br>使用：时间戳（13位）+去重整数（2位）+用户ID（后5位）作为主键ID</p><p>这个主键ID有20位，有序但不连续，趋势递增，有效的隐藏了数据规模，还能保证分布式环境下全局唯一。</p><p>随着数据规模的增加，自定义ID出现重复的概率也会增大，此时需要增加自定义ID的长度。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;主键的作用是为了唯一标识出表中的一行数据，并且不能为空。&lt;/p&gt;
&lt;p&gt;一、自增ID&lt;/p&gt;
&lt;p&gt;自增ID作为主键的优缺点：&lt;/p&gt;
&lt;p&gt;自增ID的优点&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;ID值由数据库引擎产生，方便开发人员&lt;/li&gt;
&lt;li&gt;ID值连续递增，提高数据库写入性能</summary>
      
    
    
    
    <category term="mysql" scheme="http://chenfeng.org/categories/mysql/"/>
    
    
    <category term="mysql" scheme="http://chenfeng.org/tags/mysql/"/>
    
  </entry>
  
  <entry>
    <title>PHP数组合并之array_merge 和 数组相加</title>
    <link href="http://chenfeng.org/2022/04/01/php-array/"/>
    <id>http://chenfeng.org/2022/04/01/php-array/</id>
    <published>2022-04-01T15:00:00.000Z</published>
    <updated>2022-07-10T03:10:57.923Z</updated>
    
    <content type="html"><![CDATA[<p>数组合并一般会使用 array_merge 函数，其实还有数组相加运算。</p><p>二者的区别是：<br>当数组存在相同字符串键名时，array_merge 函数会覆盖数组元素，数组相加运算不会覆盖数组元素；<br>当存在相同数字键名时，array_merge 函数会合并所有的元素，并且重新编排键名，数组相加运算依然不会覆盖数组元素。</p><h2><span id="he-bing-de-shu-zu-jian-ming-hu-bu-xiang-tong">合并的数组键名互不相同</span><a href="#he-bing-de-shu-zu-jian-ming-hu-bu-xiang-tong" class="header-anchor">#</a></h2><p>array_merge 函数和 数组相加运算 都是直接合并数组，返回结果，两种合并数组的方式效果一样。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="variable">$arr1</span> = [<span class="string">&#x27;p&#x27;</span>=&gt;<span class="string">&#x27;php&#x27;</span>,<span class="string">&#x27;m&#x27;</span>=&gt;<span class="string">&#x27;mysql&#x27;</span>,<span class="string">&#x27;n&#x27;</span>=&gt;<span class="string">&#x27;nginx&#x27;</span>];</span><br><span class="line"><span class="variable">$arr2</span> = [<span class="string">&#x27;j&#x27;</span>=&gt;<span class="string">&#x27;javascript&#x27;</span>,<span class="string">&#x27;h&#x27;</span>=&gt;<span class="string">&#x27;html&#x27;</span>,<span class="string">&#x27;c&#x27;</span>=&gt;<span class="string">&#x27;css&#x27;</span>];</span><br><span class="line"><span class="variable">$arr3</span> = <span class="title function_ invoke__">array_merge</span>(<span class="variable">$arr1</span>,<span class="variable">$arr2</span>);</span><br><span class="line"><span class="variable">$arr4</span> = <span class="variable">$arr1</span> + <span class="variable">$arr2</span>;</span><br><span class="line"></span><br><span class="line"><span class="title function_ invoke__">print_r</span>(<span class="variable">$arr3</span>);</span><br><span class="line"><span class="title function_ invoke__">print_r</span>(<span class="variable">$arr4</span>);</span><br><span class="line"></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>输出：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">Array</span><br><span class="line">(</span><br><span class="line">    [p] =&gt; php</span><br><span class="line">    [m] =&gt; mysql</span><br><span class="line">    [n] =&gt; nginx</span><br><span class="line">    [j] =&gt; javascript</span><br><span class="line">    [h] =&gt; html</span><br><span class="line">    [c] =&gt; css</span><br><span class="line">)</span><br><span class="line">Array</span><br><span class="line">(</span><br><span class="line">    [p] =&gt; php</span><br><span class="line">    [m] =&gt; mysql</span><br><span class="line">    [n] =&gt; nginx</span><br><span class="line">    [j] =&gt; javascript</span><br><span class="line">    [h] =&gt; html</span><br><span class="line">    [c] =&gt; css</span><br><span class="line">)</span><br></pre></td></tr></table></figure><h2><span id="he-bing-de-shu-zu-cun-zai-xiang-tong-jian-ming">合并的数组存在相同键名</span><a href="#he-bing-de-shu-zu-cun-zai-xiang-tong-jian-ming" class="header-anchor">#</a></h2><h3><span id="shu-zu-jian-ming-shi-zi-fu-chuan">数组键名是字符串</span><a href="#shu-zu-jian-ming-shi-zi-fu-chuan" class="header-anchor">#</a></h3><p>array_merge 函数在合并每一个元素前，先判断是否已经存在相同键名，存在则 <strong>覆盖</strong> 同名元素的值，不存在则增加元素。</p><p>数组相加运算在合并每一个元素前，先判断是否已经存在相同键名，存在则 <strong>跳过</strong> 该元素，不存在则增加元素。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="variable">$arr1</span> = [<span class="string">&#x27;p&#x27;</span>=&gt;<span class="string">&#x27;php&#x27;</span>,<span class="string">&#x27;m&#x27;</span>=&gt;<span class="string">&#x27;mysql&#x27;</span>,<span class="string">&#x27;n&#x27;</span>=&gt;<span class="string">&#x27;nginx&#x27;</span>];</span><br><span class="line"><span class="variable">$arr2</span> = [<span class="string">&#x27;j&#x27;</span>=&gt;<span class="string">&#x27;javascript&#x27;</span>,<span class="string">&#x27;n&#x27;</span>=&gt;<span class="string">&#x27;nginx2&#x27;</span>,<span class="string">&#x27;h&#x27;</span>=&gt;<span class="string">&#x27;html&#x27;</span>,<span class="string">&#x27;c&#x27;</span>=&gt;<span class="string">&#x27;css&#x27;</span>];</span><br><span class="line"><span class="variable">$arr3</span> = <span class="title function_ invoke__">array_merge</span>(<span class="variable">$arr1</span>,<span class="variable">$arr2</span>);</span><br><span class="line"><span class="variable">$arr4</span> = <span class="variable">$arr1</span> + <span class="variable">$arr2</span>;</span><br><span class="line"></span><br><span class="line"><span class="title function_ invoke__">print_r</span>(<span class="variable">$arr3</span>);</span><br><span class="line"><span class="title function_ invoke__">print_r</span>(<span class="variable">$arr4</span>);</span><br><span class="line"></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>输出：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">Array</span><br><span class="line">(</span><br><span class="line">    [p] =&gt; php</span><br><span class="line">    [m] =&gt; mysql</span><br><span class="line">    [n] =&gt; nginx2</span><br><span class="line">    [j] =&gt; javascript</span><br><span class="line">    [h] =&gt; html</span><br><span class="line">    [c] =&gt; css</span><br><span class="line">)</span><br><span class="line">Array</span><br><span class="line">(</span><br><span class="line">    [p] =&gt; php</span><br><span class="line">    [m] =&gt; mysql</span><br><span class="line">    [n] =&gt; nginx</span><br><span class="line">    [j] =&gt; javascript</span><br><span class="line">    [h] =&gt; html</span><br><span class="line">    [c] =&gt; css</span><br><span class="line">)</span><br></pre></td></tr></table></figure><h3><span id="shu-zu-jian-ming-shi-shu-zi">数组键名是数字</span><a href="#shu-zu-jian-ming-shi-shu-zi" class="header-anchor">#</a></h3><p>当数组的键名为空时，PHP会默认键名为数字，默认数字键名与元素的位置有关。</p><p>以下两对数组结果一样</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[<span class="string">&#x27;php&#x27;</span>,<span class="string">&#x27;mysql&#x27;</span>,<span class="string">&#x27;nginx&#x27;</span>];</span><br><span class="line"></span><br><span class="line">[<span class="number">0</span>=&gt;’php’,<span class="number">1</span>=&gt;’mysql’,<span class="number">2</span>=&gt;’nginx<span class="string">&#x27;];</span></span><br></pre></td></tr></table></figure><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[<span class="string">&#x27;j&#x27;</span>=&gt;<span class="string">&#x27;javascript&#x27;</span>,<span class="number">1</span>=&gt;<span class="string">&#x27;php&#x27;</span>,<span class="string">&#x27;mysql&#x27;</span>,<span class="string">&#x27;nginx&#x27;</span>,<span class="number">3</span>=&gt;<span class="string">&#x27;html&#x27;</span>];</span><br><span class="line"></span><br><span class="line">[<span class="string">&#x27;j&#x27;</span>=&gt;<span class="string">&#x27;javascript&#x27;</span>,<span class="number">1</span>=&gt;<span class="string">&#x27;php’,2=&gt;&#x27;</span>mysql<span class="string">&#x27;,3=&gt;&#x27;</span>html<span class="string">&#x27;];</span></span><br></pre></td></tr></table></figure><p>array_merge 函数在合并每一个元素前，先判断键名类型是否为整型数字，若为整型数字，则增加元素，若为字符串型，则根据字符串键名的算法合并元素。最后再根据元素位置编排数字键名。</p><p>数组相加运算合并元素的算法跟键名为字符串的合并算法一样。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="variable">$arr1</span> = [<span class="string">&#x27;php&#x27;</span>,<span class="string">&#x27;mysql&#x27;</span>,<span class="string">&#x27;nginx&#x27;</span>];</span><br><span class="line"><span class="variable">$arr2</span> = [<span class="string">&#x27;javascript&#x27;</span>,<span class="string">&#x27;nginx2&#x27;</span>,<span class="string">&#x27;html&#x27;</span>,<span class="string">&#x27;css&#x27;</span>];</span><br><span class="line"></span><br><span class="line"><span class="variable">$arr3</span> = <span class="title function_ invoke__">array_merge</span>(<span class="variable">$arr1</span>,<span class="variable">$arr2</span>);</span><br><span class="line"><span class="variable">$arr4</span> = <span class="variable">$arr1</span> + <span class="variable">$arr2</span>;</span><br><span class="line"></span><br><span class="line"><span class="title function_ invoke__">print_r</span>(<span class="variable">$arr3</span>);</span><br><span class="line"><span class="title function_ invoke__">print_r</span>(<span class="variable">$arr4</span>);</span><br><span class="line"></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>输出：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">Array</span><br><span class="line">(</span><br><span class="line">    [0] =&gt; php</span><br><span class="line">    [1] =&gt; mysql</span><br><span class="line">    [2] =&gt; nginx</span><br><span class="line">    [3] =&gt; javascript</span><br><span class="line">    [4] =&gt; nginx2</span><br><span class="line">    [5] =&gt; html</span><br><span class="line">    [6] =&gt; css</span><br><span class="line">)</span><br><span class="line">Array</span><br><span class="line">(</span><br><span class="line">    [0] =&gt; php</span><br><span class="line">    [1] =&gt; mysql</span><br><span class="line">    [2] =&gt; nginx</span><br><span class="line">    [3] =&gt; css</span><br><span class="line">)</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;数组合并一般会使用 array_merge 函数，其实还有数组相加运算。&lt;/p&gt;
&lt;p&gt;二者的区别是：&lt;br&gt;当数组存在相同字符串键名时，array_merge 函数会覆盖数组元素，数组相加运算不会覆盖数组元素；&lt;br&gt;当存在相同数字键名时，array_merge 函数会合</summary>
      
    
    
    
    <category term="php" scheme="http://chenfeng.org/categories/php/"/>
    
    
    <category term="php" scheme="http://chenfeng.org/tags/php/"/>
    
  </entry>
  
  <entry>
    <title>三个浏览内容的 Linux 命令功能对比</title>
    <link href="http://chenfeng.org/2021/07/24/linux_viewing_content/"/>
    <id>http://chenfeng.org/2021/07/24/linux_viewing_content/</id>
    <published>2021-07-24T02:00:00.000Z</published>
    <updated>2022-06-18T16:52:29.890Z</updated>
    
    <content type="html"><![CDATA[<div class="toc"><!-- toc --><ul><li><a href="#cat">cat</a></li><li><a href="#more">more</a></li><li><a href="#less">less</a></li><li><a href="#zong-jie">总结</a></li></ul><!-- tocstop --></div><p>cat,less,more 命令都有浏览内容、文件的功能对比。</p><h3><span id="cat">cat</span><a href="#cat" class="header-anchor">#</a></h3><p>cat（英文全拼：concatenate）命令用于连接文件并打印到标准输出设备上。</p><p>cat的几个用法：</p><ol><li>显示整个文件：cat filename</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">root@ubuntu:~# cat hello.html </span><br><span class="line">&lt;html&gt;</span><br><span class="line"></span><br><span class="line">        &lt;head&gt;</span><br><span class="line">                &lt;title&gt;title&lt;/title&gt;</span><br><span class="line">        &lt;/head&gt;</span><br><span class="line"></span><br><span class="line">        &lt;body&gt;</span><br><span class="line"></span><br><span class="line">                &lt;p&gt; Hello World&lt;/p&gt;</span><br><span class="line"></span><br><span class="line">        &lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><ol start="2"><li>接收从键盘的输入，创建一个新文件： cat &gt; filename</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">root@ubuntu:~# cat &gt; hello.sh</span><br><span class="line">echo &#x27;Hello World.&#x27;;</span><br><span class="line">^C</span><br></pre></td></tr></table></figure><p>换行后按 ctrl + c 退出即保存。</p><ol start="3"><li>显示行号</li></ol><ul><li>不对空行编号，cat -b filename</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">root@ubuntu:~# cat -b hello.html </span><br><span class="line">     1  &lt;html&gt;</span><br><span class="line"></span><br><span class="line">     2          &lt;head&gt;</span><br><span class="line">     3                  &lt;title&gt;title&lt;/title&gt;</span><br><span class="line">     4          &lt;/head&gt;</span><br><span class="line"></span><br><span class="line">     5          &lt;body&gt;</span><br><span class="line"></span><br><span class="line">     6                  &lt;p&gt; Hello World&lt;/p&gt;</span><br><span class="line"></span><br><span class="line">     7          &lt;/body&gt;</span><br><span class="line">     8  &lt;/html&gt;</span><br></pre></td></tr></table></figure><ul><li>对所有行顺序编号，cat -n filename</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">root@ubuntu:~# cat -n hello.html  </span><br><span class="line">     1  &lt;html&gt;</span><br><span class="line">     2</span><br><span class="line">     3          &lt;head&gt;</span><br><span class="line">     4                  &lt;title&gt;title&lt;/title&gt;</span><br><span class="line">     5          &lt;/head&gt;</span><br><span class="line">     6</span><br><span class="line">     7          &lt;body&gt;</span><br><span class="line">     8</span><br><span class="line">     9                  &lt;p&gt; Hello World&lt;/p&gt;</span><br><span class="line">    10</span><br><span class="line">    11          &lt;/body&gt;</span><br><span class="line">    12  &lt;/html&gt;</span><br></pre></td></tr></table></figure><ol start="4"><li>拼接文件： cat filename1 filename2 &gt; filename3</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">root@ubuntu:~# cat hello.html hello.sh &gt; hello.mix</span><br><span class="line">root@ubuntu:~# cat hello.mix </span><br><span class="line">&lt;html&gt;</span><br><span class="line"></span><br><span class="line">        &lt;head&gt;</span><br><span class="line">                &lt;title&gt;title&lt;/title&gt;</span><br><span class="line">        &lt;/head&gt;</span><br><span class="line"></span><br><span class="line">        &lt;body&gt;</span><br><span class="line"></span><br><span class="line">                &lt;p&gt; Hello World&lt;/p&gt;</span><br><span class="line"></span><br><span class="line">        &lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br><span class="line">echo &#x27;Hello World.&#x27;;</span><br></pre></td></tr></table></figure><ol start="5"><li>cat的反向tac</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">root@ubuntu:~# tac hello.mix </span><br><span class="line">echo &#x27;Hello World.&#x27;;</span><br><span class="line">&lt;/html&gt;</span><br><span class="line">        &lt;/body&gt;</span><br><span class="line"></span><br><span class="line">                &lt;p&gt; Hello World&lt;/p&gt;</span><br><span class="line"></span><br><span class="line">        &lt;body&gt;</span><br><span class="line"></span><br><span class="line">        &lt;/head&gt;</span><br><span class="line">                &lt;title&gt;title&lt;/title&gt;</span><br><span class="line">        &lt;head&gt;</span><br><span class="line"></span><br><span class="line">&lt;html&gt;</span><br></pre></td></tr></table></figure><h3><span id="more">more</span><a href="#more" class="header-anchor">#</a></h3><p>more 命令，功能类似 cat ， cat 命令是将整个文件的内容显示在屏幕上；</p><p>more 命令则会把文件内容分页显示，底部显示浏览进度百分比，方便阅读。</p><ol><li><p>规定一页显示的行数： more -n filename</p></li><li><p>从第n行开始显示： more +n filename</p></li><li><p>翻页</p><ul><li>向下翻一页 按 space 键</li><li>向上翻一页  按 b(back) 键</li></ul></li><li><p>退出 </p><ul><li>按 q(quit)键</li><li>或者翻到最后一页自动退出</li></ul></li></ol><h3><span id="less">less</span><a href="#less" class="header-anchor">#</a></h3><p>less 工具是对文件或其它输出进行分页显示的工具，功能极其强大。</p><ol><li><p>显示行号： less -N filename</p></li><li><p>显示浏览百分比： less -m filename</p></li><li><p>翻页</p><ul><li>向下翻一页 按 space 键</li><li>向上翻一页  按 b(back) 键</li><li>向下翻半页 按 d(down) 键</li><li>向上翻半页 按 u(up) 键</li></ul></li><li><p>搜索</p><ul><li>向下搜索 按 &#x2F;加搜索内容，如 &#x2F;2020</li><li>向上搜索 按 ?加搜索内容，如 ?2020</li><li>按n(next)键搜索下一个</li></ul></li><li><p>退出 按q(quit)键</p></li></ol><h3><span id="zong-jie">总结</span><a href="#zong-jie" class="header-anchor">#</a></h3><p>cat命令除了有浏览文件的功能，主要还是拼接文件的功能；</p><p>more 和 less 命令的功能类似，但是 less 命令的功能更加强大。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;div class=&quot;toc&quot;&gt;

&lt;!-- toc --&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#cat&quot;&gt;cat&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#more&quot;&gt;more&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#less&quot;&gt;less&lt;/a&gt;&lt;/li&gt;
&lt;l</summary>
      
    
    
    
    <category term="linux" scheme="http://chenfeng.org/categories/linux/"/>
    
    
    <category term="linux" scheme="http://chenfeng.org/tags/linux/"/>
    
  </entry>
  
  <entry>
    <title>修改 MySQL 可打开文件数</title>
    <link href="http://chenfeng.org/2021/07/19/open_files_limit/"/>
    <id>http://chenfeng.org/2021/07/19/open_files_limit/</id>
    <published>2021-07-19T02:00:00.000Z</published>
    <updated>2022-06-18T17:29:45.562Z</updated>
    
    <content type="html"><![CDATA[<div class="toc"><!-- toc --><ul><li><a href="#ke-da-kai-wen-jian-shu-xian-zhi">可打开文件数限制</a></li><li><a href="#xiu-gai-mysql-open-files-limit-pei-zhi-de-zhi-de-liang-chong-fang-fa">修改 MySQL open_files_limit 配置的值的两种方法：</a></li></ul><!-- tocstop --></div><h3><span id="ke-da-kai-wen-jian-shu-xian-zhi">可打开文件数限制</span><a href="#ke-da-kai-wen-jian-shu-xian-zhi" class="header-anchor">#</a></h3><p>如果 MySQL 可打开的文件数值设置的过小，会出现 “too many open files” 的错误，这意味着一个进程已经打开了太多的文件（文件描述符），无法再打开新的文件了。</p><p>查看 MySQL 可打开文件数配置值</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; select @@open_files_limit;</span><br></pre></td></tr></table></figure><p>查看某一个进程(MySQL进程)已经打开的文件数 </p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ll /proc/pid/fd|wc -l</span><br></pre></td></tr></table></figure><h3><span id="xiu-gai-mysql-open-files-limit-pei-zhi-de-zhi-de-liang-chong-fang-fa">修改 MySQL open_files_limit 配置的值的两种方法：</span><a href="#xiu-gai-mysql-open-files-limit-pei-zhi-de-zhi-de-liang-chong-fang-fa" class="header-anchor">#</a></h3><h4><span id="1-tong-guo-xiu-gai-mysql-xi-tong-bian-liang-max-connections-table-open-cache-huo-zhe-xiu-gai-xi-tong-ke-da-kai-zui-da-wen-jian-miao-shu-fu-de-shu-liang-lai-xiu-gai-open-files-limit-de-zhi">1.通过修改 MySQL 系统变量 max_connections 、 table_open_cache 或者 修改系统可打开最大文件描述符的数量 来修改 open_files_limit 的值</span><a href="#1-tong-guo-xiu-gai-mysql-xi-tong-bian-liang-max-connections-table-open-cache-huo-zhe-xiu-gai-xi-tong-ke-da-kai-zui-da-wen-jian-miao-shu-fu-de-shu-liang-lai-xiu-gai-open-files-limit-de-zhi" class="header-anchor">#</a></h4><p>MySQL 官方文档对这个字段的描述，<a href="https://dev.mysql.com/doc/refman/8.0/en/server-system-variables.html#sysvar_open_files_limit">open_files_limit</a> 实际的取值会从下面四个值当中获取最大的。</p><ul><li>10 + max_connections + (table_open_cache * 2)</li><li>max_connections * 5</li><li>MySQL 8.0.19 and higher: The operating system limit.</li><li>Prior to MySQL 8.0.19:<ul><li>The operating system limit if that limit is positive but not Infinity.</li><li>If the operating system limit is Infinity: open_files_limit value if specified at startup, 5000 if not.</li></ul></li></ul><p>通过修改 MySQL 系统变量 max_connections 、 table_open_cache 或者 修改系统可打开最大文件描述符的数量 来修改 open_files_limit 的值。</p><h4><span id="2-xiu-gai-mysql-de-xi-tong-fu-wu-wen-jian">2. 修改 MySQL 的系统服务文件</span><a href="#2-xiu-gai-mysql-de-xi-tong-fu-wu-wen-jian" class="header-anchor">#</a></h4><p>通过查看 MySQL 状态命令 <code>service mysql status</code>，查看MySQL的系统服务文件(MySQL systemd service file)。</p><img src="http://tva4.sinaimg.cn/large/7d4c6366gy1gsb9iu6wrbj20wg087q3j.jpg" width="700" align="bottom"><p>在 <strong>mysql.service</strong> 文件的同级目录创建目录 <strong>mysql.service.d</strong>，并在目录里创建文件 <strong>limits.conf</strong> ，文件内容如下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">/lib/systemd/system/mysql.service.d/limits.conf</span></span><br><span class="line">[Service]</span><br><span class="line">LimitNOFILE=20480</span><br></pre></td></tr></table></figure><p>修改完后继续执行以下两条命令：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">systemctl daemon-reload    # 重新加载配置文件</span><br><span class="line">service mysql restart    # 重启mysqld服务，使配置生效</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;div class=&quot;toc&quot;&gt;

&lt;!-- toc --&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#ke-da-kai-wen-jian-shu-xian-zhi&quot;&gt;可打开文件数限制&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#xiu-gai-mysql-open-file</summary>
      
    
    
    
    <category term="mysql" scheme="http://chenfeng.org/categories/mysql/"/>
    
    
    <category term="mysql" scheme="http://chenfeng.org/tags/mysql/"/>
    
  </entry>
  
  <entry>
    <title>使用JavaScript格式化数组字符串</title>
    <link href="http://chenfeng.org/2021/06/28/javascript-format/"/>
    <id>http://chenfeng.org/2021/06/28/javascript-format/</id>
    <published>2021-06-28T23:00:00.000Z</published>
    <updated>2022-06-18T18:27:04.378Z</updated>
    
    <content type="html"><![CDATA[<h4><span id="ge-shi-hua-gui-ze">格式化规则</span><a href="#ge-shi-hua-gui-ze" class="header-anchor">#</a></h4><ol><li><code>[</code> 后面跟 <code>[</code> ，换行，增加缩进</li><li><code>,</code> 后面跟 <code>[</code> ，换行，增加缩进</li><li><code>]</code> 后面跟 <code>,</code> ，换行，缩进</li><li><code>]</code> 后面跟 <code>]</code> ，换行，减少缩进</li></ol><h4><span id="guan-yu-huan-xing">关于换行</span><a href="#guan-yu-huan-xing" class="header-anchor">#</a></h4><ol><li>HTML页面显示，使用 <code>&lt;br&gt;</code> 换行</li><li>输入框显示，使用 <code>\n</code> 换行</li></ol><h4><span id="ge-shi-hua-han-shu">格式化函数</span><a href="#ge-shi-hua-han-shu" class="header-anchor">#</a></h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">title</span>&gt;</span>json<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">var</span> formatArrString = <span class="keyword">function</span>(<span class="params">conf</span>) </span></span><br><span class="line"><span class="language-javascript">            &#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="keyword">let</span> html = <span class="string">&quot;&quot;</span>;</span></span><br><span class="line"><span class="language-javascript">                <span class="keyword">let</span> tmp = <span class="string">&quot;&quot;</span>;       <span class="comment">// 临时存储字符串</span></span></span><br><span class="line"><span class="language-javascript">                <span class="keyword">let</span> level = <span class="number">0</span>;      <span class="comment">// 缩进行数          </span></span></span><br><span class="line"><span class="language-javascript">                <span class="keyword">let</span> num = <span class="number">4</span>;        <span class="comment">// 缩进空格数</span></span></span><br><span class="line"><span class="language-javascript">                <span class="keyword">for</span>(<span class="keyword">let</span> i=<span class="number">0</span>;i&lt;conf.<span class="property">length</span>;i++)</span></span><br><span class="line"><span class="language-javascript">                &#123;</span></span><br><span class="line"><span class="language-javascript">                    tmp += conf.<span class="title function_">charAt</span>(i);</span></span><br><span class="line"><span class="language-javascript">                    <span class="keyword">if</span>(conf.<span class="title function_">charAt</span>(i) == <span class="string">&#x27;[&#x27;</span> &amp;&amp; conf.<span class="title function_">charAt</span>(i+<span class="number">1</span>) == <span class="string">&#x27;[&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript">                    &#123;</span></span><br><span class="line"><span class="language-javascript">                        html += tmp;</span></span><br><span class="line"><span class="language-javascript">                        html += <span class="string">&quot;&lt;br&gt;&quot;</span>;</span></span><br><span class="line"><span class="language-javascript">                        level += num;</span></span><br><span class="line"><span class="language-javascript">                        tmp = <span class="string">&quot;&quot;</span>;</span></span><br><span class="line"><span class="language-javascript">                        <span class="keyword">for</span>(<span class="keyword">let</span> j=<span class="number">0</span>;j&lt;level;j++)</span></span><br><span class="line"><span class="language-javascript">                            html += <span class="string">&quot;\xa0&quot;</span></span></span><br><span class="line"><span class="language-javascript">                    &#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">                    <span class="keyword">if</span>(conf.<span class="title function_">charAt</span>(i) == <span class="string">&#x27;,&#x27;</span> &amp;&amp; conf.<span class="title function_">charAt</span>(i+<span class="number">1</span>) == <span class="string">&#x27;[&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript">                    &#123;</span></span><br><span class="line"><span class="language-javascript">                        html += tmp;</span></span><br><span class="line"><span class="language-javascript">                        html += <span class="string">&quot;&lt;br&gt;&quot;</span>;</span></span><br><span class="line"><span class="language-javascript">                        level += num;</span></span><br><span class="line"><span class="language-javascript">                        tmp = <span class="string">&quot;&quot;</span>;</span></span><br><span class="line"><span class="language-javascript">                        <span class="keyword">for</span>(<span class="keyword">let</span> j=<span class="number">0</span>;j&lt;level;j++)</span></span><br><span class="line"><span class="language-javascript">                            html += <span class="string">&quot;\xa0&quot;</span></span></span><br><span class="line"><span class="language-javascript">                    &#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">                    <span class="keyword">if</span>(conf.<span class="title function_">charAt</span>(i) == <span class="string">&#x27;]&#x27;</span> &amp;&amp; conf.<span class="title function_">charAt</span>(i+<span class="number">1</span>) == <span class="string">&#x27;,&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript">                    &#123;</span></span><br><span class="line"><span class="language-javascript">                        html += tmp;</span></span><br><span class="line"><span class="language-javascript">                        tmp = <span class="string">&quot;&quot;</span>;</span></span><br><span class="line"><span class="language-javascript">                        level -= num;</span></span><br><span class="line"><span class="language-javascript">                    &#125; <span class="keyword">else</span> <span class="keyword">if</span>(conf.<span class="title function_">charAt</span>(i) == <span class="string">&#x27;]&#x27;</span> &amp;&amp; conf.<span class="title function_">charAt</span>(i+<span class="number">1</span>) == <span class="string">&#x27;]&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript">                    &#123;</span></span><br><span class="line"><span class="language-javascript">                        html += tmp;</span></span><br><span class="line"><span class="language-javascript">                        tmp = <span class="string">&quot;&quot;</span>;</span></span><br><span class="line"><span class="language-javascript">                        html += <span class="string">&quot;&lt;br&gt;&quot;</span>;</span></span><br><span class="line"><span class="language-javascript">                        level -= num;</span></span><br><span class="line"><span class="language-javascript">                        <span class="keyword">for</span>(<span class="keyword">let</span> j=<span class="number">0</span>;j&lt;level;j++)</span></span><br><span class="line"><span class="language-javascript">                            html += <span class="string">&quot;\xa0&quot;</span></span></span><br><span class="line"><span class="language-javascript">                    &#125;</span></span><br><span class="line"><span class="language-javascript">                &#125;</span></span><br><span class="line"><span class="language-javascript">                html += tmp;</span></span><br><span class="line"><span class="language-javascript">                <span class="keyword">return</span> html;</span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">var</span> conf = <span class="string">&quot;[[667,3,[[99999999999,10900,[[99999999999,20000000,1000],[20000000,10000000,900],[10000000,5000000,800],[5000000,1000000,700]]],[10900,10600,[[99999999999,20000000,900],[20000000,10000000,800],[10000000,5000000,700],[5000000,1000000,600]]],[10600,10300,[[99999999999,20000000,800],[20000000,10000000,700],[10000000,5000000,600],[5000000,1000000,500]]],[10300,10000,[[99999999999,20000000,700],[20000000,10000000,600],[10000000,5000000,500],[5000000,1000000,400]]],[9000,7000,[[-99999999999,-20000000,-250],[-20000000,-10000000,-200],[-10000000,-5000000,-200],[-5000000,-1000000,-200]]],[7000,0,[[-99999999999,-20000000,-300],[-20000000,-10000000,-200],[-10000000,-5000000,-200],[-5000000,-1000000,-200]]]]],[2405,3,[[99999999999,10900,[[99999999999,20000000,1000],[20000000,10000000,900],[10000000,5000000,800],[5000000,1000000,700]]],[10900,10600,[[99999999999,20000000,900],[20000000,10000000,800],[10000000,5000000,700],[5000000,1000000,600]]],[10600,10300,[[99999999999,20000000,800],[20000000,10000000,700],[10000000,5000000,600],[5000000,1000000,500]]],[10300,10000,[[99999999999,20000000,700],[20000000,10000000,600],[10000000,5000000,500],[5000000,1000000,400]]],[9000,7000,[[-99999999999,-20000000,-250],[-20000000,-10000000,-200],[-10000000,-5000000,-200],[-5000000,-1000000,-200]]],[7000,0,[[-99999999999,-20000000,-300],[-20000000,-10000000,-200],[-10000000,-5000000,-200],[-5000000,-1000000,-200]]]]]]&quot;</span>;</span></span><br><span class="line"><span class="language-javascript">            <span class="variable language_">document</span>.<span class="title function_">write</span>(<span class="title function_">formatArrString</span>(conf));</span></span><br><span class="line"><span class="language-javascript">        </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h4><span id="ge-shi-hua-xiao-guo">格式化效果</span><a href="#ge-shi-hua-xiao-guo" class="header-anchor">#</a></h4><ol><li>使用 <a href="https://www.bejson.com/">bejson</a> 格式化出来的效果</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br></pre></td><td class="code"><pre><span class="line">[</span><br><span class="line">    [667, 3, [</span><br><span class="line">        [99999999999, 10900, [</span><br><span class="line">            [99999999999, 20000000, 1000],</span><br><span class="line">            [20000000, 10000000, 900],</span><br><span class="line">            [10000000, 5000000, 800],</span><br><span class="line">            [5000000, 1000000, 700]</span><br><span class="line">        ]],</span><br><span class="line">        [10900, 10600, [</span><br><span class="line">            [99999999999, 20000000, 900],</span><br><span class="line">            [20000000, 10000000, 800],</span><br><span class="line">            [10000000, 5000000, 700],</span><br><span class="line">            [5000000, 1000000, 600]</span><br><span class="line">        ]],</span><br><span class="line">        [10600, 10300, [</span><br><span class="line">            [99999999999, 20000000, 800],</span><br><span class="line">            [20000000, 10000000, 700],</span><br><span class="line">            [10000000, 5000000, 600],</span><br><span class="line">            [5000000, 1000000, 500]</span><br><span class="line">        ]],</span><br><span class="line">        [10300, 10000, [</span><br><span class="line">            [99999999999, 20000000, 700],</span><br><span class="line">            [20000000, 10000000, 600],</span><br><span class="line">            [10000000, 5000000, 500],</span><br><span class="line">            [5000000, 1000000, 400]</span><br><span class="line">        ]],</span><br><span class="line">        [9000, 7000, [</span><br><span class="line">            [-99999999999, -20000000, -250],</span><br><span class="line">            [-20000000, -10000000, -200],</span><br><span class="line">            [-10000000, -5000000, -200],</span><br><span class="line">            [-5000000, -1000000, -200]</span><br><span class="line">        ]],</span><br><span class="line">        [7000, 0, [</span><br><span class="line">            [-99999999999, -20000000, -300],</span><br><span class="line">            [-20000000, -10000000, -200],</span><br><span class="line">            [-10000000, -5000000, -200],</span><br><span class="line">            [-5000000, -1000000, -200]</span><br><span class="line">        ]]</span><br><span class="line">    ]],</span><br><span class="line">    [2405, 3, [</span><br><span class="line">        [99999999999, 10900, [</span><br><span class="line">            [99999999999, 20000000, 1000],</span><br><span class="line">            [20000000, 10000000, 900],</span><br><span class="line">            [10000000, 5000000, 800],</span><br><span class="line">            [5000000, 1000000, 700]</span><br><span class="line">        ]],</span><br><span class="line">        [10900, 10600, [</span><br><span class="line">            [99999999999, 20000000, 900],</span><br><span class="line">            [20000000, 10000000, 800],</span><br><span class="line">            [10000000, 5000000, 700],</span><br><span class="line">            [5000000, 1000000, 600]</span><br><span class="line">        ]],</span><br><span class="line">        [10600, 10300, [</span><br><span class="line">            [99999999999, 20000000, 800],</span><br><span class="line">            [20000000, 10000000, 700],</span><br><span class="line">            [10000000, 5000000, 600],</span><br><span class="line">            [5000000, 1000000, 500]</span><br><span class="line">        ]],</span><br><span class="line">        [10300, 10000, [</span><br><span class="line">            [99999999999, 20000000, 700],</span><br><span class="line">            [20000000, 10000000, 600],</span><br><span class="line">            [10000000, 5000000, 500],</span><br><span class="line">            [5000000, 1000000, 400]</span><br><span class="line">        ]],</span><br><span class="line">        [9000, 7000, [</span><br><span class="line">            [-99999999999, -20000000, -250],</span><br><span class="line">            [-20000000, -10000000, -200],</span><br><span class="line">            [-10000000, -5000000, -200],</span><br><span class="line">            [-5000000, -1000000, -200]</span><br><span class="line">        ]],</span><br><span class="line">        [7000, 0, [</span><br><span class="line">            [-99999999999, -20000000, -300],</span><br><span class="line">            [-20000000, -10000000, -200],</span><br><span class="line">            [-10000000, -5000000, -200],</span><br><span class="line">            [-5000000, -1000000, -200]</span><br><span class="line">        ]]</span><br><span class="line">    ]]</span><br><span class="line">]</span><br></pre></td></tr></table></figure><p>2.使用 formatArrString 函数格式化出来的效果</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br></pre></td><td class="code"><pre><span class="line">[</span><br><span class="line">    [667,3,</span><br><span class="line">        [</span><br><span class="line">            [99999999999,10900,</span><br><span class="line">                [</span><br><span class="line">                    [99999999999,20000000,1000],</span><br><span class="line">                    [20000000,10000000,900],</span><br><span class="line">                    [10000000,5000000,800],</span><br><span class="line">                    [5000000,1000000,700]</span><br><span class="line">                ]</span><br><span class="line">            ],</span><br><span class="line">            [10900,10600,</span><br><span class="line">                [</span><br><span class="line">                    [99999999999,20000000,900],</span><br><span class="line">                    [20000000,10000000,800],</span><br><span class="line">                    [10000000,5000000,700],</span><br><span class="line">                    [5000000,1000000,600]</span><br><span class="line">                ]</span><br><span class="line">            ],</span><br><span class="line">            [10600,10300,</span><br><span class="line">                [</span><br><span class="line">                    [99999999999,20000000,800],</span><br><span class="line">                    [20000000,10000000,700],</span><br><span class="line">                    [10000000,5000000,600],</span><br><span class="line">                    [5000000,1000000,500]</span><br><span class="line">                ]</span><br><span class="line">            ],</span><br><span class="line">            [10300,10000,</span><br><span class="line">                [</span><br><span class="line">                    [99999999999,20000000,700],</span><br><span class="line">                    [20000000,10000000,600],</span><br><span class="line">                    [10000000,5000000,500],</span><br><span class="line">                    [5000000,1000000,400]</span><br><span class="line">                ]</span><br><span class="line">            ],</span><br><span class="line">            [9000,7000,</span><br><span class="line">                [</span><br><span class="line">                    [-99999999999,-20000000,-250],</span><br><span class="line">                    [-20000000,-10000000,-200],</span><br><span class="line">                    [-10000000,-5000000,-200],</span><br><span class="line">                    [-5000000,-1000000,-200]</span><br><span class="line">                ]</span><br><span class="line">            ],</span><br><span class="line">            [7000,0,</span><br><span class="line">                [</span><br><span class="line">                    [-99999999999,-20000000,-300],</span><br><span class="line">                    [-20000000,-10000000,-200],</span><br><span class="line">                    [-10000000,-5000000,-200],</span><br><span class="line">                    [-5000000,-1000000,-200]</span><br><span class="line">                ]</span><br><span class="line">            ]</span><br><span class="line">        ]</span><br><span class="line">    ],</span><br><span class="line">    [2405,3,</span><br><span class="line">        [</span><br><span class="line">            [99999999999,10900,</span><br><span class="line">                [</span><br><span class="line">                    [99999999999,20000000,1000],</span><br><span class="line">                    [20000000,10000000,900],</span><br><span class="line">                    [10000000,5000000,800],</span><br><span class="line">                    [5000000,1000000,700]</span><br><span class="line">                ]</span><br><span class="line">            ],</span><br><span class="line">            [10900,10600,</span><br><span class="line">                [</span><br><span class="line">                    [99999999999,20000000,900],</span><br><span class="line">                    [20000000,10000000,800],</span><br><span class="line">                    [10000000,5000000,700],</span><br><span class="line">                    [5000000,1000000,600]</span><br><span class="line">                ]</span><br><span class="line">            ],</span><br><span class="line">            [10600,10300,</span><br><span class="line">                [</span><br><span class="line">                    [99999999999,20000000,800],</span><br><span class="line">                    [20000000,10000000,700],</span><br><span class="line">                    [10000000,5000000,600],</span><br><span class="line">                    [5000000,1000000,500]</span><br><span class="line">                ]</span><br><span class="line">            ],</span><br><span class="line">            [10300,10000,</span><br><span class="line">                [</span><br><span class="line">                    [99999999999,20000000,700],</span><br><span class="line">                    [20000000,10000000,600],</span><br><span class="line">                    [10000000,5000000,500],</span><br><span class="line">                    [5000000,1000000,400]</span><br><span class="line">                ]</span><br><span class="line">            ],</span><br><span class="line">            [9000,7000,</span><br><span class="line">                [</span><br><span class="line">                    [-99999999999,-20000000,-250],</span><br><span class="line">                    [-20000000,-10000000,-200],</span><br><span class="line">                    [-10000000,-5000000,-200],</span><br><span class="line">                    [-5000000,-1000000,-200]</span><br><span class="line">                ]</span><br><span class="line">            ],</span><br><span class="line">            [7000,0,</span><br><span class="line">                [</span><br><span class="line">                    [-99999999999,-20000000,-300],</span><br><span class="line">                    [-20000000,-10000000,-200],</span><br><span class="line">                    [-10000000,-5000000,-200],</span><br><span class="line">                    [-5000000,-1000000,-200]</span><br><span class="line">                ]</span><br><span class="line">            ]</span><br><span class="line">        ]</span><br><span class="line">    ]</span><br><span class="line">]</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h4&gt;&lt;span id=&quot;ge-shi-hua-gui-ze&quot;&gt;格式化规则&lt;/span&gt;&lt;a href=&quot;#ge-shi-hua-gui-ze&quot; class=&quot;header-anchor&quot;&gt;#&lt;/a&gt;&lt;/h4&gt;&lt;ol&gt;
&lt;li&gt;&lt;code&gt;[&lt;/code&gt; 后面跟 &lt;code&gt;</summary>
      
    
    
    
    
    <category term="javascript" scheme="http://chenfeng.org/tags/javascript/"/>
    
  </entry>
  
  <entry>
    <title>迪拜跳伞记</title>
    <link href="http://chenfeng.org/2021/05/22/skydive-dubai/"/>
    <id>http://chenfeng.org/2021/05/22/skydive-dubai/</id>
    <published>2021-05-22T10:00:00.000Z</published>
    <updated>2022-06-18T17:55:49.416Z</updated>
    
    <content type="html"><![CDATA[<p>来迪拜半年有余了，因为疫情的关系，很少出门。</p><p>最近终于打了第二针疫苗，于是想要出去浪的心情逐渐暴露出来了。</p><p>一直听闻迪拜跳伞很有名，来迪拜不跳伞，就相当于白来了。</p><p>于是就发起了个跳伞的活动，没想到平时叫的最大声的人都不去，最后只有一个小伙伴也想去玩，于是就组队成功了。</p><h4><span id="bao-ming">报名</span><a href="#bao-ming" class="header-anchor">#</a></h4><p>确定人数后就可以去官方网站报名了，我们选择的是棕榈岛双人跳伞，总的费用大约是2400(AED)。</p><p>报名的表单需要提供个人信息（包括：邮箱，电话，ID或者护照，等等），提交信息后需要先交999(AED)作为定金，并且说明了，如果最后没有去跳伞，定金不给退还。</p><p>报名成功后还要签署一份免责声明，填写保险的信息。</p><p>填写到这一步，心里多少有点慌的，但是理性的想一下，但凡有点危险的娱乐活动，商家都会要求消费者签署这样一份免责声明，所以就继续填写提交了。</p><p>最后官方发送一份邮件过来，确认邮箱地址的正确性，邮箱地址用于后期收发照片和视频。</p><p>最终跳伞的时间确定在5月22日，周六，下午一点半（这个时间是到达签到的时间）。</p><p>因为签署了免责声明，购买的意外险的原因，报名后的几天总是想起这个事情，一想到就觉得恐惧和犹豫。</p><p>每当感到恐惧的时候就去油管上看一下官方发布的跳伞视频，看一下那些勇士无所畏惧的表情，纵身一跃，体验重力加速度的快感，在空中自由飞翔，在棕榈岛上空遨游。</p><p>通过不断的看视频，不断的给自己做心理建设，让自己相信教练团队是专业的，跳伞设备是安全有效的，一项惊险刺激极限运动在等着我。</p><h4><span id="qian-dao">签到</span><a href="#qian-dao" class="header-anchor">#</a></h4><p>5月22日当天，午饭后就开车前往目的地。<br>因为我们住的地方距离目的地不远，所以其实我们是踩着点出发的。</p><p>在快要到达目的地的时候，看到空中飘着几片东西，像风筝。<br>随着距离靠近，就能清晰的看出其实是降落伞。有的是单人的，有的是双人的，在空中左旋右摆，缓缓降落。</p><img src="https://tva1.sinaimg.cn/large/008i3skNgy1gqt29zr3rwj30yi0jiq5u.jpg" width="700" align="bottom"><p>停好车，直接进入大厅，找柜台的工作人员签到。<br>工作人员给我测一下体重，这个在官网上有说明的，体重和BMI都有要求，其实这个不用太在意，只要不是长得太胖都不会有问题。</p><p>然后支付剩余的费用，因为报名的时候看到的价格是2400左右，但是现场只支付了1080，加上999定金，总的费用没有对上，但是因为沟通有点问题，所以也懒得详细问了。</p><p>给钱后收到一张小票，小票上有姓名和排队的号码。<br>这个小票是工作人员确认身份的凭证，所以要保管好。</p><p>接着上二楼休息，等待。</p><img src="https://tva1.sinaimg.cn/large/008i3skNgy1gqt2v8448gj31400u0u0y.jpg" width="700" align="bottom"><center>等待</center><p>等了10来分钟后，有个脏辫大叔过来叫名字，确认身份后就带我们去一个会议室，看一会官方的宣传视频，主要是介绍跳伞的的过程和一些注意事项，中英双字幕，看起来无障碍。</p><p>跟我们一起跳伞的还有一对情侣和一个略彪悍的白人男子，他声称自己已经跳了8次了，脏辫大叔立刻表示出敬意。</p><p>接着去到一楼寄存随身物品，等待教练，等待的过程中可以看一下墙上的屏幕，找到自己的名字，可以看到自己的出发倒计时。</p><p>大约过了二十分钟，教练过来叫名字，领着我去穿戴跳伞装备。<br>接着指着提示板，教我做几个跳伞的动作，提示板上用中文解释了每个动作，做起来也很容易。</p><p>接着有个摄影的小哥过来给我拍照，然后例行采访一下。这个摄影小哥就是我的专属摄像，待会会跟着我们一起跳下来，在打开降落伞之前全程拍照。</p><h4><span id="tiao-san">跳伞</span><a href="#tiao-san" class="header-anchor">#</a></h4><p>所有人员准备就绪后就开始出发了，一辆大卡车载着我们一行人去到1000米外的停机坪，每个人配有一个跳伞教练和一个摄影，总共15人，一个小飞机塞得满满的。</p><p>由于我上大卡车的时候坐到了最里面，所以下车的时候也走在了后面，自然就是最迟上飞机的人，我就坐在飞机拉闸门的门口。</p><img src="https://tva1.sinaimg.cn/large/008i3skNgy1gqt180x99fj31900u0e86.jpg" width="700" align="bottom"><center>上飞机</center><p>五月的迪拜，室外温度直逼40℃，机舱里闷热又拥挤，我只能把脸凑近背后那个很小的冷气出风口，尽量缓解一下闷热。</p><p>飞机缓慢爬升，透过拉闸门可以看到湛蓝的海水，游艇，棕榈岛上的别墅区，海边的高楼，远处正在建设的建筑，更远处的沙漠，从繁华到荒凉，一览无余。</p><p>飞机爬到五千英尺（约1500m）的时候，教练员们调整坐姿，集体向飞机尾部靠拢，使飞机重心后移，此时飞机的拉闸门被打开，清凉的风瞬间灌进机舱，一扫闷热，让人神清气爽。</p><p>飞机继续在向上爬升。</p><p>拉闸门距离我仅一步，透过机舱门，俯瞰湛蓝的海平面，浅黄色的陆地和灰蒙蒙的远方，如果迪拜有底色，我觉得就是荒凉色。</p><p>我右手紧紧握住门把手，左手按着教练的膝盖，望着窗外出神了，教练不断的对我喊：Relax…Relax…<br>，按着我的肩膀给我放松。我假装镇定的，用手指在他的膝盖上随意的打拍子。</p><p>飞机在一万三千英尺（约4000m）的地方停止爬升，水平慢速飞行。教练示意我坐到他大腿上，跟他绑定到一起，给我戴上风镜，然后又跟我确认了一遍跳伞的动作，这就准备好了。</p><p>一起来的小伙伴正对着机舱门，他率先跳下，我接着他后面。</p><p>终于轮到我了，教练推着我，我半蹲着，慢慢的挪到机舱门口。</p><img src="https://tva1.sinaimg.cn/large/008i3skNgy1gqt1aabrxjj31900u0u12.jpg" width="700" align="bottom"><center>准备了</center><p>眼前一幕震撼到我了，蓝天、白云、海洋、城市，大自然的一切都很大、很高、很远，甚至没有边界，而我等如尘埃一般在空中飘着，我们太渺小了。</p><p>寒风呼呼呼的扑面而来，我感觉到凉，甚至有点冷了；机舱里开始躁动起来，嘶吼的声音夹杂着肾上腺素，令人振奋。</p><p>此时我脑子已经空白了，没有恐惧，没有紧张，什么想法都没有，只有服从教练的指示。</p><p>此时摄影小哥给我做了个手势，提示我，要看着他（的镜头）。<br>教练提示我握紧肩带，接着一点示意都没有，一个翻身就把我带出去了。</p><img src="https://tva1.sinaimg.cn/large/008i3skNgy1gqt1dn48wyj31900u0kjp.jpg" width="700" align="bottom"><center>跳了</center><p>我感觉在空中翻转了几圈，然后头朝下，向下俯冲。</p><p>我感觉到我被一块巨石压着，不是很沉，但就是顶着我，我感觉到越来越快。</p><p>我感觉风很猛烈，鼻子呼吸不了，可能是太紧张了，所以只能通过嘴大口呼气。</p><img src="https://tva1.sinaimg.cn/large/008i3skNgy1gqt1fsy63xj31900u0x6s.jpg" width="700" align="bottom"><center>俯冲</center><p>我感觉到我脸上的肉发生了位移，我的嘴被风吹得合不上，表情已经不能有效管理了。</p><p>我双手紧紧的握着肩带，我感觉双手像被固定了一样，撑不开手指。</p><p>教练拍了拍我的肩膀，示意我可以放开双手了。</p><p>我如鹰一样张开双翅，我感觉我在飞，这种感觉真实太爽了。</p><img src="https://tva1.sinaimg.cn/large/008i3skNgy1gqt1icwi3xj31900u01l1.jpg" width="700" align="bottom"><center>飞了</center><p>教练踢了踢我的脚，示意我把脚翘得高一点。我调整了一下姿势，把身体凹成一个香蕉那样，继续坠落。</p><p>摄影小哥如蜘蛛侠一般，随意调整速度。忽远忽近，忽上忽下，时而跟我们招手，时而围着我们旋转，我知道他在帮我拍照录视频，所以也很配合的做一些动作。</p><img src="https://tva1.sinaimg.cn/large/008i3skNgy1gqt1xl1tatj31900u0x6u.jpg" width="700" align="bottom"><p>根据官方网站的介绍，我此刻正在以120英里每小时（约200km&#x2F;h）的速度在下落，这太不可思议了。</p><p>自由落体一段时间后，教练跟摄影小哥比了个手势，摄影小哥就飞走了，随后教练打开了降落伞。巨大的拉力拉住了我，我感觉被往上拉回去一般，大腿感觉到被勒住，勒紧了，耳朵瞬间感觉到耳鸣。</p><img src="https://tva1.sinaimg.cn/large/008i3skNgy1gqt213r8wbj31900u0x6t.jpg" width="700" align="bottom"><center>开伞的一瞬间</center><p>不过，当时身体的这些不适感都不重要，不在乎了，因为我刚刚经历了极度惊险，极度刺激的坠落，我感觉情绪已经拉满了。</p><p>甚至出现某种幻觉，我感觉世界就只有我一个人，我的周围一个人也没有，地面、海面都太遥远了，所有的东西都很渺小。</p><p>我完全放开了的吼叫，尖叫，乱叫，直到感觉够了，没力气了，才停止下来。</p><p>我开始意识到我在降落，教练控制着降落伞在空中一会向左飞，一会向右飞，一会儿直线下落，偶尔出现得失重感使我开始紧张起来，我又一次紧紧的握住肩带。</p><p>在快要着陆的时候，教练提示我戴好口罩，但是我感觉到手指已经没力了，只能勉强的把口罩扣好，暂时拉到下巴下面，等待着陆后再做调整。</p><p>着陆的动作是跳伞的最后一个动作，只要把双脚抬高，让教练控制着陆地点就好。</p><img src="https://tva1.sinaimg.cn/large/008i3skNgy1gqt243gnb1j31900u0u14.jpg" width="700" align="bottom"><center>着陆的一瞬间</center><p>摄影小哥提示我照片和视频会在一天内会通过电子邮件发送给我，随后就回大厅休息了。</p><p>回想刚刚过去的十几分钟，我感觉耗尽了我这一天的全部能量，我感觉到疲劳和睡意，我需要缓一下。</p><p>在大厅的二楼找了个地方坐下来，喝水缓解一下耳鸣，吃点东西恢复一下体力。</p><p>开车回家的一路上，脑子感觉不会思考了，想的都是刚刚发生的事情，所以开的很慢，幸好是周末，路上的车也不多。</p><h4><span id="gan-shou">感受</span><a href="#gan-shou" class="header-anchor">#</a></h4><p>回到家后什么都不想做了，不想喝水，没有食欲，不想刷手机，彷佛得到了巨大的满足感。</p><p>脑子像是被刷过似的，回忆尽是与跳伞有关的画面。<br>那一分钟的极速坠落像一部漫长的电影，在脑海里循环播放；那一分钟彷佛跑了一场马拉松，身心俱疲，但是相当有成就感。</p><p>这种感觉，很难通过文字描述清楚，别人也很难通过文字体会得到，所以我觉得，有机会有条件的话，还是应该亲自去体验一下。</p><p>只有体验过刺激的才能明白什么是刺激，只有吃过好吃的才能明白什么是好吃，只有自己体验过了，才能理解别人的感受。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;来迪拜半年有余了，因为疫情的关系，很少出门。&lt;/p&gt;
&lt;p&gt;最近终于打了第二针疫苗，于是想要出去浪的心情逐渐暴露出来了。&lt;/p&gt;
&lt;p&gt;一直听闻迪拜跳伞很有名，来迪拜不跳伞，就相当于白来了。&lt;/p&gt;
&lt;p&gt;于是就发起了个跳伞的活动，没想到平时叫的最大声的人都不去，最后只有一</summary>
      
    
    
    
    <category term="personal" scheme="http://chenfeng.org/categories/personal/"/>
    
    
    <category term="游玩" scheme="http://chenfeng.org/tags/%E6%B8%B8%E7%8E%A9/"/>
    
  </entry>
  
  <entry>
    <title>Telegram Bot</title>
    <link href="http://chenfeng.org/2021/04/06/telegram/"/>
    <id>http://chenfeng.org/2021/04/06/telegram/</id>
    <published>2021-04-06T16:00:00.000Z</published>
    <updated>2022-06-18T19:00:33.677Z</updated>
    
    <content type="html"><![CDATA[<h4><span id="chuang-jian-bot">创建 Bot</span><a href="#chuang-jian-bot" class="header-anchor">#</a></h4><p>查找官方账号 BotFather ，带有头像，并且账号名右边带后蓝色标志的就是。</p><p>点击 &#x2F;start 指令后，显示有常用的指令和使用说明。<br><img src="https://tva1.sinaimg.cn/large/008eGmZEgy1gpaqbjyahzj30u00vy0y6.jpg" width="700" align="bottom"></p><center>BotFather</center><ol><li>点击 &#x2F;newbot 指令，开始创建 Bot</li><li>首先输入 Bot 的名字（不会做唯一性检测）</li><li>接着输入 Bot 的账户名（做唯一性检测），账户名必须以 bot 作为后缀</li><li>最后会返回 Bot 的token，token可以看作是 Bot 的唯一ID，不可泄漏<img src="https://tva1.sinaimg.cn/large/008eGmZEgy1gpaqblzj00j30u00vyn3y.jpg" width="700" align="bottom"><center>创建Bot</center></li></ol><h4><span id="bot-fa-xiao-xi-dao-user">Bot 发消息到 User</span><a href="#bot-fa-xiao-xi-dao-user" class="header-anchor">#</a></h4><p>查找刚刚创建的Bot，账号 testRebot_Bot ,点击 &#x2F;start 指令。<br><img src="https://tva1.sinaimg.cn/large/008eGmZEgy1gpaqdetna7j30u00vydh6.jpg" width="700" align="bottom"></p><center>testRebot_Bot</center><p>Bot 发消息到 User ，使用 API ：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https://api.telegram.org/bot&lt;token&gt;/sendMessage?chat_id=&lt;user_id&gt;&amp;text=&lt;message&gt;</span><br></pre></td></tr></table></figure><p>尖括号里的三个参数分别是 Bot 的token，User 的 id 和发送的消息。</p><p>查找官方账号 userinfobot ，点击 &#x2F;start 指令，就会返回 User 的信息，其中就包括了 User 的 id。<br><img src="https://tva1.sinaimg.cn/large/008eGmZEgy1gpaqdg4b5dj30u00vydhg.jpg" width="700" align="bottom"></p><center>石碑</center><p>通过浏览器访问接口：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https://api.telegram.org/bot1715369074:AAHGwoVNoWDAT8YMmuwARH4LMIJO5oGduJg/sendMessage?chat_id=&lt;user_id&gt;&amp;text=Hello World!</span><br></pre></td></tr></table></figure><p>可得到成功的返回结果。通过 Telegram 可知 ，确实收到了 Bot 发来的测试消息。<br><img src="https://tva1.sinaimg.cn/large/008eGmZEgy1gpaqfehhf0j30u00vy0ug.jpg" width="700" align="bottom"></p><center>石碑</center><h4><span id="bot-fa-xiao-xi-dao-group">Bot 发消息到 Group</span><a href="#bot-fa-xiao-xi-dao-group" class="header-anchor">#</a></h4><p>与发送消息到 User 的 API 一样，唯一的区别是参数 chat_id 要换成群组id。</p><p>首先把 Bot 拉到一个群组里面，发送一条消息，激活群组。</p><img src="https://tva1.sinaimg.cn/large/008eGmZEgy1gpaqg4f0r6j30u00yv0u6.jpg" width="700" align="bottom"><center>群组</center><p>通过API：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https://api.telegram.org/bot&lt;token&gt;/getUpdates</span><br></pre></td></tr></table></figure><p>可以查看 Bot 所在群组的群组id。</p><p>通过浏览器访问接口：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https://api.telegram.org/bot1715369074:AAHGwoVNoWDAT8YMmuwARH4LMIJO5oGduJg/getUpdates</span><br></pre></td></tr></table></figure><p>可得群组id为：-564051528。<br><img src="https://tva1.sinaimg.cn/large/008eGmZEgy1gpaqg6mrpmj30v20e2gmu.jpg" width="700" align="bottom"></p><center>群组id</center><p>通过浏览器访问接口：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https://api.telegram.org/bot1715369074:AAHGwoVNoWDAT8YMmuwARH4LMIJO5oGduJg/sendMessage?chat_id=-564051528&amp;text=Hello Group!</span><br></pre></td></tr></table></figure><p>可得到成功的返回结果。通过 Telegram 可知 ，群组收到了 Bot 发来的测试消息。</p><img src="https://tva1.sinaimg.cn/large/008eGmZEgy1gpaqgu9ftij30u00yvdhh.jpg" width="700" align="bottom"><center>群组</center><h4><span id="shan-chu-bot">删除 Bot</span><a href="#shan-chu-bot" class="header-anchor">#</a></h4><p>通过 &#x2F;mybots 指令查看我的 Bot，先是一个或者多个。</p><p>点击 delete Bot 指令，经过几次重复确认后，可以删除没用的 Bot。<br><img src="https://tva1.sinaimg.cn/large/008eGmZEgy1gpaqhpon7pj30vm0j20vr.jpg" width="700" align="bottom"></p><center>删除Bot</center>]]></content>
    
    
      
      
    <summary type="html">&lt;h4&gt;&lt;span id=&quot;chuang-jian-bot&quot;&gt;创建 Bot&lt;/span&gt;&lt;a href=&quot;#chuang-jian-bot&quot; class=&quot;header-anchor&quot;&gt;#&lt;/a&gt;&lt;/h4&gt;&lt;p&gt;查找官方账号 BotFather ，带有头像，并且账号名右边带后蓝色</summary>
      
    
    
    
    <category term="telegram" scheme="http://chenfeng.org/categories/telegram/"/>
    
    
    <category term="telegram" scheme="http://chenfeng.org/tags/telegram/"/>
    
  </entry>
  
  <entry>
    <title>MySQL常用日期和时间函数</title>
    <link href="http://chenfeng.org/2021/03/14/mysql-date-time/"/>
    <id>http://chenfeng.org/2021/03/14/mysql-date-time/</id>
    <published>2021-03-14T08:00:00.000Z</published>
    <updated>2022-06-18T17:54:33.430Z</updated>
    
    <content type="html"><![CDATA[<h4><span id="ri-qi-x2f-shi-jian-biao-shi">日期&#x2F;时间表示</span><a href="#ri-qi-x2f-shi-jian-biao-shi" class="header-anchor">#</a></h4><ol><li><p>返回当前日期时间</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt;   SELECT NOW();   ## 同CURRENT_TIMESTAMP(),返回一个 datetime 表达式</span><br><span class="line">&lt;.  2021-03-14 15:37:16</span><br></pre></td></tr></table></figure></li><li><p>返回当前日期</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt;   SELECT DATE(NOW());  ## 同CURRENT_DATE() 和 CURDATE()</span><br><span class="line">&lt;.  2021-03-14</span><br></pre></td></tr></table></figure></li><li><p>返回当前时间</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt;   SELECT TIME(NOW());  ## 同CURRENT_TIME() 和 CURTIME()</span><br><span class="line">&lt;.  15:41:19</span><br></pre></td></tr></table></figure></li><li><p>单独返回年&#x2F;月&#x2F;日&#x2F;时&#x2F;分&#x2F;秒</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&gt;   SELECT YEAR(NOW());</span><br><span class="line">&lt;.  2021</span><br><span class="line">&gt;   SELECT MONTH(NOW());</span><br><span class="line">&lt;.  3</span><br><span class="line">&gt;   SELECT DAY(NOW());</span><br><span class="line">&lt;.  14</span><br><span class="line">&gt;   SELECT HOUR(NOW());</span><br><span class="line">&lt;.  15</span><br><span class="line">&gt;   SELECT MINUTE(NOW());</span><br><span class="line">&lt;.  49</span><br><span class="line">&gt;   SELECT SECOND(NOW());</span><br><span class="line">&lt;.  43</span><br></pre></td></tr></table></figure></li><li><p>另一种方式单独返回年&#x2F;月&#x2F;日&#x2F;时&#x2F;分&#x2F;秒</p></li></ol><p>使用 <code>EXTRACT(unit FROM date)</code> 函数，<code>unit</code> 为要返回值类型，<code>date</code> 为日期时间表达式。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt;   SELECT EXTRACT(YEAR FROM NOW());</span><br><span class="line">&lt;.  2021</span><br></pre></td></tr></table></figure><blockquote><p>unit包括：YEAR,MONTH,DAY,HOUR,MINUTE,SECOND,MICROSECOND等等。</p></blockquote><p>使用 <code>DATE_FORMAT(date,format)</code> 函数，<code>date</code> 为日期时间表达式，<code>format</code> 为要返回的日期格式。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt;   SELECT DATE_FORMAT(NOW(),&quot;%Y&quot;);</span><br><span class="line">&lt;.  2021</span><br></pre></td></tr></table></figure><p>常用的日期时间格式有：</p><table><thead><tr><th>格式</th><th>描述</th></tr></thead><tbody><tr><td>%Y</td><td>4位数字年份</td></tr><tr><td>%m</td><td>2位数字月份 (00 to 12)</td></tr><tr><td>%d</td><td>2位数字日期 (01 to 31)</td></tr><tr><td>%H</td><td>小时 (00 to 23)</td></tr><tr><td>%i</td><td>分钟 (00 to 59)</td></tr><tr><td>%s</td><td>秒钟 (00 to 59)</td></tr><tr><td>%f</td><td>毫秒 (000000 to 999999)</td></tr></tbody></table><p>更多的日期时间格式查看 <a href="https://dev.mysql.com/doc/refman/8.0/en/date-and-time-functions.html#function_date-format">Date and Time Functions</a> 文档。</p><h4><span id="ri-qi-x2f-shi-jian-ji-suan">日期&#x2F;时间计算</span><a href="#ri-qi-x2f-shi-jian-ji-suan" class="header-anchor">#</a></h4><ol><li><p>加 x 年&#x2F;月&#x2F;日&#x2F;时&#x2F;分&#x2F;秒</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&gt;   SELECT NOW();</span><br><span class="line">&lt;.  2021-03-14 18:21:18</span><br><span class="line">&gt;   SELECT DATE_ADD(NOW(),INTERVAL 1 HOUR);</span><br><span class="line">&lt;.  2021-03-14 19:21:18</span><br></pre></td></tr></table></figure></li><li><p>减 x 年&#x2F;月&#x2F;日&#x2F;时&#x2F;分&#x2F;秒</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&gt;   SELECT NOW();</span><br><span class="line">&lt;.  2021-03-14 18:23:07</span><br><span class="line">&gt;   SELECT DATE_SUB(NOW(),INTERVAL 1 DAY);</span><br><span class="line">&lt;.  2021-03-13 18:23:07</span><br></pre></td></tr></table></figure></li><li><p>计算两个日期时间之差</p></li></ol><p>使用 <code>DATEDIFF(date1,date2)</code> 函数计算两个日期相差几天。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt;   SELECT DATEDIFF(DATE_ADD(NOW(),  INTERVAL 1 DAY),CURDATE());</span><br><span class="line">&lt;.  1</span><br></pre></td></tr></table></figure><p>使用 <code>TIMEDIFF(time1,time2)</code> 函数计算两个时间相差多少小时多少分钟多少秒钟。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt;   SELECT TIMEDIFF(DATE_ADD(CURTIME(),INTERVAL 1 HOUR),CURTIME());</span><br><span class="line">&lt;.  01:00:00</span><br></pre></td></tr></table></figure><h4><span id="ri-qi-shi-jian-yu-unix-shi-jian-chuo-hu-xiang-zhuan-huan">日期时间与unix时间戳互相转换</span><a href="#ri-qi-shi-jian-yu-unix-shi-jian-chuo-hu-xiang-zhuan-huan" class="header-anchor">#</a></h4><ol><li><p>日期时间 转 时间戳<br>函数 <code>UNIX_TIMESTAMP(datetime)</code> 带一个日期时间表达式参数，当不带参数时，相当于 <code>datetime=now()</code>。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&gt;   SELECT UNIX_TIMESTAMP();</span><br><span class="line">&lt;.  1615721103</span><br><span class="line">&gt;   SELECT UNIX_TIMESTAMP(DATE_ADD(NOW(),INTERVAL 1 DAY));      # 返回明天的时间戳</span><br><span class="line">&lt;.  1615807716</span><br></pre></td></tr></table></figure></li><li><p>时间戳 转 日期时间<br>函数 <code>FROM_UNIXTIME(unix_timestamp,format)</code> 有两个参数， <code>unix_timestamp</code> 参数必须，表示时间戳，<code>format</code> 参数可选，表示日期时间格式，当 <code>format</code> 为空时，表示返回 <code>&quot;%Y-%m-%d %H:%i:%s&quot;</code> 格式的日期时间。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&gt;   SELECT FROM_UNIXTIME(1615807716);</span><br><span class="line">&lt;.  2021-03-15 19:28:36</span><br><span class="line">&gt;   SELECT FROM_UNIXTIME(1615807716,&quot;%Y-%m-%d&quot;);</span><br><span class="line">&lt;.  2021-03-15</span><br></pre></td></tr></table></figure></li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;h4&gt;&lt;span id=&quot;ri-qi-x2f-shi-jian-biao-shi&quot;&gt;日期&amp;#x2F;时间表示&lt;/span&gt;&lt;a href=&quot;#ri-qi-x2f-shi-jian-biao-shi&quot; class=&quot;header-anchor&quot;&gt;#&lt;/a&gt;&lt;/h4&gt;&lt;ol&gt;
&lt;l</summary>
      
    
    
    
    <category term="mysql" scheme="http://chenfeng.org/categories/mysql/"/>
    
    
    <category term="mysql" scheme="http://chenfeng.org/tags/mysql/"/>
    
  </entry>
  
</feed>
