<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>不知有晋</title>
  
  
  <link href="http://chenfeng.org/atom.xml" rel="self"/>
  
  <link href="http://chenfeng.org/"/>
  <updated>2023-11-11T12:32:15.127Z</updated>
  <id>http://chenfeng.org/</id>
  
  <author>
    <name>CFONG</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>卢浮宫博物馆</title>
    <link href="http://chenfeng.org/2023/10/21/louvre-abu-dhabi/"/>
    <id>http://chenfeng.org/2023/10/21/louvre-abu-dhabi/</id>
    <published>2023-10-21T15:00:00.000Z</published>
    <updated>2023-11-11T12:32:15.127Z</updated>
    
    <content type="html"><![CDATA[<p>逛展的一天，非常有意义。</p><p>卢浮宫展出内容非常丰富，从史前文明到现代文明，时间跨度非常广。</p><p>非常值得花几个小时看一看。</p><p><img src="https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEjFcGMy9APtTdjVxDU_2KqEnaCbiK6cN3hsgZ_lKo-h2Pd_f1LAoK_DOgLOEi0W_aBkW273otstxltndpVpN7iguLGLXCnNGT23jt3mP6q3J_1fwVcIjmWT4Ns4ZpKgs69SXjIus_X_TZ17tUMDES9e_5nuhy6yBHbVej4Nr_HMfzmiGeM2uFwJ28-D-EEg/s4032/IMG_1984.HEIC"></p><p><img src="https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEg3SQfF8WmLYQz73XA84wr6x9n1-eXyiow68jxqFLuX549Z26E57odM00jvrYyjXTTUhVQvL1bd6f1-lj1BUlZRyFZTaAvclxDBekEqXvaN7WEmz2WcvqjDI5G2KzyrHJSxEIqUTG9dpKfmK-SkQ6_zcqnli5x55Ik1mztGuOHlRFWO6mDmWPwFbO10oYGz/s4032/IMG_1986.HEIC"></p><p><img src="https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEgFIUTovA9i8Jo6-8pbgDlc4uRMPgcuHNats4AMtCvIpWUPU_qjrJizBeBWoWUwftmSs33ZpDCguglmAY14VFfwg3_V47-av08F-wKoEmQJVApAOcg_cTLIR-85N7-qUqMHripZffd5BMeEu4VjDp9Ss5X7q0l5NAd6_olo7ohL6cPqtr31t7oIDvgPVcCK/s4032/IMG_1990.HEIC"></p><p><img src="https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEhy6xBL1XXO020Ej2YOv3d-7LIVhjily0Z4UAsnxE0ctH6Z-hJ1sBAMrtZ36arSODH7gV7CndRw4ZI6rlZvSEu_j0CacfG4pAJ7Kp1T-2xvt73I05eEF_UlOX1FZE_iHIvZD7j7FUrenLDtshqPhIlN0-SpWppR18x4e0y62kjPMWG9nNZuX5CDg97DQ8_i/s4032/IMG_1993.HEIC"></p><p><img src="https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEh6SKXzuNu3ag_2SbJNvi-nPmH6XRv1v4_6z1MmnBdsPby7GPXgI9FPde4Cg0S0UQNecSTiyjqmZ554-aPiVDuaNLeHLJ_jNvJSdEenPzFGICtkL8YNLv818iMx0z8LQt7Nj1ZfRaX50HIyxUK7yfcGsI6vJxe_W1zrZrMeozFuUk3kJP0KPe4fTA1MBdDB/s4032/IMG_1995.HEIC"></p><p><img src="https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEhXrfvMxjI1SEcXzTTYchtz_ntoDUtBov6J3W9W6c88266g2_I3ytr48_-gG1GTS8xr7UJNf5F4Q0O8c_p_KIEMAA19E2Ns-Rw7-72ZkXQIb2pJVPj0extd5HRQeaEGUe-9T7fMpkBrfJyuawJapZrwDnUHedF7kNkE4ARqU4de6mWmGT_V2L6b5JnHCrtS/s4032/IMG_1997.HEIC"></p><p><img src="https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEj_xUReoMukO167dORXKvYMgoQ5y4vFi3EOS9Zx1h4YhcL_KBpGbr1AybqETD95z0YAC1WCGfqs64ssRE-UfGjIgwHNwUm2Z98ZZPBos3wCJG16HuQdnLjO-XgWFt5Tm15WtFlXVnEpCpc_xRjvphx2Jk2XMCaQUUx9nvEk2Ek_ewiYsIea57TL2Eim2g8H/s4032/IMG_1998.HEIC"></p><p><img src="https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEjmqFHfqh0uogC0qNJ1DhnaC6i-co8czbtYgik5aAhtd8xlmkUC1dLILm98wDjjUBVDa_w5MNbq0HLwvMerXiLH3EdGGcenl4Pk_ovcIX15xr0nIYZDHv9PgLuKNGX79kcYEraGdJrNUzoPZHKU-_rtPgUGjPA5yCqkZEHEY8gj1yPpEaBqvp7SGyRwLc_Z/s4032/IMG_2004.HEIC"></p><p><img src="https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEgYYINVFZ7yFF8s16HQt_1FAdXvFZ8EY9N0XTudbbnSDmJDj0k0aiCnOkdsxteeOwJYevA5J5F6XEJuF7VvXEEYiqEy-8UAlTpH91f2moOb950ODhTSKV1T168K43pkzbb0dLB_vadtiR1u6StyjFO0UGCgIOFQxDYZR2474EJ5OzlUu3DjZGvVb8UPcZ6q/s4032/IMG_2006.HEIC"></p><p><img src="https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEhAZiSNS2RaNU-czWa8pXzw4kwgDymraX4kfX60E60PBy8Hdee5L_lNAvcJAuESg3foED_HkPI6hu8LnBi2t_r186yYdkLe2BKaMDwUx2hvvmPNsnom5iJ8O_fMBD9BViGnU9KBKShdWNh-r5ihxi3eSCnYiIKHV0aC2F2d4_T6oqWJuYv7f8Guun3RpB6M/s4032/IMG_2013.HEIC"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;逛展的一天，非常有意义。&lt;/p&gt;
&lt;p&gt;卢浮宫展出内容非常丰富，从史前文明到现代文明，时间跨度非常广。&lt;/p&gt;
&lt;p&gt;非常值得花几个小时看一看。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://blogger.googleusercontent.com/img/b/R29</summary>
      
    
    
    
    <category term="记录生活" scheme="http://chenfeng.org/categories/%E8%AE%B0%E5%BD%95%E7%94%9F%E6%B4%BB/"/>
    
    
    <category term="记录生活" scheme="http://chenfeng.org/tags/%E8%AE%B0%E5%BD%95%E7%94%9F%E6%B4%BB/"/>
    
  </entry>
  
  <entry>
    <title>意料之外的跑步计划</title>
    <link href="http://chenfeng.org/2023/09/09/running-plan/"/>
    <id>http://chenfeng.org/2023/09/09/running-plan/</id>
    <published>2023-09-09T15:00:00.000Z</published>
    <updated>2023-09-09T20:21:52.646Z</updated>
    
    <content type="html"><![CDATA[<p>今天本来计划要游泳的，但是早上临出门时却找不到门禁卡，没有门禁卡就不能去游泳，所以只能遗憾的改变运动计划。</p><p>这次出国幸好还带了跑步的裤子和鞋子，于是换了衣服装备就出门跑步了。</p><p>距离上次跑步已经超过两个月了，今年总的跑步次数相信10个手指头数的过来，所以今天的跑量定在了5公里，先让身体适应一下。</p><p>跑到4公里的时候已经口渴到不行了，所以只能停止跑步走回来，一路在想自己真是个勇士，这么热的天，没有做防嗮，也有没有带水就出门了，手臂眼见的逐渐变红了。</p><p><img src="https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEgUvYZMo7E_wpSZaj9GNWJAQ1BVOZDv-xEmEdwh8DL7eUVn5Yj5ah6XMmCBHoQxrg4xFV5R75-91_3E22Avd-iIorRSPKwYGICxqcx-GgvUehLxk5J65thxDFZm62hbkwQzlAIgmN6URvRl8AIBuwVERvJoRPDE5yy0UPLQFR-38oTTrdfFhfbltBUq0j-p/s2301/IMG_1759.jpg"></p><p>晚上突发奇想，迪拜应该有马拉松比赛吧？如果能坚持跑几个月，练到以前的巅峰状态，说不定可以在迪拜跑个马，于是就上网查了<a href="https://www.dubaimarathon.org/">迪拜马拉松</a>。</p><p>迪拜下一次马拉松在2024年的1月7日星期日，大约还有5个月的时间，报名费150美金，现在就可以开始注册报名了。</p><p>考虑到今天才刚开始恢复跑步，所以就暂时没报名，计划先练两个月，看看练得结果如何在做打算，只要在12月10日前都可以注册报名。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;今天本来计划要游泳的，但是早上临出门时却找不到门禁卡，没有门禁卡就不能去游泳，所以只能遗憾的改变运动计划。&lt;/p&gt;
&lt;p&gt;这次出国幸好还带了跑步的裤子和鞋子，于是换了衣服装备就出门跑步了。&lt;/p&gt;
&lt;p&gt;距离上次跑步已经超过两个月了，今年总的跑步次数相信10个手指头数的过来</summary>
      
    
    
    
    <category term="记录生活" scheme="http://chenfeng.org/categories/%E8%AE%B0%E5%BD%95%E7%94%9F%E6%B4%BB/"/>
    
    
    <category term="记录生活" scheme="http://chenfeng.org/tags/%E8%AE%B0%E5%BD%95%E7%94%9F%E6%B4%BB/"/>
    
  </entry>
  
  <entry>
    <title>未来博物馆一日游</title>
    <link href="http://chenfeng.org/2023/09/02/museum-of-the-future/"/>
    <id>http://chenfeng.org/2023/09/02/museum-of-the-future/</id>
    <published>2023-09-02T15:00:00.000Z</published>
    <updated>2023-11-11T12:11:29.662Z</updated>
    
    <content type="html"><![CDATA[<p>到迪拜的第二天</p><p>午饭后，确定了今天要去的地方——未来博物馆</p><p>于是开始在淘宝订票，然后就出发了</p><p><img src="https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEjgxHX55ZOeKIqrk0gQH_zFKF-f5P6tu3oQYn4ja6xRWNVVAqS1PshZkTS_a3TYjp29ohtWt7GpIm10FHTUyDxvN4lgujyLrPx_ghwYh6TY4G0SnCpzuuXO69jlsoXMBnBVy53tkIAZpMA6cIO-pAmNXlx_gxpnAdgwb2ekwrtYAtB2E9CJEXDzZYWpc2HF/s4032/IMG_1725.HEIC" alt="入口大厅"><br><img src="https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEivf4Gu4zJW5VtB6lIqkZZdWVWFT3Ig8gfeAGqbzBHrfbbq7XKcMwqgQl7om2GckKMc4CKWHGRMjCefL2s9ysGfq-rD4hwvzX0umz47zy1JusGRvh7PyMqlzIfhYH2_WtvbRvy7S5DltTb3-ctdzqL-dKOPNiYAC52ybKt3rbJf1_I8G8i2Z5kR6g5nyy7b/s4032/IMG_1724.HEIC" alt="螺旋的楼梯"><br><img src="https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEiiYjPSlTIPiN0_RdbTbgR-KYO2krmTJWRa5ZEWuqAHolVS7WPCbIULVr8K-IgWYbY1tmxCgy1warOMNvNebviavf9xJQoMwqn-frA058ZTtzQpAx5UMTS1RzCuPP_FLG09aUmBEqRn7oB-t_mIUhz0oqTknW5nts0DhSnaADkPzA34CyKok7nWUri2cMSR/s4032/IMG_1710.HEIC" alt="动物DNA库1"><br><img src="https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEgvKgh2kvufqHxlnOiFsNTfTM_wBldyDT5HHKpxK4Y9BhCA-chC0FkKOA2071eH0syaORYKQ38uE-N0Pc_dYj3Y50npz98AEoPoDhQSy1IMl0OlcgGD2x0nZBmS_FTn7Sl1IUnpbbdCfZnAbVBAkj1eizLBu8iX04cSRpXnTF0ynK5Vkoau3eSq5zByra3I/s4032/IMG_1711.HEIC" alt="动物DNA库2"><br><img src="https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEhrScHkq2H3atjQd0trlx5MG_PMVxa3a_TGNibxlP6qZeJUfBIj8AdkGvfCyMZjoHruJF03VCTXkfocQ7Jj8wxdeaiR-KcIvVzpK76N_Z08mDH68ZsAOkCHAQu6chqMqLwxO1yOAeexZ0ci78FS0E2COSWbIQ7wyJ-UlzG3jMox_BftMAGxnPOnp30l-2f3/s4032/IMG_1713.HEIC" alt="动物DNA库3"><br><img src="https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEgXiKAXIgId0DlrU9tS12yFdRHoh95Ed_d_ywYXKI2syeN5f5-5f8hwApTl2coTtInQVN4XucY4u_x9IxvtUZ-N2o-cjvWxtvOdeRIpxP2KJPk8JTt4q2DqKHDwOEzmt2S26QttwbUGHWTEGUU9tVtXXnV11WWuaypIMtTQpvGvyftYPTERb9vm3cwziAPD/s4032/IMG_1715.HEIC" alt="海马"><br><img src="https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEiv5dT0LyyuekcMt-S9ZiN3I_v7Sr3ydiFjyeMKMQcNniBobEZxxTuapgkL4R_3BG-yQsQAhUfQJAJe4vhQu7OZstO5uLSJibgS2Re1zRhh5l-t0U3KHU3_JnvEzP8eBhoeVQRHCkzDVfNpCKWHYTVnvDTB7AF4dMXwe6WqlKqPHuMG2Q3KBX2jT-9oPUIK/s4032/IMG_1719.HEIC"><br><img src="https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEgVaq0US7hCOQAN4xHCKL3kbd9Ugpt9-ht1MTjvVgyb7U_uhchgFWyuPy0L6LCTKYThHPqueW5OJFiQzJyEdgQVhE010o59NE9EWR-lx0pl49hZptMYQ8pzLPHRPj1v06zA_5S8H443iMp2eBzTwiVx3EUmFEGalDE9R5HOa3oRTPtXFPaNckEG-6O8WNQU/s4032/IMG_1721.HEIC" alt="许愿墙"><br><img src="https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEhPB9gS7H-k9FncNVUb0w1ZZfOAqgYfgzDLaecUelnTatTkEMENfGovqHv7Ip4UNo7ilvHASsLet-a5wGIqu302IPykZzQLnVcx0FWv-TLzkVIxd6OnutXgz1J9Ad0IZ5NHmnrJbDn8cIigIGzmsxSBPYzghEHva4WgiWvbjPX3PmM8O18bIFUzpO7BmUYc/s4032/IMG_1701.HEIC"><br><img src="https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEjv8NL1SaZ9mq6mdP9kthhgrdDCso8chPeABIM5uu7uYWuazI7OlyYrBHcQGsBtKcxsdXEGB-8ndgWjiP6YAiJsV0Ul1MPNcG6UJxYKwS2wcyZT2shVD1zih_1ugMWZglC7LecMQzVRYuqbo8Uy_b1RBhIIcJyw0-QgUVIBaNcW0IEvAfJyCyvQwask9yKu/s4032/IMG_1722.HEIC" alt="未来的单车"><br><img src="https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEhEjg5iE9oBXPtZ8C3OBIdWPLS6QTPhq7WmBJTwRN06BuZ-_qlGqDAfm-mg2kixikhwxkHTOAkXBUCHFUBGykBUwjOU6iVdpwnIdp6Hj6CVU5Om2I8mDaZfV9SLaOxqmzAodkR52ZjH1mJwEA8PhCE0azCoKF8mfwAz6-DxqgWFmswzGBNY-gP632Jcq6RR/s4032/IMG_1723.HEIC"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;到迪拜的第二天&lt;/p&gt;
&lt;p&gt;午饭后，确定了今天要去的地方——未来博物馆&lt;/p&gt;
&lt;p&gt;于是开始在淘宝订票，然后就出发了&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsE</summary>
      
    
    
    
    <category term="记录生活" scheme="http://chenfeng.org/categories/%E8%AE%B0%E5%BD%95%E7%94%9F%E6%B4%BB/"/>
    
    
    <category term="记录生活" scheme="http://chenfeng.org/tags/%E8%AE%B0%E5%BD%95%E7%94%9F%E6%B4%BB/"/>
    
  </entry>
  
  <entry>
    <title>等待</title>
    <link href="http://chenfeng.org/2023/07/14/%E7%AD%89%E5%BE%85/"/>
    <id>http://chenfeng.org/2023/07/14/%E7%AD%89%E5%BE%85/</id>
    <published>2023-07-14T15:00:00.000Z</published>
    <updated>2023-08-30T18:47:35.972Z</updated>
    
    <content type="html"><![CDATA[<p>终于做出了决定，要去旅游了</p><p>但是老板不批假期，只能继续搬砖</p><p>等下个月</p><p><img src="https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEhZIkJDQHrHkMa3TF4WxMpmkj3594T2aHQDoRZBryIw4a7_yZF0BfmKtTUbZgANkSQfExec46DzIZDsEZT6Oh3rjPRNT0xx3n3sZ7QgWlW4BANeD7xe51Ct3OXQWkldYcrzQQJRarFSm8yUIbRc6ROqbuB4rGqyaT57S92j2J8Ce-NqA64-ghN4yHnPFpyU/s4032/hk.jpg"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;终于做出了决定，要去旅游了&lt;/p&gt;
&lt;p&gt;但是老板不批假期，只能继续搬砖&lt;/p&gt;
&lt;p&gt;等下个月&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEhZIkJDQHrHkM</summary>
      
    
    
    
    <category term="记录生活" scheme="http://chenfeng.org/categories/%E8%AE%B0%E5%BD%95%E7%94%9F%E6%B4%BB/"/>
    
    
    <category term="记录生活" scheme="http://chenfeng.org/tags/%E8%AE%B0%E5%BD%95%E7%94%9F%E6%B4%BB/"/>
    
  </entry>
  
  <entry>
    <title>重复</title>
    <link href="http://chenfeng.org/2023/06/26/%E9%87%8D%E5%A4%8D/"/>
    <id>http://chenfeng.org/2023/06/26/%E9%87%8D%E5%A4%8D/</id>
    <published>2023-06-26T15:00:00.000Z</published>
    <updated>2023-08-30T18:44:33.287Z</updated>
    
    <content type="html"><![CDATA[<p>每天在同样的时间出门<br>到达同一个站台<br>搭上8:32的地铁<br>在下一站，一个化着精致妆容的老妇人会上车<br>每个人都在看手机，听音乐，沉浸在自己的世界里</p><p>每天在同样的时间拐弯<br>走这条必经之路<br>顺便买一份早餐<br>回过头看，那个撑着伞的熟悉的陌生人又出现了<br>每个人都在赶路，匆匆的，为了美好的生活奋斗</p><p><img src="https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEjVGzlg6Uv37NJFh1niphn4OBl9I1n35Wn6QMRxUhqVJsrPD0Rrry71fu3MtAMaQJkKEFNrpV81kPr1R0woMWwRAjT23NdG4ey7qdmvd49Vx0ALwnvBdGe2Iqo1zvwxs1-q3E0Fii-3YVFiVSP2pzw5IlN9VM3Vjx3w0FPdyh0ZZliefnisZfYaNcILzr1c/s4032/9BC8F871-9566-40E4-8ED4-A0E21441380A.jpeg"></p><p><img src="https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEhwEFnixuKedLp8iy_-nVriL7LbobWU8YOxsyNdvHv1uFRGbsxntlDTM0neZj6n9IP9yySTe5POk9HxXjLwZhRSr8vjM1Hf9uPtOLapxJgD4vZ3QhqBOQHWgb88PlQg1rbhqB7fL71drrEAsrKqq_KOqd2vt2aDUSoT6l2I4H3xd9AN4qRjejXoPougjZqp/s4032/5FDA3BB3-8DFD-494C-8C7F-A04EEA469EBA.jpeg"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;每天在同样的时间出门&lt;br&gt;到达同一个站台&lt;br&gt;搭上8:32的地铁&lt;br&gt;在下一站，一个化着精致妆容的老妇人会上车&lt;br&gt;每个人都在看手机，听音乐，沉浸在自己的世界里&lt;/p&gt;
&lt;p&gt;每天在同样的时间拐弯&lt;br&gt;走这条必经之路&lt;br&gt;顺便买一份早餐&lt;br&gt;回过头看，那个撑着</summary>
      
    
    
    
    <category term="记录生活" scheme="http://chenfeng.org/categories/%E8%AE%B0%E5%BD%95%E7%94%9F%E6%B4%BB/"/>
    
    
    <category term="记录生活" scheme="http://chenfeng.org/tags/%E8%AE%B0%E5%BD%95%E7%94%9F%E6%B4%BB/"/>
    
  </entry>
  
  <entry>
    <title>golang使用sftp上传和下载文件例子</title>
    <link href="http://chenfeng.org/2023/06/06/golang-sftp-upload-download-file/"/>
    <id>http://chenfeng.org/2023/06/06/golang-sftp-upload-download-file/</id>
    <published>2023-06-06T15:00:00.000Z</published>
    <updated>2023-08-30T18:59:23.978Z</updated>
    
    <content type="html"><![CDATA[<p>最近在做一个功能给客户端发包。</p><p>客户端上传包到后台，选择发布的环境后，进行发布，实现版本热更。</p><h2><span id="lian-jie-de-can-shu">连接的参数</span><a href="#lian-jie-de-can-shu" class="header-anchor">#</a></h2><p>发包功能关键的一部分是发布到不同的环境服务器， OpsEnv 结构体定义了环境服务器的信息，<br>其中 Addr，Port，Passport，Password，PubKey，AuthType 六个字段和发包相关。</p><figure class="highlight golang"><figcaption><span>model.go</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> sftp</span><br><span class="line"></span><br><span class="line"><span class="comment">// OpsEnv 环境</span></span><br><span class="line"><span class="keyword">type</span> OpsEnv <span class="keyword">struct</span> &#123;</span><br><span class="line">Id       <span class="type">int</span>    <span class="string">`orm:&quot;id,primary&quot; json:&quot;id&quot;`</span>      <span class="comment">// id</span></span><br><span class="line">EnvName  <span class="type">string</span> <span class="string">`orm:&quot;env_name&quot; json:&quot;envName&quot;`</span>   <span class="comment">// 环境名称</span></span><br><span class="line">EnvType  <span class="type">int</span>    <span class="string">`orm:&quot;env_type&quot; json:&quot;envType&quot;`</span>   <span class="comment">// 环境类型</span></span><br><span class="line">Addr     <span class="type">string</span> <span class="string">`orm:&quot;addr&quot; json:&quot;addr&quot;`</span>          <span class="comment">// 发送地址</span></span><br><span class="line">Port     <span class="type">string</span> <span class="string">`orm:&quot;port&quot; json:&quot;port&quot;`</span>          <span class="comment">// 登录端口</span></span><br><span class="line">Passport <span class="type">string</span> <span class="string">`orm:&quot;passport&quot; json:&quot;passport&quot;`</span>  <span class="comment">//登录名</span></span><br><span class="line">Password <span class="type">string</span> <span class="string">`orm:&quot;password&quot; json:&quot;password&quot;`</span>  <span class="comment">//登录密码</span></span><br><span class="line">PubKey   <span class="type">string</span> <span class="string">`orm:&quot;pub_key&quot; json:&quot;pubKey&quot;`</span>     <span class="comment">//私钥路径</span></span><br><span class="line">AuthType <span class="type">int</span>    <span class="string">`orm:&quot;auth_type&quot; json:&quot;authType&quot;`</span> <span class="comment">//认证类型 1公钥 2密码</span></span><br><span class="line">Path     <span class="type">string</span> <span class="string">`orm:&quot;path&quot; json:&quot;path&quot;`</span>          <span class="comment">// 发送路径</span></span><br><span class="line">Domain   <span class="type">string</span> <span class="string">`orm:&quot;domain&quot; json:&quot;domain&quot;`</span>      <span class="comment">// 访问域名</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2><span id="huo-de-lian-jie">获得连接</span><a href="#huo-de-lian-jie" class="header-anchor">#</a></h2><p>SFTP是用SSH封装过的FTP协议，相当于经过加密的FTP协议，功能与FTP一样，只是传输数据经过加密。</p><p>所以首先需要获得ssh连接。</p><p>newSshClient 方法提供了两种连接方式——密码和密钥。</p><p>getSftpClient 方法在获得ssh连接的基础上，获得sftp连接。</p><figure class="highlight golang"><figcaption><span>ssh.go</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> sftp</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;fmt&quot;</span></span><br><span class="line"><span class="string">&quot;github.com/mitchellh/go-homedir&quot;</span></span><br><span class="line"><span class="string">&quot;github.com/pkg/sftp&quot;</span></span><br><span class="line"><span class="string">&quot;golang.org/x/crypto/ssh&quot;</span></span><br><span class="line"><span class="string">&quot;log&quot;</span></span><br><span class="line"><span class="string">&quot;os&quot;</span></span><br><span class="line"><span class="string">&quot;time&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment">// getSshClient 获取ssh连接</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">getSshClient</span><span class="params">()</span></span> (*ssh.Client, <span class="type">error</span>) &#123;</span><br><span class="line">env := &amp;OpsEnv&#123;</span><br><span class="line">Passport: <span class="string">&quot;zhagnSan&quot;</span>,</span><br><span class="line">Password: <span class="string">&quot;123456&quot;</span>,</span><br><span class="line"><span class="comment">//PubKey:   &quot;/root/.ssh/id_rsa&quot;,</span></span><br><span class="line">Addr:     <span class="string">&quot;192.168.99.106&quot;</span>,</span><br><span class="line">Port:     <span class="string">&quot;22&quot;</span>,</span><br><span class="line">AuthType: <span class="number">2</span>,</span><br><span class="line">&#125;</span><br><span class="line">conn, err := newSshClient(env)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span>, err</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> conn, <span class="literal">nil</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 最大32m</span></span><br><span class="line"><span class="keyword">const</span> maxPacket = <span class="number">1</span> &lt;&lt; <span class="number">15</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// getSftpClient 获取sftp连接</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">getSftpClient</span><span class="params">()</span></span> (*sftp.Client, <span class="type">error</span>) &#123;</span><br><span class="line">conn, err := getSshClient()</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span>, err</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> sftp.NewClient(conn, sftp.MaxPacket(maxPacket))</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// newSshClient 连接ssh</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">newSshClient</span><span class="params">(h *OpsEnv)</span></span> (*ssh.Client, <span class="type">error</span>) &#123;</span><br><span class="line">config := &amp;ssh.ClientConfig&#123;</span><br><span class="line">Timeout:         time.Second * <span class="number">5</span>,</span><br><span class="line">User:            h.Passport,</span><br><span class="line">HostKeyCallback: ssh.InsecureIgnoreHostKey(), <span class="comment">//这个可以， 但是不够安全</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//认证方式包括密码和私钥文件两种</span></span><br><span class="line"><span class="keyword">if</span> h.AuthType == <span class="number">2</span> &#123;</span><br><span class="line">config.Auth = []ssh.AuthMethod&#123;ssh.Password(h.Password)&#125;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">config.Auth = []ssh.AuthMethod&#123;publicKeyAuthFunc(h.PubKey)&#125;</span><br><span class="line">&#125;</span><br><span class="line">addr := fmt.Sprintf(<span class="string">&quot;%s:%s&quot;</span>, h.Addr, h.Port)</span><br><span class="line">c, err := ssh.Dial(<span class="string">&quot;tcp&quot;</span>, addr, config)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span>, err</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> c, <span class="literal">nil</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// publicKeyAuthFunc 读取&amp;&amp;解析私钥</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">publicKeyAuthFunc</span><span class="params">(kPath <span class="type">string</span>)</span></span> ssh.AuthMethod &#123;</span><br><span class="line">keyPath, err := homedir.Expand(kPath)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">log.Fatal(<span class="string">&quot;find key&#x27;s home dir failed&quot;</span>, err)</span><br><span class="line">&#125;</span><br><span class="line">key, err := os.ReadFile(keyPath)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">log.Fatal(<span class="string">&quot;ssh key file read failed&quot;</span>, err)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// CreateUserOfRole the Signer for this private key.</span></span><br><span class="line">signer, err := ssh.ParsePrivateKey(key)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">log.Fatal(<span class="string">&quot;ssh key signer failed&quot;</span>, err)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> ssh.PublicKeys(signer)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>取得sftp连接后，接下来就能使用该sftp连接执行文件上传和下载的操作。</p><h2><span id="shang-chuan-wen-jian">上传文件</span><a href="#shang-chuan-wen-jian" class="header-anchor">#</a></h2><p>Upload 方法提供上传文件功能，上传文件分几步实现：</p><ul><li>打开本地文件，读取内容</li><li>创建远程目录</li><li>创建或者清空远程文件</li><li>修改远程文件的权限</li><li>复制本地文件内容到远程文件</li></ul><h2><span id="xia-zai-wen-jian">下载文件</span><a href="#xia-zai-wen-jian" class="header-anchor">#</a></h2><p>下载文件与上传文件的操作类似，唯一的区别是把远程文件的内容写到本地文件。</p><figure class="highlight golang"><figcaption><span>sftp.go</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> sftp</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;fmt&quot;</span></span><br><span class="line"><span class="string">&quot;io&quot;</span></span><br><span class="line"><span class="string">&quot;os&quot;</span></span><br><span class="line"><span class="string">&quot;path/filepath&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment">// Upload 上传文件</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">Upload</span><span class="params">(localPath, remotePath <span class="type">string</span>)</span></span> <span class="type">error</span> &#123;</span><br><span class="line">client, err := getSftpClient()</span><br><span class="line"><span class="keyword">defer</span> client.Close()</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> err</span><br><span class="line">&#125;</span><br><span class="line">localFile, err := os.Open(localPath)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> fmt.Errorf(<span class="string">&quot;BrowserOpen local file failed %s&quot;</span>, err)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">defer</span> localFile.Close()</span><br><span class="line"><span class="comment">//文件路径</span></span><br><span class="line">remoteFilePath := filepath.ToSlash(filepath.Dir(remotePath))</span><br><span class="line"><span class="comment">//检查目录，必要时创建目录</span></span><br><span class="line">err = client.MkdirAll(remoteFilePath)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> fmt.Errorf(<span class="string">&quot;scp mkdir all failed %s&quot;</span>, err)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//创建或着清空文件</span></span><br><span class="line">remoteFile, err := client.Create(remotePath)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> fmt.Errorf(<span class="string">&quot;create remote file failed %s:%s&quot;</span>, remotePath, err)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">defer</span> remoteFile.Close()</span><br><span class="line"><span class="comment">//修改执行权限</span></span><br><span class="line">info, err := os.Lstat(localPath)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> err</span><br><span class="line">&#125;</span><br><span class="line">err = client.Chmod(remoteFile.Name(), info.Mode())</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> fmt.Errorf(<span class="string">&quot;scp chmod failed %s&quot;</span>, err)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//写入内容，存在则覆盖</span></span><br><span class="line">_, err = io.Copy(remoteFile, localFile)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> fmt.Errorf(<span class="string">&quot;io copy failed %s&quot;</span>, err)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Download 下载文件</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">Download</span><span class="params">(localPath, remotePath <span class="type">string</span>)</span></span> <span class="type">error</span> &#123;</span><br><span class="line">client, err := getSftpClient()</span><br><span class="line"><span class="keyword">defer</span> client.Close()</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> err</span><br><span class="line">&#125;</span><br><span class="line">remoteFile, err := client.Open(remotePath)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> fmt.Errorf(<span class="string">&quot;open remote file failed %s&quot;</span>, err)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">defer</span> remoteFile.Close()</span><br><span class="line"></span><br><span class="line">localFile, err := os.Create(localPath)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> fmt.Errorf(<span class="string">&quot;create local file failed %s&quot;</span>, err)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">defer</span> localFile.Close()</span><br><span class="line"></span><br><span class="line"><span class="comment">//写入内容，存在则覆盖</span></span><br><span class="line">_, err = io.Copy(localFile, remoteFile)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> fmt.Errorf(<span class="string">&quot;io copy failed %s&quot;</span>, err)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2><span id="yuan-cheng-zhi-xing-ming-ling">远程执行命令</span><a href="#yuan-cheng-zhi-xing-ming-ling" class="header-anchor">#</a></h2><p>文件经过打包压缩，才上传到远程服务器上，因此还需要对远程文件进行解压缩。</p><p>Unzip 方法接收一个解压缩的命令参数，然后调用 runCommand 方法远程执行命令，最后返回命令的执行结果。</p><figure class="highlight golang"><figcaption><span>unzip.go</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> sftp</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;bytes&quot;</span></span><br><span class="line"><span class="string">&quot;fmt&quot;</span></span><br><span class="line"><span class="string">&quot;golang.org/x/crypto/ssh&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment">// Unzip unzip解压缩</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">Unzip</span><span class="params">(command <span class="type">string</span>)</span></span> <span class="type">error</span> &#123;</span><br><span class="line">conn, err := getSshClient()</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> err</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">defer</span> conn.Close()</span><br><span class="line">res, err := runCommand(conn, command)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> err</span><br><span class="line">&#125;</span><br><span class="line">fmt.Println(<span class="string">&quot;res&quot;</span>, res)</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// runCommand 远程执行命令</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">runCommand</span><span class="params">(client *ssh.Client, command <span class="type">string</span>)</span></span> (stdout <span class="type">string</span>, err <span class="type">error</span>) &#123;</span><br><span class="line">session, err := client.NewSession()</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">defer</span> session.Close()</span><br><span class="line"><span class="keyword">var</span> buf bytes.Buffer</span><br><span class="line">session.Stdout = &amp;buf</span><br><span class="line">session.Stderr = &amp;buf</span><br><span class="line">err = session.Run(command)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">err = fmt.Errorf(<span class="string">&quot;%s&quot;</span>, <span class="type">string</span>(buf.Bytes()))</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line">stdout = <span class="type">string</span>(buf.Bytes())</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2><span id="diao-yong-amp-amp-ce-shi">调用&amp;&amp;测试</span><a href="#diao-yong-amp-amp-ce-shi" class="header-anchor">#</a></h2><figure class="highlight golang"><figcaption><span>main.go</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;fmt&quot;</span></span><br><span class="line"><span class="string">&quot;gfast/example/ssh/sftp&quot;</span></span><br><span class="line"><span class="string">&quot;github.com/gogf/gf/frame/g&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> (</span><br><span class="line">localPath  = <span class="string">&quot;./test/hall.zip&quot;</span></span><br><span class="line">remotePath = <span class="string">&quot;/home/zhagnSan/oooo/hall/hall.zip&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">Upload()</span><br><span class="line"><span class="comment">//Download()</span></span><br><span class="line"><span class="comment">//Unzip()</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">Upload</span><span class="params">()</span></span> &#123;</span><br><span class="line">err := sftp.Upload(localPath, remotePath)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">g.Log().Info(err.Error())</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">Download</span><span class="params">()</span></span> &#123;</span><br><span class="line">err := sftp.Download(localPath, remotePath)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">g.Log().Info(err.Error())</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">Unzip</span><span class="params">()</span></span> &#123;</span><br><span class="line">command := fmt.Sprintf(<span class="string">&quot;%s %s %s&quot;</span>, <span class="string">&quot;unzip -o&quot;</span>, remotePath, <span class="string">&quot;-d /home/zhagnSan/oooo/hall&quot;</span>)</span><br><span class="line">err := sftp.Unzip(command)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">g.Log().Info(err.Error())</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;最近在做一个功能给客户端发包。&lt;/p&gt;
&lt;p&gt;客户端上传包到后台，选择发布的环境后，进行发布，实现版本热更。&lt;/p&gt;
&lt;h2&gt;&lt;span id=&quot;lian-jie-de-can-shu&quot;&gt;连接的参数&lt;/span&gt;&lt;a href=&quot;#lian-jie-de-can-shu&quot; </summary>
      
    
    
    
    <category term="golang" scheme="http://chenfeng.org/categories/golang/"/>
    
    
    <category term="golang" scheme="http://chenfeng.org/tags/golang/"/>
    
    <category term="sftp" scheme="http://chenfeng.org/tags/sftp/"/>
    
    <category term="ssh" scheme="http://chenfeng.org/tags/ssh/"/>
    
  </entry>
  
  <entry>
    <title>[译文]如何用JavaScript克隆一个对象</title>
    <link href="http://chenfeng.org/2023/04/19/clone-an-object-in-javascript/"/>
    <id>http://chenfeng.org/2023/04/19/clone-an-object-in-javascript/</id>
    <published>2023-04-19T15:00:00.000Z</published>
    <updated>2023-04-19T15:15:50.147Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/img/2023/0419-js.png"><br>JavaScript对象是键值对的集合。它是一种可以包含各种数据类型的非原生的数据类型。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> userDetails = &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&quot;John Doe&quot;</span>,</span><br><span class="line">  <span class="attr">age</span>: <span class="number">14</span>,</span><br><span class="line">  <span class="attr">verified</span>: <span class="literal">false</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>在 JavaScript 中使用对象时，有时你可能想要更改值或向对象添加新属性。</p><p>在某些情况下，在更新或添加新属性之前，你会希望创建一个新对象并复制或克隆原始对象的值。</p><p>例如，如果你想复制 userDetails 对象的值，然后修改 name 属性的值。此时，你会使用赋值 (&#x3D;) 运算符。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> newUser = userDetails;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(newUser); <span class="comment">// &#123;name: &#x27;John Doe&#x27;, age: 14, verified: false&#125;</span></span><br></pre></td></tr></table></figure><p>一切看起来都正常，但是当我们修改一下新对象，看看会发生什么？</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> newUser = userDetails;</span><br><span class="line">newUser.<span class="property">name</span> = <span class="string">&quot;Jane Doe&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(newUser); <span class="comment">// &#123;name: &#x27;Jane Doe&#x27;, age: 14, verified: false&#125;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(userDetails); <span class="comment">// &#123;name: &#x27;Jane Doe&#x27;, age: 14, verified: false&#125;</span></span><br></pre></td></tr></table></figure><p>结果就是原始对象 userDetails 的值也受到了影响，因为对象是引用类型。<br>这意味着存储在新对象或原始对象中的任何值都指向同一个对象。</p><p>这不是你想要的。你希望将一个对象的值存储在一个新对象中，并在不影响原始对象的情况下操作新对象中的值。</p><p>在本文中，你将学习三种可用于执行此操作的方法。你还将了解深克隆和浅克隆的含义以及它们的工作原理。</p><p>如果你赶时间，以下有三种方法和它们的例子。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Spread Method</span></span><br><span class="line"><span class="keyword">let</span> clone = &#123; ...userDetails &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Object.assign() Method</span></span><br><span class="line"><span class="keyword">let</span> clone = <span class="title class_">Object</span>.<span class="title function_">assign</span>(&#123;&#125;, userDetails)</span><br><span class="line"></span><br><span class="line"><span class="comment">// JSON.parse() Method</span></span><br><span class="line"><span class="keyword">let</span> clone = <span class="title class_">JSON</span>.<span class="title function_">parse</span>(<span class="title class_">JSON</span>.<span class="title function_">stringify</span>(userDetails))</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>如果你不赶时间，让我们开始吧。</p><h2><span id="ru-he-shi-yong-kuo-zhan-yun-suan-fu-zai-javascript-zhong-ke-long-dui-xiang">如何使用扩展运算符在 JavaScript 中克隆对象</span><a href="#ru-he-shi-yong-kuo-zhan-yun-suan-fu-zai-javascript-zhong-ke-long-dui-xiang" class="header-anchor">#</a></h2><p>扩展运算符是在 ES6 中引入的，可以将值扩展到三个点前面的对象中。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Declaring Object</span></span><br><span class="line"><span class="keyword">const</span> userDetails = &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&quot;John Doe&quot;</span>,</span><br><span class="line">  <span class="attr">age</span>: <span class="number">14</span>,</span><br><span class="line">  <span class="attr">verified</span>: <span class="literal">false</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Cloning the Object with Spread Operator</span></span><br><span class="line"><span class="keyword">let</span> cloneUser = &#123; ...userDetails &#125;;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(cloneUser); <span class="comment">// &#123;name: &#x27;John Doe&#x27;, age: 14, verified: false&#125;</span></span><br></pre></td></tr></table></figure><p>这不再被引用，这意味着更改新对象的值不会影响原始对象。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Cloning the Object with Spread Operator</span></span><br><span class="line"><span class="keyword">let</span> cloneUser = &#123; ...userDetails &#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// changing the value of cloneUser</span></span><br><span class="line">cloneUser.<span class="property">name</span> = <span class="string">&quot;Jane Doe&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(cloneUser.<span class="property">name</span>); <span class="comment">// &#x27;Jane Doe&#x27;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(cloneUser); <span class="comment">// &#123;name: &#x27;Jane Doe&#x27;, age: 14, verified: false&#125;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(userDetails); <span class="comment">// &#123;name: &#x27;John Doe&#x27;, age: 14, verified: false&#125;</span></span><br></pre></td></tr></table></figure><p>当你检查原始对象的 name 属性或整个对象中的值时，你会注意到它没有受到影响。</p><p>注意：当遇到深对象时，扩展运算符只能对对象进行浅拷贝，当你读完本文你就会明白了。</p><h2><span id="ru-he-shi-yong-object-assign-zai-javascript-zhong-ke-long-dui-xiang">如何使用 Object.assign() 在 JavaScript 中克隆对象</span><a href="#ru-he-shi-yong-object-assign-zai-javascript-zhong-ke-long-dui-xiang" class="header-anchor">#</a></h2><p>扩展运算符的替代方法是 Object.assign() 方法。你可以使用此方法将值和属性从一个或多个源对象复制到目标对象。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Declaring Object</span></span><br><span class="line"><span class="keyword">const</span> userDetails = &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&quot;John Doe&quot;</span>,</span><br><span class="line">  <span class="attr">age</span>: <span class="number">14</span>,</span><br><span class="line">  <span class="attr">verified</span>: <span class="literal">false</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Cloning the Object with Object.assign() Method</span></span><br><span class="line"><span class="keyword">let</span> cloneUser = <span class="title class_">Object</span>.<span class="title function_">assign</span>(&#123;&#125;, userDetails);</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(cloneUser); <span class="comment">// &#123;name: &#x27;John Doe&#x27;, age: 14, verified: false&#125;</span></span><br></pre></td></tr></table></figure><p>这不再被引用，这意味着更改新对象的值不会影响原始对象。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Cloning the Object with Object.assign() Method</span></span><br><span class="line"><span class="keyword">let</span> cloneUser = <span class="title class_">Object</span>.<span class="title function_">assign</span>(&#123;&#125;, userDetails);</span><br><span class="line"></span><br><span class="line"><span class="comment">// changing the value of cloneUser</span></span><br><span class="line">cloneUser.<span class="property">name</span> = <span class="string">&quot;Jane Doe&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(cloneUser.<span class="property">name</span>); <span class="comment">// &#x27;Jane Doe&#x27;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(cloneUser); <span class="comment">// &#123;name: &#x27;Jane Doe&#x27;, age: 14, verified: false&#125;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(userDetails); <span class="comment">// &#123;name: &#x27;John Doe&#x27;, age: 14, verified: false&#125;</span></span><br></pre></td></tr></table></figure><p>当你检查原始对象的 name 属性或整个对象中的值时，你会注意到它没有受到影响。</p><p>注意：当遇到深对象时，Object.assign() 方法只能对对象进行浅拷贝，当你读完本文你就会明白了。</p><h2><span id="ru-he-shi-yong-json-parse-zai-javascript-zhong-ke-long-dui-xiang">如何使用 JSON.parse() 在 JavaScript 中克隆对象</span><a href="#ru-he-shi-yong-json-parse-zai-javascript-zhong-ke-long-dui-xiang" class="header-anchor">#</a></h2><p>最后一个方法是 JSON.parse()。你将结合JSON.stringify() 一起使用。<br>你可以使用它来深度克隆，但它有一些缺点。<br>首先，让我们看看它是如何工作的。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Declaring Object</span></span><br><span class="line"><span class="keyword">const</span> userDetails = &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&quot;John Doe&quot;</span>,</span><br><span class="line">  <span class="attr">age</span>: <span class="number">14</span>,</span><br><span class="line">  <span class="attr">verified</span>: <span class="literal">false</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Cloning the Object with JSON.parse() Method</span></span><br><span class="line"><span class="keyword">let</span> cloneUser = <span class="title class_">JSON</span>.<span class="title function_">parse</span>(<span class="title class_">JSON</span>.<span class="title function_">stringify</span>(userDetails));</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(cloneUser); <span class="comment">// &#123;name: &#x27;John Doe&#x27;, age: 14, verified: false&#125;</span></span><br></pre></td></tr></table></figure><p>就像前面的方法一样，新的对象不再引用它。这意味着你可以在不影响原始对象的情况下更改新对象中的值。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Cloning the Object with JSON.parse() Method</span></span><br><span class="line"><span class="keyword">let</span> cloneUser = <span class="title class_">JSON</span>.<span class="title function_">parse</span>(<span class="title class_">JSON</span>.<span class="title function_">stringify</span>(userDetails));</span><br><span class="line"></span><br><span class="line"><span class="comment">// changing the value of cloneUser</span></span><br><span class="line">cloneUser.<span class="property">name</span> = <span class="string">&quot;Jane Doe&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(cloneUser.<span class="property">name</span>); <span class="comment">// &#x27;Jane Doe&#x27;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(cloneUser); <span class="comment">// &#123;name: &#x27;Jane Doe&#x27;, age: 14, verified: false&#125;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(userDetails); <span class="comment">// &#123;name: &#x27;John Doe&#x27;, age: 14, verified: false&#125;</span></span><br></pre></td></tr></table></figure><p>当你检查原始对象的 name 属性或整个对象中的值时，你会注意到它没有受到影响。</p><p>注意：此方法可用于深度克隆，但不是最佳选择，因为它不适用于function或symbol属性。</p><p>现在让我们探讨浅克隆和深度克隆，以及如何使用该JSON.parse()方法执行深度克隆。你还将了解为什么它不是最佳的选择。</p><h2><span id="qian-ke-long-yu-shen-ke-long">浅克隆与深克隆</span><a href="#qian-ke-long-yu-shen-ke-long" class="header-anchor">#</a></h2><p>到目前为止，本文使用的示例是一个只有一层的基础对象。<br>这意味着我们只执行了浅克隆。<br>但是当一个对象有多于一层时，你就需要进行深度克隆。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Shallow object 浅对象</span></span><br><span class="line"><span class="keyword">const</span> userDetails = &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&quot;John Doe&quot;</span>,</span><br><span class="line">  <span class="attr">age</span>: <span class="number">14</span>,</span><br><span class="line">  <span class="attr">verified</span>: <span class="literal">false</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Deep object 深对象</span></span><br><span class="line"><span class="keyword">const</span> userDetails = &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&quot;John Doe&quot;</span>,</span><br><span class="line">  <span class="attr">age</span>: <span class="number">14</span>,</span><br><span class="line">  <span class="attr">status</span>: &#123;</span><br><span class="line">    <span class="attr">verified</span>: <span class="literal">false</span>,</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>注意，深对象不止一层，因为 userDetails 对象中还有另外一个对象。<br>一个深对象可以有任意多的层次。</p><p>注意：当你使用扩展操作符或Object.assign()方法克隆一个深对象时，更深的对象将引用。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> userDetails = &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&quot;John Doe&quot;</span>,</span><br><span class="line">  <span class="attr">age</span>: <span class="number">14</span>,</span><br><span class="line">  <span class="attr">status</span>: &#123;</span><br><span class="line">    <span class="attr">verified</span>: <span class="literal">false</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Cloning the Object with Spread Operator</span></span><br><span class="line"><span class="keyword">let</span> cloneUser = &#123; ...userDetails &#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Changing the value of cloneUser</span></span><br><span class="line">cloneUser.<span class="property">status</span>.<span class="property">verified</span> = <span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(cloneUser); <span class="comment">// &#123;name: &#x27;John Doe&#x27;, age: 14, status: &#123;verified: true&#125;&#125;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(userDetails); <span class="comment">// &#123;name: &#x27;John Doe&#x27;, age: 14, status: &#123;verified: true&#125;&#125;</span></span><br></pre></td></tr></table></figure><p>你会注意到原始对象和新对象都会受到影响，因为当你使用扩展运算符或Object.assign()方法克隆深对象时，将引用更深的对象。</p><h2><span id="ni-zen-me-jie-jue-zhe-ge-wen-ti">你怎么解决这个问题</span><a href="#ni-zen-me-jie-jue-zhe-ge-wen-ti" class="header-anchor">#</a></h2><p>你可以使用JSON.parse()方法，一切都会正常进行。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> userDetails = &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&quot;John Doe&quot;</span>,</span><br><span class="line">  <span class="attr">age</span>: <span class="number">14</span>,</span><br><span class="line">  <span class="attr">status</span>: &#123;</span><br><span class="line">    <span class="attr">verified</span>: <span class="literal">false</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Cloning the Object with Spread Operator</span></span><br><span class="line"><span class="keyword">let</span> cloneUser = <span class="title class_">JSON</span>.<span class="title function_">parse</span>(<span class="title class_">JSON</span>.<span class="title function_">stringify</span>(userDetails));</span><br><span class="line"></span><br><span class="line"><span class="comment">// Changing the value of cloneUser</span></span><br><span class="line">cloneUser.<span class="property">status</span>.<span class="property">verified</span> = <span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(cloneUser); <span class="comment">// &#123;name: &#x27;John Doe&#x27;, age: 14, status: &#123;verified: true&#125;&#125;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(userDetails); <span class="comment">// &#123;name: &#x27;John Doe&#x27;, age: 14, status: &#123;verified: false&#125;&#125;</span></span><br></pre></td></tr></table></figure><p>但是这种方法有一个问题 —— 就是你可能会丢失数据。</p><p>正如以上的例子显示的那样，JSON.stringify()与数字、字符串或布尔值等原生的数据类型配合得很好。<br>相对应的，当遇到非原生的数据类型时，JSON.stringify()方法出现意想不到的结果。</p><p>例如，当属性的值为：Nan、Infinityto、null、undefined、Symbol、object等类型是，JSON.stringify()方法会返回一个空的键值对并跳过它。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> userDetails = &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&quot;John Doe&quot;</span>,</span><br><span class="line">  <span class="attr">age</span>: <span class="number">14</span>,</span><br><span class="line">  <span class="attr">status</span>: &#123;</span><br><span class="line">    <span class="attr">verified</span>: <span class="literal">false</span>,</span><br><span class="line">    <span class="attr">method</span>: <span class="title class_">Symbol</span>(),</span><br><span class="line">    <span class="attr">title</span>: <span class="literal">undefined</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Cloning the Object with Spread Operator</span></span><br><span class="line"><span class="keyword">let</span> cloneUser = <span class="title class_">JSON</span>.<span class="title function_">parse</span>(<span class="title class_">JSON</span>.<span class="title function_">stringify</span>(userDetails));</span><br></pre></td></tr></table></figure><p>JSON.stringify() 将不会返回值为 Symbol 和 undefined 的键值对。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(cloneUser); </span><br><span class="line"></span><br><span class="line"><span class="comment">// Output</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&quot;John Doe&quot;</span>,</span><br><span class="line">  <span class="attr">age</span>: <span class="number">14</span>,</span><br><span class="line">  <span class="attr">status</span>: &#123;</span><br><span class="line">    <span class="attr">verified</span>: <span class="literal">false</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>这意味着你需要小心。实施深克隆的最佳选择是使用 <a href="https://lodash.com/docs/4.17.15#cloneDeep">Lodash</a>。<br>这样你就可以确定你的任何数据都不会丢失。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> userDetails = &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&quot;John Doe&quot;</span>,</span><br><span class="line">  <span class="attr">age</span>: <span class="number">14</span>,</span><br><span class="line">  <span class="attr">status</span>: &#123;</span><br><span class="line">    <span class="attr">verified</span>: <span class="literal">false</span>,</span><br><span class="line">    <span class="attr">method</span>: <span class="title class_">Symbol</span>(),</span><br><span class="line">    <span class="attr">title</span>: <span class="literal">undefined</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(_.<span class="title function_">cloneDeep</span>(userDetails));</span><br></pre></td></tr></table></figure><h2><span id="zong-jie">总结</span><a href="#zong-jie" class="header-anchor">#</a></h2><p>本文介绍了如何使用三种主要方法在 JavaScript 中克隆对象。<br>你已经了解了这些方法的工作原理，以及何时使用每种方法。<br>你还了解了深度克隆。</p><p>你可以阅读<a href="https://medium.com/@pmzubar/why-json-parse-json-stringify-is-a-bad-practice-to-clone-an-object-in-javascript-b28ac5e36521">本文</a>以了解为什么JSON.parse(JSON.stringify())在 JavaScript 中克隆对象是一种不好的做法。</p><p>原文 <a href="https://www.freecodecamp.org/news/clone-an-object-in-javascript/">JS Copy an Object – How to Clone an Obj in JavaScript</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;img src=&quot;/img/2023/0419-js.png&quot;&gt;&lt;br&gt;JavaScript对象是键值对的集合。它是一种可以包含各种数据类型的非原生的数据类型。&lt;/p&gt;
&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;</summary>
      
    
    
    
    <category term="JavaScript" scheme="http://chenfeng.org/categories/JavaScript/"/>
    
    
    <category term="JavaScript" scheme="http://chenfeng.org/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>使用elementUI的 el-upload 组件，封装一个上传图片的组件</title>
    <link href="http://chenfeng.org/2023/04/15/vue/"/>
    <id>http://chenfeng.org/2023/04/15/vue/</id>
    <published>2023-04-15T15:00:00.000Z</published>
    <updated>2023-08-30T18:59:23.978Z</updated>
    
    <content type="html"><![CDATA[<p>上传图片一个非常常用的功能，使用 <a href="https://element.eleme.cn/#/zh-CN/component/installation">elementUI</a> 的 el-upload 组件，可以方便的实现上传图片文件等，用法参照例子 <a href="https://element.eleme.cn/#/zh-CN/component/upload#yong-hu-tou-xiang-shang-chuan">用户头像上传</a>。</p><p>如例子所示，每次使用该组件，都要写如下代码：</p><ul><li>引用组件 el-upload</li><li>写回调函数 handleAvatarSuccess，beforeAvatarUpload</li><li>写CSS样式代码</li></ul><p>demo.vue</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line">&lt;el-upload</span><br><span class="line">  class=&quot;avatar-uploader&quot;</span><br><span class="line">  action=&quot;https://jsonplaceholder.typicode.com/posts/&quot;</span><br><span class="line">  :show-file-list=&quot;false&quot;</span><br><span class="line">  :on-success=&quot;handleAvatarSuccess&quot;</span><br><span class="line">  :before-upload=&quot;beforeAvatarUpload&quot;&gt;</span><br><span class="line">  &lt;img v-if=&quot;imageUrl&quot; :src=&quot;imageUrl&quot; class=&quot;avatar&quot;&gt;</span><br><span class="line">  &lt;i v-else class=&quot;el-icon-plus avatar-uploader-icon&quot;&gt;&lt;/i&gt;</span><br><span class="line">&lt;/el-upload&gt;</span><br><span class="line"></span><br><span class="line">&lt;style&gt;</span><br><span class="line">  .avatar-uploader .el-upload &#123;</span><br><span class="line">    border: 1px dashed #d9d9d9;</span><br><span class="line">    border-radius: 6px;</span><br><span class="line">    cursor: pointer;</span><br><span class="line">    position: relative;</span><br><span class="line">    overflow: hidden;</span><br><span class="line">  &#125;</span><br><span class="line">  .avatar-uploader .el-upload:hover &#123;</span><br><span class="line">    border-color: #409EFF;</span><br><span class="line">  &#125;</span><br><span class="line">  .avatar-uploader-icon &#123;</span><br><span class="line">    font-size: 28px;</span><br><span class="line">    color: #8c939d;</span><br><span class="line">    width: 178px;</span><br><span class="line">    height: 178px;</span><br><span class="line">    line-height: 178px;</span><br><span class="line">    text-align: center;</span><br><span class="line">  &#125;</span><br><span class="line">  .avatar &#123;</span><br><span class="line">    width: 178px;</span><br><span class="line">    height: 178px;</span><br><span class="line">    display: block;</span><br><span class="line">  &#125;</span><br><span class="line">&lt;/style&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">  export default &#123;</span><br><span class="line">    data() &#123;</span><br><span class="line">      return &#123;</span><br><span class="line">        imageUrl: &#x27;&#x27;</span><br><span class="line">      &#125;;</span><br><span class="line">    &#125;,</span><br><span class="line">    methods: &#123;</span><br><span class="line">      handleAvatarSuccess(res, file) &#123;</span><br><span class="line">        this.imageUrl = URL.createObjectURL(file.raw);</span><br><span class="line">      &#125;,</span><br><span class="line">      beforeAvatarUpload(file) &#123;</span><br><span class="line">        const isJPG = file.type === &#x27;image/jpeg&#x27;;</span><br><span class="line">        const isLt2M = file.size / 1024 / 1024 &lt; 2;</span><br><span class="line"></span><br><span class="line">        if (!isJPG) &#123;</span><br><span class="line">          this.$message.error(&#x27;上传头像图片只能是 JPG 格式!&#x27;);</span><br><span class="line">        &#125;</span><br><span class="line">        if (!isLt2M) &#123;</span><br><span class="line">          this.$message.error(&#x27;上传头像图片大小不能超过 2MB!&#x27;);</span><br><span class="line">        &#125;</span><br><span class="line">        return isJPG &amp;&amp; isLt2M;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><p>如果在多个地方都需要用到上传图片的功能，那么就要多次写同样的代码，显然没必要。</p><p>稍微封装一下 demo.vue 的代码，使它变成一个独立的组件，通过简单的调用，就可以实现上传图片的功能。</p><p>该组件接收一个图片地址参数，当有图片地址的时候，显示图片；<br>还有一个回调函数，当图片地址发生改变时，可以通知父组件。</p><p>upImg.vue</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    &lt;el-upload</span><br><span class="line">        v-loading=&quot;upLoading&quot;</span><br><span class="line">        class=&quot;avatar-uploader&quot;</span><br><span class="line">        :action=&quot;apiUrl+&#x27;/system/upload/upImg&#x27;&quot;</span><br><span class="line">        :show-file-list=&quot;false&quot;</span><br><span class="line">        name=&quot;file&quot;</span><br><span class="line">        :data=&quot;setUpData()&quot;</span><br><span class="line">        :on-success=&quot;handleAvatarSuccess&quot;</span><br><span class="line">        :before-upload=&quot;beforeAvatarUpload&quot;</span><br><span class="line">    &gt;</span><br><span class="line">      &lt;img v-if=&quot;imgUrl&quot; :src=&quot;imgUrl&quot; class=&quot;avatar&quot;/&gt;</span><br><span class="line">      &lt;i v-else class=&quot;el-icon-plus avatar-uploader-icon&quot;&gt;&lt;/i&gt;</span><br><span class="line">      &lt;div class=&quot;el-upload__tip&quot; slot=&quot;tip&quot;&gt;只能上传jpg/png文件，且不超过2MB&lt;/div&gt;</span><br><span class="line">    &lt;/el-upload&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">import &#123; getToken &#125; from &#x27;@/utils/auth&#x27;</span><br><span class="line"></span><br><span class="line">export default &#123;</span><br><span class="line">  name: &#x27;upImg&#x27;,</span><br><span class="line">  props: [&#x27;imageUrl&#x27;],// 图片上传地址</span><br><span class="line">  data() &#123;</span><br><span class="line">    return &#123;</span><br><span class="line">      // 上传加载</span><br><span class="line">      upLoading: false,</span><br><span class="line">      imgUrl: undefined</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  watch: &#123;</span><br><span class="line">    imageUrl: &#123;</span><br><span class="line">      immediate: true,</span><br><span class="line">      handler(value) &#123;</span><br><span class="line">        this.imgUrl = value</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  methods: &#123;</span><br><span class="line">    handleAvatarSuccess(res, file) &#123;</span><br><span class="line">      if (res.code === 0) &#123;</span><br><span class="line">        this.imgUrl = URL.createObjectURL(file.raw)</span><br><span class="line">        this.$emit(&#x27;getImgUrl&#x27;, res.data.fileInfo.fileUrl)</span><br><span class="line">      &#125; else &#123;</span><br><span class="line">        this.msgError(res.msg)</span><br><span class="line">      &#125;</span><br><span class="line">      this.upLoading = false</span><br><span class="line">    &#125;,</span><br><span class="line">    beforeAvatarUpload(file) &#123;</span><br><span class="line">      const isJPG = (file.type === &#x27;image/jpeg&#x27; || file.type === &#x27;image/png&#x27;)</span><br><span class="line">      const isLt2M = file.size / 1024 / 1024 &lt; 2</span><br><span class="line"></span><br><span class="line">      if (!isJPG) &#123;</span><br><span class="line">        this.$message.error(&#x27;上传头像图片只能是 JPG 或 PNG 格式!&#x27;)</span><br><span class="line">        return false</span><br><span class="line">      &#125;</span><br><span class="line">      if (!isLt2M) &#123;</span><br><span class="line">        this.$message.error(&#x27;上传头像图片大小不能超过 2MB!&#x27;)</span><br><span class="line">        return false</span><br><span class="line">      &#125;</span><br><span class="line">      this.upLoading = true</span><br><span class="line">      return isJPG &amp;&amp; isLt2M</span><br><span class="line">    &#125;,</span><br><span class="line">    setUpData() &#123;</span><br><span class="line">      return &#123; token: getToken() &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style scoped&gt;</span><br><span class="line">.avatar-uploader .el-upload &#123;</span><br><span class="line">  border: 1px dashed #d9d9d9;</span><br><span class="line">  border-radius: 6px;</span><br><span class="line">  cursor: pointer;</span><br><span class="line">  position: relative;</span><br><span class="line">  overflow: hidden;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.avatar-uploader .el-upload:hover &#123;</span><br><span class="line">  border-color: #409eff;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.avatar-uploader-icon &#123;</span><br><span class="line">  font-size: 28px;</span><br><span class="line">  color: #8c939d;</span><br><span class="line">  width: 99px;</span><br><span class="line">  height: 99px;</span><br><span class="line">  line-height: 99px;</span><br><span class="line">  text-align: center;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.avatar &#123;</span><br><span class="line">  width: 99px;</span><br><span class="line">  height: 99px;</span><br><span class="line">  display: block;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/style&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>upImg.vue 组件定义 imgUrl 变量作为图片的地址，<br>当父组件调用 upImg.vue 组件时，传入一个图片地址参数 imageUrl ，<br>子组件接收并监听该参数，当参数值发生变化时，赋值给 imgUrl 变量。</p><p>当成功上传图片后，imgUrl 取得图片地址， 并且触发父组件上的 getImgUrl 事件，抛出图片地址。</p><p>父组件只要监听 getImgUrl 事件，即可访问图片地址。</p><p>如下代码即是父组件的调用过程。</p><p>index.vue</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;up-img v-on:getImgUrl=&quot;getImgUrl&quot; :imageUrl=&quot;imageUrl&quot;/&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">import upImg from &#x27;@/components/upImg/upImg&#x27;</span><br><span class="line">export default &#123;</span><br><span class="line">    components: &#123; upImg &#125;,</span><br><span class="line">    methods: &#123;</span><br><span class="line">        getImgUrl(url) &#123;</span><br><span class="line">            console.log(url)</span><br><span class="line">        &#125;,</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><p>以上，通过对 el-upload 组件的封装，实现上传功能，简化了调用过程。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;上传图片一个非常常用的功能，使用 &lt;a href=&quot;https://element.eleme.cn/#/zh-CN/component/installation&quot;&gt;elementUI&lt;/a&gt; 的 el-upload 组件，可以方便的实现上传图片文件等，用法参照例子 &lt;a </summary>
      
    
    
    
    <category term="VUE" scheme="http://chenfeng.org/categories/VUE/"/>
    
    
    <category term="VUE" scheme="http://chenfeng.org/tags/VUE/"/>
    
  </entry>
  
  <entry>
    <title>golang-migrate</title>
    <link href="http://chenfeng.org/2023/04/08/migration/"/>
    <id>http://chenfeng.org/2023/04/08/migration/</id>
    <published>2023-04-08T15:00:00.000Z</published>
    <updated>2023-04-19T15:16:32.237Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://github.com/golang-migrate/migrate">migrate</a> 是一个用go写的数据库迁移工具，提供CLI和导入库两种方式，支持的数据库有MySQL，PostgreSQL，SQLite，MongoDB等。</p><p>使用migrate数据库迁移工具可以在更新的时候避免一些因手动操作导致的意外事故，提高更新流程的集成度。</p><h2><span id="migrate-cli">migrate CLI</span><a href="#migrate-cli" class="header-anchor">#</a></h2><h3><span id="an-zhuang">安装</span><a href="#an-zhuang" class="header-anchor">#</a></h3><p>MacOS或者Windows可以通过软件包下载</p><p>MacOS </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">brew install golang-migrate</span><br></pre></td></tr></table></figure><p>Windows </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">scoop install migrate</span><br></pre></td></tr></table></figure><p>Linux从这里 <a href="https://github.com/golang-migrate/migrate/releases">Release Downloads</a> 下载工具包，解压即可使用。</p><h3><span id="chang-yong-de-qian-yi-ming-ling">常用的迁移命令</span><a href="#chang-yong-de-qian-yi-ming-ling" class="header-anchor">#</a></h3><h4><span id="chuang-jian-sql-wen-jian">创建sql文件</span><a href="#chuang-jian-sql-wen-jian" class="header-anchor">#</a></h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">migrate create -ext sql -<span class="built_in">dir</span> ./sit106/sql -<span class="built_in">seq</span> create_test_table</span><br></pre></td></tr></table></figure><p>create命令会创建两个空sql文件，一个名字带<strong>up</strong>，表示升级文件，一个名字带<strong>down</strong>，表示回滚文件，文件名带有顺序的版本号和指定的文件名。<br><img src="/img/migrate/create.png"></p><h4><span id="sheng-ji-n-ge-ban-ben">升级 N 个版本</span><a href="#sheng-ji-n-ge-ban-ben" class="header-anchor">#</a></h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">migrate -path ./sit106/sql -database <span class="string">&#x27;mysql://root:123456@tcp(127.0.0.1:3306)/test?query&#x27;</span> up [N]</span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">## 第一次执行up命令后，会自动创建 schema_migrations 表，记录迁移版本号和状态。</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> `schema_migrations` (</span><br><span class="line">  `version` <span class="type">bigint</span>(<span class="number">20</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  `dirty` tinyint(<span class="number">1</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  <span class="keyword">PRIMARY</span> KEY (`version`)</span><br><span class="line">) ENGINE<span class="operator">=</span>InnoDB <span class="keyword">DEFAULT</span> CHARSET<span class="operator">=</span>utf8;</span><br></pre></td></tr></table></figure><p>每一次执行迁移命令，会首先从 schema_migrations 表获取版本号，再从指定目录获取比当前版本号要高的迁移的文件，再执行迁移。</p><p><strong>注意：</strong> 不加参数 N ，则更新到最新，默认不加。</p><h4><span id="jiang-ji-n-ge-ban-ben">降级 N 个版本</span><a href="#jiang-ji-n-ge-ban-ben" class="header-anchor">#</a></h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">migrate -path ./sit106/sql -database <span class="string">&#x27;mysql://root:123456@tcp(127.0.0.1:3306)/test?query&#x27;</span> down [N]</span><br></pre></td></tr></table></figure><p><strong>注意：</strong> 不加参数 N ，则回滚到版本0。</p><h4><span id="hu-lue-di-n-ban-ben-de-zang-zhuang-tai-dirty-state">忽略第 N 版本的脏状态 dirty state</span><a href="#hu-lue-di-n-ban-ben-de-zang-zhuang-tai-dirty-state" class="header-anchor">#</a></h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">migrate -path ./sit106/sql -database <span class="string">&#x27;mysql://root:123456@tcp(127.0.0.1:3306)/test?query&#x27;</span> force N</span><br></pre></td></tr></table></figure><p>当升级或者回滚的sql脚本出现错误，当前版本会被标记为脏状态，无法继续更新或者回滚。<br>在修正sql脚本的错误后，需要使用次命令，清除脏状态，方可以继续升级或者回滚。</p><h4><span id="cha-kan-dang-qian-qian-yi-ban-ben">查看当前迁移版本</span><a href="#cha-kan-dang-qian-qian-yi-ban-ben" class="header-anchor">#</a></h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">migrate -path ./sit106/sql -database <span class="string">&#x27;mysql://root:123456@tcp(127.0.0.1:3306)/test?query&#x27;</span> version</span><br></pre></td></tr></table></figure><h4><span id="tiao-yue-dao-di-n-ge-ban-ben">跳跃到第 N 个版本</span><a href="#tiao-yue-dao-di-n-ge-ban-ben" class="header-anchor">#</a></h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">migrate -database <span class="string">&#x27;mysql://root:123456@tcp(127.0.0.1:3306)/test?query&#x27;</span> goto N</span><br></pre></td></tr></table></figure><p>按顺序升级或者回滚到指定版本。</p><h4><span id="geng-duo-yong-fa-tong-guo-bang-zhu-huo-qu">更多用法通过帮助获取</span><a href="#geng-duo-yong-fa-tong-guo-bang-zhu-huo-qu" class="header-anchor">#</a></h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">migrate</span><br></pre></td></tr></table></figure><p>以上命令的 <strong>path</strong> 参数的写法<br><code>-path ./sit106/sql</code><br>是一个简写的方式，原型写法为</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">仅当从文件系统加载配置的时候，可以使用简写方式。</span><br><span class="line"></span><br><span class="line">除了支持从file读取，还支持从 github,gitlab,bitbucket 等远程读取，具体访问 [source](https://github.com/golang-migrate/migrate/tree/master/source) 查看。</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">## migrate library</span><br><span class="line"></span><br><span class="line">### 安装</span><br><span class="line">```bash</span><br><span class="line">go get github.com/golang-migrate/migrate</span><br></pre></td></tr></table></figure><h3><span id="example-migration-go">example migration.go</span><a href="#example-migration-go" class="header-anchor">#</a></h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> migration</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;database/sql&quot;</span></span><br><span class="line">_ <span class="string">&quot;github.com/go-sql-driver/mysql&quot;</span></span><br><span class="line"><span class="string">&quot;github.com/golang-migrate/migrate&quot;</span></span><br><span class="line"><span class="string">&quot;github.com/golang-migrate/migrate/database/mysql&quot;</span></span><br><span class="line">_ <span class="string">&quot;github.com/golang-migrate/migrate/source/file&quot;</span></span><br><span class="line"><span class="string">&quot;log&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">init</span><span class="params">()</span></span> &#123;</span><br><span class="line">log.Println(<span class="string">&quot;start migrate&quot;</span>)</span><br><span class="line">db, _ := sql.Open(<span class="string">&quot;mysql&quot;</span>, <span class="string">&quot;root:1234@tcp(localhost:3306)/test?multiStatements=true&quot;</span>)</span><br><span class="line">driver, err := mysql.WithInstance(db, &amp;mysql.Config&#123;&#125;)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">log.Fatal(err)</span><br><span class="line">&#125;</span><br><span class="line">m, err := migrate.NewWithDatabaseInstance(</span><br><span class="line"><span class="string">&quot;file://publish/sit106/sql&quot;</span>,</span><br><span class="line"><span class="string">&quot;mysql&quot;</span>,</span><br><span class="line">driver,</span><br><span class="line">)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">log.Fatal(err)</span><br><span class="line">&#125;</span><br><span class="line">err = m.Up()</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">m.Down(<span class="number">1</span>)</span><br><span class="line">log.Fatal(err)</span><br><span class="line">&#125;</span><br><span class="line">log.Println(<span class="string">&quot;end migrate&quot;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>从以上代码可以看出，当up命令发生错误时，需要执行down命令，但是具体down几个版本，则需要自己控制参数。</p><h2><span id="kuo-zhan-jian-yi">扩展建议</span><a href="#kuo-zhan-jian-yi" class="header-anchor">#</a></h2><p>可新增一个字段<strong>pre_version</strong>，记录上一个版本号。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">CREATE TABLE `schema_migrations` (</span><br><span class="line">  `version` bigint(20) NOT NULL,</span><br><span class="line">  `pre_version` bigint(20) NOT NULL,</span><br><span class="line">  `dirty` tinyint(1) NOT NULL,</span><br><span class="line">  PRIMARY KEY (`version`)</span><br><span class="line">) ENGINE=InnoDB DEFAULT CHARSET=utf8;</span><br></pre></td></tr></table></figure><p>当执行up命令前，记录当前的版本号<strong>version</strong>，执行up命令后，得到<strong>new_version</strong>，最后更新schema_migrations表。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">set</span> pre_version<span class="operator">=</span>version,version<span class="operator">=</span>new_version</span><br></pre></td></tr></table></figure><p>当执行down命令时，首先取pre_version的值，回滚版本后，更新后执行。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">set</span> version<span class="operator">=</span>pre_version</span><br></pre></td></tr></table></figure><p>这样至少可以回滚到上一个版本。</p><h2><span id="xu-yao-zhu-yi-de-shi">需要注意的事</span><a href="#xu-yao-zhu-yi-de-shi" class="header-anchor">#</a></h2><h3><span id="chong-tu">冲突</span><a href="#chong-tu" class="header-anchor">#</a></h3><p>在一个多人开发的项目中，难免会遇到冲突，所以在代码审查的时候要尤其注意。</p><h3><span id="mi-deng">幂等</span><a href="#mi-deng" class="header-anchor">#</a></h3><p>尽量让你的迁移时幂等的——连续两次运行相同的sql语句得到相同的结果，这会让迁移代码更加健壮。例如使用<br><code>CREATE TABLE IF NOT EXISTS</code><br>代替<br><code>CREATE TABLE</code></p><h3><span id="shi-wu">事务</span><a href="#shi-wu" class="header-anchor">#</a></h3><p>如果一次迁移中有多个命令&#x2F;查询，最好把它们包在一个事务中，这样，当其中一个命令失败，我们的数据库将保持不变。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;a href=&quot;https://github.com/golang-migrate/migrate&quot;&gt;migrate&lt;/a&gt; 是一个用go写的数据库迁移工具，提供CLI和导入库两种方式，支持的数据库有MySQL，PostgreSQL，SQLite，MongoDB等。&lt;/p</summary>
      
    
    
    
    <category term="golang" scheme="http://chenfeng.org/categories/golang/"/>
    
    
    <category term="golang" scheme="http://chenfeng.org/tags/golang/"/>
    
    <category term="migrate" scheme="http://chenfeng.org/tags/migrate/"/>
    
  </entry>
  
  <entry>
    <title>使用Google Authenticator 作为双重认证</title>
    <link href="http://chenfeng.org/2023/04/03/authentication/"/>
    <id>http://chenfeng.org/2023/04/03/authentication/</id>
    <published>2023-04-03T15:00:00.000Z</published>
    <updated>2023-04-19T15:16:24.743Z</updated>
    
    <content type="html"><![CDATA[<p>双重认证顾名思义即是在验证用户账号密码后，再进行一次验证码认证，提高登录流程的安全性。</p><h2><span id="ren-zheng-liu-cheng">认证流程</span><a href="#ren-zheng-liu-cheng" class="header-anchor">#</a></h2><ul><li>配对生成二维码</li><li>使用Google认证器APP扫描二维码，得到动态验证码（动态验证码后面有一个倒计时器，每30秒刷新一次）</li><li>输入验证码进行认证</li></ul><h2><span id="api-jie-ru">API接入</span><a href="#api-jie-ru" class="header-anchor">#</a></h2><h3><span id="qing-qiu-yu-ming">请求域名</span><a href="#qing-qiu-yu-ming" class="header-anchor">#</a></h3><p><a href="https://www.authenticatorapi.com/">https://www.authenticatorapi.com</a></p><h3><span id="pei-dui">配对</span><a href="#pei-dui" class="header-anchor">#</a></h3><ul><li>描述：获取认证二维码</li><li>地址：&#x2F;pair.aspx</li><li>请求方式：GET</li><li>请求参数：</li></ul><table><thead><tr><th align="left">参数名</th><th align="left">格式</th><th align="left">必需</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left">AppName</td><td align="left">string</td><td align="left">是</td><td align="left">AppName</td></tr><tr><td align="left">AppInfo</td><td align="left">string</td><td align="left">是</td><td align="left">AppInfo</td></tr><tr><td align="left">SecretCode</td><td align="left">string</td><td align="left">是</td><td align="left">SecretCode</td></tr></tbody></table><ul><li>响应结果：<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">title</span>=<span class="string">&#x27;Manually pair with GEZDGNBVGY3TQQSYLFKA&#x27;</span> <span class="attr">href</span>=<span class="string">&#x27;https://www.authenticatorapi.com&#x27;</span>&gt;</span><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&#x27;https://chart.googleapis.com/chart?cht=qr&amp;chs=300x300&amp;chl=otpauth%3A%2F%2Ftotp%2FJohn%3Fsecret%3DGEZDGNBVGY3TQQSYLFKA%26issuer%3DMyApp&#x27;</span> <span class="attr">border</span>=<span class="string">0</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul><p>提取img标签里src属性的值，保存起来，不用重复请求接口</p><h3><span id="yan-zheng">验证</span><a href="#yan-zheng" class="header-anchor">#</a></h3><ul><li>描述：使用验证码进行认证</li><li>地址：&#x2F;Validate.aspx</li><li>请求方式：GET</li><li>请求参数：</li></ul><table><thead><tr><th align="left">参数名</th><th align="left">格式</th><th align="left">必需</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left">Pin</td><td align="left">string</td><td align="left">是</td><td align="left">Pin</td></tr><tr><td align="left">SecretCode</td><td align="left">string</td><td align="left">是</td><td align="left">SecretCode</td></tr></tbody></table><ul><li>响应结果：<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">False|True</span><br></pre></td></tr></table></figure></li></ul><h2><span id="dong-tai-yan-zheng-ma-you-xiao-qi">动态验证码有效期</span><a href="#dong-tai-yan-zheng-ma-you-xiao-qi" class="header-anchor">#</a></h2><p>经过测试发现：</p><ul><li>每30秒刷新一次验证码</li><li>每个验证码有效期5分钟</li><li>也就是说5分钟内有10个有效验证码</li></ul><h2><span id="can-kao">参考</span><a href="#can-kao" class="header-anchor">#</a></h2><p><a href="https://authenticatorapi.com/">Google Authenticator</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;双重认证顾名思义即是在验证用户账号密码后，再进行一次验证码认证，提高登录流程的安全性。&lt;/p&gt;
&lt;h2&gt;&lt;span id=&quot;ren-zheng-liu-cheng&quot;&gt;认证流程&lt;/span&gt;&lt;a href=&quot;#ren-zheng-liu-cheng&quot; class=&quot;heade</summary>
      
    
    
    
    <category term="google" scheme="http://chenfeng.org/categories/google/"/>
    
    
    <category term="google" scheme="http://chenfeng.org/tags/google/"/>
    
  </entry>
  
  <entry>
    <title>redis-zset(有序集合)数据类型小结</title>
    <link href="http://chenfeng.org/2022/08/24/redis-5-zset/"/>
    <id>http://chenfeng.org/2022/08/24/redis-5-zset/</id>
    <published>2022-08-24T15:05:00.000Z</published>
    <updated>2022-09-16T07:13:32.889Z</updated>
    
    <content type="html"><![CDATA[<p>有序集合与集合类似，不同的是，每个元素会关联一个double类型的分数</p><ul><li>增加元素<ul><li>增加一个或多个元素 zadd key score1 menber1 [score2 member2 score3 member3]</li></ul></li><li>查询元素<ul><li>返回集合元素数量 zcard key</li><li>返回指定分数范围内元素数量 count key start stop</li><li>返回指定索引范围内元素 zrange key start stop [withscores]</li><li>返回指定分数范围内元素 zrangebyscore key start stop [withscores]</li><li>返回指定元素的索引 zrank key member</li><li>返回指定元素的分数 zscore key member</li></ul></li><li>修改元素<ul><li>修改元素分数 zincrby key increment member</li></ul></li><li>删除元素<ul><li>删除指定元素 zrem key member</li><li>删除指定分数范围里的元素 zremrangebyscore key start stop </li><li>删除指定索引范围里的元素 zremrangebyrank key start stop</li></ul></li><li>集合运算<ul><li>差集<ul><li>返回差集 sdiff num z1 z2</li><li>返回差集并存储 sdiffstore destination num z1 z2</li></ul></li><li>交集<ul><li>返回交集，分数相加 zinter num key key [key …]</li><li>返回交集，分数相加，另存为 zinterstore destination num key key [key …]</li></ul></li><li>并集<ul><li>返回并集 zunion num k1 k2</li><li>返回并集并存储 zunionstore destination num k1 k2</li></ul></li></ul></li></ul><p><img src="/img/redis/redis-zset.png" alt="zset"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;有序集合与集合类似，不同的是，每个元素会关联一个double类型的分数&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;增加元素&lt;ul&gt;
&lt;li&gt;增加一个或多个元素 zadd key score1 menber1 [score2 member2 score3 member3]&lt;/li&gt;
&lt;/ul</summary>
      
    
    
    
    <category term="redis" scheme="http://chenfeng.org/categories/redis/"/>
    
    
    <category term="redis" scheme="http://chenfeng.org/tags/redis/"/>
    
  </entry>
  
  <entry>
    <title>redis-set数据类型小结</title>
    <link href="http://chenfeng.org/2022/08/24/redis-4-set/"/>
    <id>http://chenfeng.org/2022/08/24/redis-4-set/</id>
    <published>2022-08-24T15:04:00.000Z</published>
    <updated>2022-09-16T07:13:28.693Z</updated>
    
    <content type="html"><![CDATA[<p>集合具有无序性和唯一性</p><ul><li>增加元素<ul><li>增加一个或多个元素 sadd key menber1 [member2 member3]</li></ul></li><li>查询元素<ul><li>查询集合数量 scard key</li><li>返回所有集合元素 smembers key</li><li>随机返回集合元素 srandmember key [count]</li></ul></li><li>删除元素<ul><li>随机删除集合元素 spop key [count]</li><li>删除集合中指定元素 srem key member [m1 m2]</li></ul></li><li>判断是否存在元素 sismember key member</li><li>移动元素 smove source destination member</li><li>集合运算<ul><li>差集<ul><li>返回差集 sdiff s1 s2</li><li>返回差集并存储 sdiffstore destination s1 s2</li></ul></li><li>交集<ul><li>返回交集 sinter s1 s2</li><li>返回交集并存储 sinterstore destination s1 s2</li></ul></li><li>并集<ul><li>返回并集 sunion s1 s2</li><li>返回并集并存储 sunionstore destination s1 s2</li></ul></li></ul></li></ul><p><img src="/img/redis/redis-set.png" alt="set"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;集合具有无序性和唯一性&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;增加元素&lt;ul&gt;
&lt;li&gt;增加一个或多个元素 sadd key menber1 [member2 member3]&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;查询元素&lt;ul&gt;
&lt;li&gt;查询集合数量 scard key&lt;/li</summary>
      
    
    
    
    <category term="redis" scheme="http://chenfeng.org/categories/redis/"/>
    
    
    <category term="redis" scheme="http://chenfeng.org/tags/redis/"/>
    
  </entry>
  
  <entry>
    <title>redis-list数据类型小结</title>
    <link href="http://chenfeng.org/2022/08/24/redis-3-list/"/>
    <id>http://chenfeng.org/2022/08/24/redis-3-list/</id>
    <published>2022-08-24T15:03:00.000Z</published>
    <updated>2022-09-16T07:13:23.920Z</updated>
    
    <content type="html"><![CDATA[<p>链表可以看作是一个队列，左边是队列头，右边是队列尾，增加是push，删除是pop。</p><ul><li><p>新增值</p><ul><li>队列头增加值 lpush key value [value2 value3]</li><li>队列尾增加值 rpush key value [value2 value3]</li><li>相对位置插入值 linsert key before|after pivot value</li><li>新增带判断，链表不存在时增加失败<ul><li>队列头增加值 lpushx key value</li><li>队列尾增加值 rpushx key value</li></ul></li></ul></li><li><p>查询值</p><ul><li>通过索引获取单个值 lndex key index</li><li>通过索引获取多个值 lrange key start stop</li></ul></li><li><p>修改值</p><ul><li>通过索引修改指定位置的值 lset key index value</li></ul></li><li><p>删除值</p><ul><li>队列头删除并获得值 lpop key</li><li>阻塞式表头删除并获得值 blpop key timeout</li><li>表尾删除并获得值 rpop key</li><li>阻塞式表尾删除并获得值 brpop key timeout</li><li>删除指定元素值 lrem key count value 删除key链表中，与value值相同的元素值</li><li>删除索引范围外的元素值 ltrim key start stop</li></ul></li><li><p>操作链表</p><ul><li>移动元素 rpoplpush source destination</li><li>阻塞式移动元素 brpoplpush source destination</li></ul></li><li><p>获取链表长度 llen key</p></li></ul><p><img src="/img/redis/redis-list.png" alt="list"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;链表可以看作是一个队列，左边是队列头，右边是队列尾，增加是push，删除是pop。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;新增值&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;队列头增加值 lpush key value [value2 value3]&lt;/li&gt;
&lt;li&gt;队列尾增加值 rpush k</summary>
      
    
    
    
    <category term="redis" scheme="http://chenfeng.org/categories/redis/"/>
    
    
    <category term="redis" scheme="http://chenfeng.org/tags/redis/"/>
    
  </entry>
  
  <entry>
    <title>redis-hash数据类型小结</title>
    <link href="http://chenfeng.org/2022/08/24/redis-2-hash/"/>
    <id>http://chenfeng.org/2022/08/24/redis-2-hash/</id>
    <published>2022-08-24T15:02:00.000Z</published>
    <updated>2022-09-16T07:13:18.973Z</updated>
    
    <content type="html"><![CDATA[<p>Redis hash 是一个 string 类型的 field（字段） 和 value（值） 的映射表，hash 特别适合用于存储对象。</p><ul><li>新增记录<ul><li>新增一条 hset key field value</li><li>批量新增 hmset key field value [field value field value …]</li><li>新增一条记录，唯一性 hsetnx key field value</li></ul></li><li>查询记录<ul><li>查询一条 hget key field</li><li>批量查询 hmget key field [field field]</li><li>全表查询 hgetall key</li></ul></li><li>修改记录<ul><li>值增加指定增幅 hincrby key field increment</li><li>值增加指定增幅，浮点数 hincrbyfloat key field increment</li></ul></li><li>删除记录 hdel key field</li><li>查询表长 hlen key</li><li>查询所有的字段 hkeys key</li><li>查询所有的值 hvals key</li><li>判断字段是否存在 hexists key field</li></ul><p><img src="/img/redis/redis-hash.png" alt="hash"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;Redis hash 是一个 string 类型的 field（字段） 和 value（值） 的映射表，hash 特别适合用于存储对象。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;新增记录&lt;ul&gt;
&lt;li&gt;新增一条 hset key field value&lt;/li&gt;
&lt;li&gt;批量新增 hm</summary>
      
    
    
    
    <category term="redis" scheme="http://chenfeng.org/categories/redis/"/>
    
    
    <category term="redis" scheme="http://chenfeng.org/tags/redis/"/>
    
  </entry>
  
  <entry>
    <title>redis-string数据类型小结</title>
    <link href="http://chenfeng.org/2022/08/24/redis-1-string/"/>
    <id>http://chenfeng.org/2022/08/24/redis-1-string/</id>
    <published>2022-08-24T15:01:00.000Z</published>
    <updated>2022-09-16T07:13:13.493Z</updated>
    
    <content type="html"><![CDATA[<p>Redis 字符串数据类型的相关命令用于管理 redis 字符串值。</p><ul><li><p>设置值</p><ul><li>设置一个键值 set key val</li><li>批量设置键值 mset key val [key val …]</li><li>设置唯一的键值对 setnx</li><li>批量设置唯一的键值对 msetnx</li><li>设置新值返回旧值 getset key val</li></ul></li><li><p>获取值</p><ul><li>获取键值 get</li><li>批量获取键值 mget</li></ul></li><li><p>修改值</p><ul><li>值增加1 incr key</li><li>值增加指定增幅 incrby key increment</li><li>值减1 decr key</li><li>值减少指定减幅 decrby key decrement</li></ul></li><li><p>过期时间</p><ul><li>设置值和过期时间，【单位秒 setex key seconds value】，【单位毫秒 psetex key milliseconds value】</li></ul></li><li><p>字符串操作</p><ul><li>返回值的子串 getrange key start end</li><li>使用子串覆盖值 setrange key offset val</li><li>返回值的长度 strlen key</li><li>字符串追加到值的后面 append key value</li></ul></li></ul><p><img src="/img/redis/redis-string.png" alt="string"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;Redis 字符串数据类型的相关命令用于管理 redis 字符串值。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;设置值&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;设置一个键值 set key val&lt;/li&gt;
&lt;li&gt;批量设置键值 mset key val [key val …]&lt;/li&gt;
&lt;li&gt;</summary>
      
    
    
    
    <category term="redis" scheme="http://chenfeng.org/categories/redis/"/>
    
    
    <category term="redis" scheme="http://chenfeng.org/tags/redis/"/>
    
  </entry>
  
  <entry>
    <title>redis命令小结</title>
    <link href="http://chenfeng.org/2022/08/24/redis-0/"/>
    <id>http://chenfeng.org/2022/08/24/redis-0/</id>
    <published>2022-08-24T15:00:00.000Z</published>
    <updated>2022-09-16T07:02:51.579Z</updated>
    
    <content type="html"><![CDATA[<p>Redis</p><ul><li><p>操作命令</p><ul><li>删除指定的key：del key</li><li>为给定 key 设置过期时间，以秒计: expire key seconds</li><li>指定key在特定的时间戳后过期，以秒计: expireat key timestamp</li><li>为给定 key 设置过期时间，以毫秒计: pexpire key milliseconds</li><li>指定key在特定的时间戳后过期，以毫秒计: pexpireat key milliseconds-timestamp</li><li>将当前数据库的 key 移动到给定的数据库 db 当中：move key db</li><li>持久化key：persist key</li><li>重命名key：rename key newkey</li><li>仅当newkey不存在时，重命名key：renamenx key newkey</li></ul></li><li><p>查询命令</p><ul><li>查找所有符合给定模式的key：keys pattern</li><li>查看key的剩余生存时间，以秒计: ttl key</li><li>查看key的剩余生存时间，以毫秒计: pttl key</li><li>从当前数据库中随机返回一个 key：randomkey</li><li>查询key的数据类型：type key</li></ul></li><li><p>判断命令</p><ul><li>检查给定 key 是否存在：exists key</li></ul></li></ul><p><img src="/img/redis/redis-comnamd.png" alt="comnamd"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;Redis&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;操作命令&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;删除指定的key：del key&lt;/li&gt;
&lt;li&gt;为给定 key 设置过期时间，以秒计: expire key seconds&lt;/li&gt;
&lt;li&gt;指定key在特定的时间戳后过期，以秒计: ex</summary>
      
    
    
    
    <category term="redis" scheme="http://chenfeng.org/categories/redis/"/>
    
    
    <category term="redis" scheme="http://chenfeng.org/tags/redis/"/>
    
  </entry>
  
  <entry>
    <title>THINKPHP6如何实现门面模式</title>
    <link href="http://chenfeng.org/2022/07/25/facade/"/>
    <id>http://chenfeng.org/2022/07/25/facade/</id>
    <published>2022-07-25T15:00:00.000Z</published>
    <updated>2022-07-26T17:15:31.835Z</updated>
    
    <content type="html"><![CDATA[<p>THINKPHP6的门面为容器中的（动态）类提供了一个静态调用接口，相比于传统的静态方法调用， 带来了更好的可测试性和扩展性，你可以为任何的非静态类库定义一个facade类。</p><p>门面的核心文件是 facade.php ，文件内定义了 facade 类，包含有：</p><ul><li>待子类重写的方法 getFacadeClass </li><li>实例化子系统类的方法 createFacade</li><li>魔术方法__callstatic</li></ul><figure class="highlight php"><figcaption><span>facade.php</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">facade</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">abstract</span> <span class="built_in">static</span> <span class="function"><span class="keyword">function</span> <span class="title">getFacadeClass</span>(<span class="params"></span>)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">protected</span> <span class="built_in">static</span> <span class="function"><span class="keyword">function</span> <span class="title">createFacade</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="variable">$facadeClass</span> = <span class="built_in">static</span>::<span class="title function_ invoke__">getFacadeClass</span>();</span><br><span class="line">        <span class="keyword">include_once</span> <span class="string">&quot;<span class="subst">&#123;$facadeClass&#125;</span>.php&quot;</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="variable">$facadeClass</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">static</span> <span class="function"><span class="keyword">function</span> <span class="title">__callstatic</span>(<span class="params"><span class="variable">$method</span>,<span class="variable">$params</span></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="title function_ invoke__">call_user_func_array</span>([<span class="built_in">static</span>::<span class="title function_ invoke__">createFacade</span>(),<span class="variable">$method</span>],<span class="variable">$params</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>当新增一个子系统类时，同时需要新增一个子系统类的门面类，使得子系统类和 facade 类关联起来。</p><figure class="highlight php"><figcaption><span>子系统类tets1.php</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">test1</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">index</span>(<span class="params"><span class="variable">$name</span></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;test1,name=<span class="subst">&#123;$name&#125;</span>&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight php"><figcaption><span>子系统门面类test1facade.php</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">include_once</span> <span class="string">&#x27;facade.php&#x27;</span>;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">test1facade</span> <span class="keyword">extends</span> <span class="title">facade</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">protected</span> <span class="built_in">static</span> <span class="function"><span class="keyword">function</span> <span class="title">getFacadeClass</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&#x27;test1&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>客户端不需要直接调用子系统类，而是通过子系统门面类间接调用，并且采用静态调用的方式调用子系统类里的方法。</p><figure class="highlight php"><figcaption><span>client.php</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">include</span> <span class="string">&#x27;test1facade.php&#x27;</span>;</span><br><span class="line"><span class="keyword">include</span> <span class="string">&#x27;test2facade.php&#x27;</span>;</span><br><span class="line"><span class="keyword">echo</span> test1facade::<span class="title function_ invoke__">index</span>(<span class="string">&#x27;Jerry&#x27;</span>);</span><br><span class="line"><span class="keyword">echo</span> test2facade::<span class="title function_ invoke__">index</span>(<span class="string">&#x27;Page&#x27;</span>);</span><br></pre></td></tr></table></figure><p>结果输出</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">test1,name=Jerrytest2,name=Page</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;THINKPHP6的门面为容器中的（动态）类提供了一个静态调用接口，相比于传统的静态方法调用， 带来了更好的可测试性和扩展性，你可以为任何的非静态类库定义一个facade类。&lt;/p&gt;
&lt;p&gt;门面的核心文件是 facade.php ，文件内定义了 facade 类，包含有：&lt;</summary>
      
    
    
    
    <category term="php" scheme="http://chenfeng.org/categories/php/"/>
    
    
    <category term="php" scheme="http://chenfeng.org/tags/php/"/>
    
    <category term="设计模式" scheme="http://chenfeng.org/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>协变与工厂方法设计模式</title>
    <link href="http://chenfeng.org/2022/07/24/covariance/"/>
    <id>http://chenfeng.org/2022/07/24/covariance/</id>
    <published>2022-07-24T15:00:00.000Z</published>
    <updated>2022-07-26T17:21:22.317Z</updated>
    
    <content type="html"><![CDATA[<h2><span id="xie-bian-de-gai-nian">协变的概念</span><a href="#xie-bian-de-gai-nian" class="header-anchor">#</a></h2><p><a href="https://www.php.net/manual/zh/language.oop5.variance.php#language.oop5.variance.covariance">协变</a>使子类比父类方法能返回更具体的类型；<br>通俗点说就是如果某个返回的类型可以由其派生类型替换，那么这个类型就是支持协变的。</p><h2><span id="xie-bian-yu-gong-han-fang-fa-mo-shi">协变与工厂方法模式</span><a href="#xie-bian-yu-gong-han-fang-fa-mo-shi" class="header-anchor">#</a></h2><p>工厂方法模式的特点是一个工厂生产一种产品，有多少个产品就需要有多少个工厂。</p><p>基类工厂定义了操作方法和返回值，子类工厂继承自基类工厂，并且重写了操作方法，根据具体的工厂返回实际的类型。</p><p>以下代码定义了两个产品类（ShoesBasketball，ShoesRunning），<br>两个工厂子类（FactoryBasketball，FactoryRunning）。</p><p>产品类实现自产品接口（Shoes），产品接口定义了一个方法（whoami）。</p><p>工厂子类继承自工厂基类（Factory），工厂基类定义了一个操作方法（makeShoes），并且定义了返回值类型（Shoes）。</p><p>工厂子类重写方法（makeShoes），并且定义了比父类更加具体的返回值类型。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">Shoes</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">whoami</span>(<span class="params"></span>)</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ShoesBasketball</span> <span class="keyword">implements</span> <span class="title">Shoes</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">whoami</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;I am Basketball shoes.&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ShoesRunning</span> <span class="keyword">implements</span> <span class="title">Shoes</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">whoami</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;I am Running shoes.&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">Factory</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">static</span> <span class="function"><span class="keyword">function</span> <span class="title">makeShoes</span>(<span class="params"></span>):<span class="title">Shoes</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">FactoryBasketball</span> <span class="keyword">implements</span> <span class="title">Factory</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">static</span> <span class="function"><span class="keyword">function</span> <span class="title">makeShoes</span>(<span class="params"></span>):<span class="title">ShoesBasketball</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">ShoesBasketball</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">FactoryRunning</span> <span class="keyword">implements</span> <span class="title">Factory</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">static</span> <span class="function"><span class="keyword">function</span> <span class="title">makeShoes</span>(<span class="params"></span>):<span class="title">ShoesRunning</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">ShoesRunning</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable">$shoes</span> = <span class="title class_">FactoryBasketball</span>::<span class="title function_ invoke__">makeShoes</span>();</span><br><span class="line"><span class="keyword">echo</span> <span class="variable">$shoes</span>-&gt;<span class="title function_ invoke__">whoami</span>();</span><br><span class="line"><span class="variable">$shoes</span> = <span class="title class_">FactoryRunning</span>::<span class="title function_ invoke__">makeShoes</span>();</span><br><span class="line"><span class="keyword">echo</span> <span class="variable">$shoes</span>-&gt;<span class="title function_ invoke__">whoami</span>();</span><br></pre></td></tr></table></figure><p>结果输出</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">I am Basketball shoes.I am Running shoes.</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2&gt;&lt;span id=&quot;xie-bian-de-gai-nian&quot;&gt;协变的概念&lt;/span&gt;&lt;a href=&quot;#xie-bian-de-gai-nian&quot; class=&quot;header-anchor&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;https://www.php.</summary>
      
    
    
    
    <category term="php" scheme="http://chenfeng.org/categories/php/"/>
    
    
    <category term="php" scheme="http://chenfeng.org/tags/php/"/>
    
    <category term="设计模式" scheme="http://chenfeng.org/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>Homebrew -- macOS缺失的软件包的管理器</title>
    <link href="http://chenfeng.org/2022/07/18/homebrew/"/>
    <id>http://chenfeng.org/2022/07/18/homebrew/</id>
    <published>2022-07-18T15:00:00.000Z</published>
    <updated>2022-07-19T17:37:57.024Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://brew.sh/index_zh-cn">Homebrew</a> 是 macOS（或 Linux）缺失的软件包的管理器。</p><p>使用 Homebrew 安装 Apple（或您的 Linux 系统）没有预装但 你 <a href="https://formulae.brew.sh/">需要的东西</a>。</p><h2><span id="an-zhuang-homebrew">安装 Homebrew</span><a href="#an-zhuang-homebrew" class="header-anchor">#</a></h2><p>将以下命令粘贴至终端，实现安装。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/bin/bash -c <span class="string">&quot;<span class="subst">$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)</span>&quot;</span></span><br></pre></td></tr></table></figure><h2><span id="homebrew-lei-xing">Homebrew 类型</span><a href="#homebrew-lei-xing" class="header-anchor">#</a></h2><h3><span id="formula">formula</span><a href="#formula" class="header-anchor">#</a></h3><p>formula 意思是一些软件包，包含命令行工具、开发库、一些字体、插件等，共性是不提供界面，提供给终端或者是开发者使用。</p><p>安装 formula 前可以在 <a href="https://formulae.brew.sh/formula/">formulae listing页面</a> 搜索目标 formula ，查看 formula 的详情细节，包括安装命令，描述，版本号和安装数量统计等。</p><h3><span id="cask">cask</span><a href="#cask" class="header-anchor">#</a></h3><p>cask 是用户软件，比如 chrome、wechat、qq 这些提供用户交互界面的软件。</p><p>同样的，安装 cask 前可以在 <a href="https://formulae.brew.sh/cask/">casks listing页面</a> 搜索目标 cask ，查看 cask 的详情细节。</p><p><a href="https://formulae.brew.sh/cask/">casks listing页面</a> 包含了大部分常用的软件：微信、qq、浏览器、笔记、播放器等等。一定程度上可以代替App store。</p><h2><span id="homebrew-ming-ling">Homebrew 命令</span><a href="#homebrew-ming-ling" class="header-anchor">#</a></h2><h3><span id="chang-yong-ming-ling">常用命令</span><a href="#chang-yong-ming-ling" class="header-anchor">#</a></h3><table><thead><tr><th align="left">命令</th><th align="left">作用</th></tr></thead><tbody><tr><td align="left">brew update</td><td align="left">同步远程的 formulae 到本地，更新本地的 formulae 库</td></tr><tr><td align="left">brew install formula</td><td align="left">安装 formula</td></tr><tr><td align="left">brew remove formula</td><td align="left">卸载 formula</td></tr><tr><td align="left">brew install –cask cask</td><td align="left">安装 cask</td></tr><tr><td align="left">brew list</td><td align="left">查看已安装的包列表</td></tr><tr><td align="left">brew list –versions</td><td align="left">查看你安装过的包列表（包括版本号）</td></tr><tr><td align="left">brew info [formula|cask]</td><td align="left">查看[formula|cask]的简要信息</td></tr><tr><td align="left">brew upgrade [formula|cask]</td><td align="left">升级[formula|cask]</td></tr></tbody></table><h3><span id="chang-yong-ruan-jian-an-zhuang-ming-ling">常用软件安装命令</span><a href="#chang-yong-ruan-jian-an-zhuang-ming-ling" class="header-anchor">#</a></h3><table><thead><tr><th align="left">命令</th><th align="left">作用</th></tr></thead><tbody><tr><td align="left">brew install –cask sublime-text</td><td align="left">安装sublime编辑器</td></tr><tr><td align="left">brew install –cask qq</td><td align="left">安装qq</td></tr><tr><td align="left">brew install –cask wechat</td><td align="left">安装微信</td></tr><tr><td align="left">brew install –cask firefox</td><td align="left">安装firefox</td></tr><tr><td align="left">brew install –cask chrome-remote-desktop-host</td><td align="left">安装chrome</td></tr><tr><td align="left">brew install –cask yinxiangbiji</td><td align="left">安装印象笔记</td></tr></tbody></table><h3><span id="qi-ta-ming-ling">其他命令</span><a href="#qi-ta-ming-ling" class="header-anchor">#</a></h3><table><thead><tr><th align="left">命令</th><th align="left">作用</th></tr></thead><tbody><tr><td align="left">brew outdated</td><td align="left">列出需要升级的 formulae</td></tr><tr><td align="left">brew services</td><td align="left">管理后台运行服务工具</td></tr><tr><td align="left">brew services [list] (–json):</td><td align="left">列出有关当前用户的所有托管服务的信息</td></tr><tr><td align="left">brew services info (formula|–all) [–json]</td><td align="left">列出当前用户的所有托管服务</td></tr><tr><td align="left">brew services start (formula|–all)</td><td align="left">马上开启formula服务，并且注册到当前用户的启动进程上</td></tr><tr><td align="left">brew services stop (formula|–all)</td><td align="left">马上停止formula服务，并且取消注册到当前用户的启动进程上</td></tr><tr><td align="left">brew services restart (formula|–all)</td><td align="left"></td></tr><tr><td align="left">brew services run (formula|–all)</td><td align="left">运行formula服务，但是并不注册到当前用户的启动进程上</td></tr></tbody></table>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;a href=&quot;https://brew.sh/index_zh-cn&quot;&gt;Homebrew&lt;/a&gt; 是 macOS（或 Linux）缺失的软件包的管理器。&lt;/p&gt;
&lt;p&gt;使用 Homebrew 安装 Apple（或您的 Linux 系统）没有预装但 你 &lt;a href=&quot;</summary>
      
    
    
    
    <category term="macOS" scheme="http://chenfeng.org/categories/macOS/"/>
    
    
    <category term="macOS" scheme="http://chenfeng.org/tags/macOS/"/>
    
  </entry>
  
  <entry>
    <title>PHP反射机制</title>
    <link href="http://chenfeng.org/2022/07/10/php-reflecton/"/>
    <id>http://chenfeng.org/2022/07/10/php-reflecton/</id>
    <published>2022-07-10T15:00:00.000Z</published>
    <updated>2022-07-19T08:47:52.371Z</updated>
    
    <content type="html"><![CDATA[<p>PHP的反射机制提供了一套反射API，用来访问和使用类、方法、属性、参数和注释等。</p><p>比如可以通过一个对象知道这个对象所属的类，这个类包含哪些方法，这些方法需要传入什么参数，每个参数是什么类型等等。</p><p>不用创建类的实例也可以访问类的成员和方法，就算类成员定义为 private也可以在外部访问。</p><p><a href="https://www.php.net/manual/zh/intro.reflection.php">官方文档</a> 提供了诸如 ReflectionClass、ReflectionMethod、ReflectionObject、ReflectionExtension 等反射类及相应的API，用得最多的是 ReflectionClass。</p><h2><span id="reflectionclass-fan-she-lei">ReflectionClass 反射类</span><a href="#reflectionclass-fan-she-lei" class="header-anchor">#</a></h2><p>通过 ReflectionClass 反射一个类，参数是类名或者类实例。</p><h3><span id="tong-guo-gou-zao-fang-fa-shi-li-hua-lei">通过构造方法实例化类</span><a href="#tong-guo-gou-zao-fang-fa-shi-li-hua-lei" class="header-anchor">#</a></h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> *  Test1 类</span></span><br><span class="line"><span class="comment"> */</span> </span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Test1</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="variable">$id</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$name</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"><span class="keyword">int</span> <span class="variable">$id</span>,<span class="keyword">string</span> <span class="variable">$name</span></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;id = <span class="variable">$id</span>;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;name = <span class="variable">$name</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">getId</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">$this</span>-&gt;id;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">getName</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">$this</span>-&gt;name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>Test1 类拥有一个 private 类型的 id 和 一个 public 类型的 name 。</p><p>还有一个构造方法和两个普通方法。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 初始化 ReflectionClass 类</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getReflectObject</span>(<span class="params"><span class="variable">$class</span></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">ReflectionClass</span>(<span class="variable">$class</span>);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (ReflectionException <span class="variable">$e</span>) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">ClassNotFoundException</span>(<span class="string">&#x27;class not exists: &#x27;</span> . <span class="variable">$class</span>, <span class="variable">$class</span>, <span class="variable">$e</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 实例化类后调用方法</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">invokeClass_1</span>(<span class="params"><span class="keyword">string</span> <span class="variable">$class</span>,<span class="keyword">array</span> <span class="variable">$args</span></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="variable">$reflect</span> = <span class="title function_ invoke__">getReflectObject</span>(<span class="variable">$class</span>);</span><br><span class="line">    <span class="comment">// 创建一个类的新实例，给出的参数将传递到类的构造函数。</span></span><br><span class="line">    <span class="variable">$object</span> = <span class="variable">$reflect</span>-&gt;<span class="title function_ invoke__">newInstanceArgs</span>(<span class="variable">$args</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//  获取类的属性，返回ReflectionProperty 对象的数组。</span></span><br><span class="line">    <span class="variable">$props</span> = <span class="variable">$reflect</span>-&gt;<span class="title function_ invoke__">getProperties</span>();</span><br><span class="line">    <span class="keyword">foreach</span> (<span class="variable">$props</span> <span class="keyword">as</span> <span class="variable">$prop</span>) &#123;</span><br><span class="line">        <span class="comment">// 输出属性变量名和指定实例的属性值</span></span><br><span class="line">        <span class="keyword">echo</span> <span class="variable">$prop</span>-&gt;<span class="title function_ invoke__">getName</span>() . <span class="string">&quot;=&quot;</span>.<span class="variable">$prop</span>-&gt;<span class="title function_ invoke__">getValue</span>(<span class="variable">$object</span>).<span class="string">&quot;\n&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 类实例直接调用方法</span></span><br><span class="line">    <span class="variable">$name</span> = <span class="variable">$object</span>-&gt;<span class="title function_ invoke__">getName</span>();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="variable">$name</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable">$res</span> = <span class="title function_ invoke__">invokeClass_1</span>(<span class="string">&#x27;Test1&#x27;</span>,[<span class="number">1</span>,<span class="string">&#x27;Jerry&#x27;</span>]);</span><br><span class="line"><span class="title function_ invoke__">var_dump</span>(<span class="variable">$res</span>);</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>输出 </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">id=1</span><br><span class="line">name=Jerry</span><br><span class="line">string(5) &quot;Jerry&quot;</span><br></pre></td></tr></table></figure><h3><span id="tong-guo-dan-li-mo-shi-shi-li-hua-lei">通过单例模式实例化类</span><a href="#tong-guo-dan-li-mo-shi-shi-li-hua-lei" class="header-anchor">#</a></h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Test2 类</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Test2</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="variable">$id</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$name</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="built_in">static</span> <span class="variable">$_instance</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"><span class="keyword">int</span> <span class="variable">$id</span>,<span class="keyword">string</span> <span class="variable">$name</span></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;id = <span class="variable">$id</span>;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;name = <span class="variable">$name</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 把构造函数 __construct 改成 private，并增加 getInstance 方法</span></span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">static</span> <span class="function"><span class="keyword">function</span> <span class="title">getInstance</span>(<span class="params"><span class="keyword">int</span> <span class="variable">$id</span>,<span class="keyword">string</span> <span class="variable">$name</span></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="keyword">empty</span>(<span class="built_in">self</span>::<span class="variable">$_instance</span>))</span><br><span class="line">            <span class="built_in">self</span>::<span class="variable">$_instance</span> = <span class="keyword">new</span> <span class="built_in">static</span>(<span class="variable">$id</span>,<span class="variable">$name</span>);</span><br><span class="line">            </span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">self</span>::<span class="variable">$_instance</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">getId</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">$this</span>-&gt;id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">getName</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">$this</span>-&gt;name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">static</span> <span class="function"><span class="keyword">function</span> <span class="title">sayHi</span>(<span class="params"><span class="variable">$id</span>,<span class="variable">$name</span></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;hello <span class="subst">&#123;$name&#125;</span>, your id=<span class="subst">&#123;$id&#125;</span>.&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">static</span> <span class="function"><span class="keyword">function</span> <span class="title">index</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;hello index&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>Test2 类的构造方法是 private 的，因此外部需要通过静态方法 getInstance 来获得类的实例。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 初始化 ReflectionClass 类</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getReflectObject</span>(<span class="params"><span class="variable">$class</span></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">ReflectionClass</span>(<span class="variable">$class</span>);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (ReflectionException <span class="variable">$e</span>) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">ClassNotFoundException</span>(<span class="string">&#x27;class not exists: &#x27;</span> . <span class="variable">$class</span>, <span class="variable">$class</span>, <span class="variable">$e</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 调用静态方法</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">invokeClass_2</span>(<span class="params"><span class="keyword">string</span> <span class="variable">$class</span>,<span class="keyword">array</span> <span class="variable">$args</span></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="variable">$reflect</span> = <span class="title function_ invoke__">getReflectObject</span>(<span class="variable">$class</span>);</span><br><span class="line">    <span class="variable">$name</span> = <span class="literal">null</span>;</span><br><span class="line">    <span class="comment">// 检查类中是否存在指定的方法</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="variable">$reflect</span>-&gt;<span class="title function_ invoke__">hasMethod</span>(<span class="string">&#x27;getInstance&#x27;</span>)) &#123;</span><br><span class="line">        <span class="comment">// 获取一个类方法的 ReflectionMethod。</span></span><br><span class="line">        <span class="variable">$method</span> = <span class="variable">$reflect</span>-&gt;<span class="title function_ invoke__">getMethod</span>(<span class="string">&#x27;getInstance&#x27;</span>);</span><br><span class="line">        <span class="keyword">if</span> (<span class="variable">$method</span>-&gt;<span class="title function_ invoke__">isPublic</span>() &amp;&amp; <span class="variable">$method</span>-&gt;<span class="title function_ invoke__">isStatic</span>()) &#123;</span><br><span class="line">            <span class="comment">// 使用数组给方法传送参数，并执行他。</span></span><br><span class="line">            <span class="variable">$object</span> = <span class="variable">$method</span>-&gt;<span class="title function_ invoke__">invokeArgs</span>(<span class="literal">null</span>, <span class="variable">$args</span>);</span><br><span class="line">            <span class="variable">$name</span> = <span class="variable">$object</span>-&gt;<span class="title function_ invoke__">getName</span>();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable">$name</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable">$res</span> = <span class="title function_ invoke__">invokeClass_2</span>(<span class="string">&#x27;Test2&#x27;</span>,[<span class="number">2</span>,<span class="string">&#x27;Sam&#x27;</span>]);</span><br><span class="line"><span class="title function_ invoke__">var_dump</span>(<span class="variable">$res</span>);</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>输出 </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">string(3) &quot;Sam&quot;</span><br></pre></td></tr></table></figure><h2><span id="reflectionmethod-fan-she-lei">ReflectionMethod 反射类</span><a href="#reflectionmethod-fan-she-lei" class="header-anchor">#</a></h2><p>ReflectionMethod 类也具有反射一个类的作用。区别是参数需要传递类名和方法名。</p><h3><span id="diao-yong-you-can-shu-de-fang-fa">调用有参数的方法</span><a href="#diao-yong-you-can-shu-de-fang-fa" class="header-anchor">#</a></h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 初始化 ReflectionMethod 类</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getReflectMethodObject</span>(<span class="params"><span class="variable">$class</span>,<span class="variable">$name</span></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">ReflectionMethod</span>(<span class="variable">$class</span>,<span class="variable">$name</span>);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (ReflectionException <span class="variable">$e</span>) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">ClassNotFoundException</span>(<span class="string">&#x27;class or method not exists: &#x27;</span> . <span class="variable">$class</span>, <span class="variable">$class</span>, <span class="variable">$e</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 调用静态方法</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">invokeMethod_1</span>(<span class="params"><span class="keyword">string</span> <span class="variable">$class</span>,<span class="keyword">string</span> <span class="variable">$name</span>,<span class="keyword">array</span> <span class="variable">$args</span></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="variable">$method</span> = <span class="title function_ invoke__">getReflectMethodObject</span>(<span class="variable">$class</span>,<span class="variable">$name</span>);</span><br><span class="line">    <span class="comment">// 获取方法定义的参数数目，包括可选参数</span></span><br><span class="line">    <span class="variable">$num</span> = <span class="variable">$method</span>-&gt;<span class="title function_ invoke__">getNumberOfParameters</span>();</span><br><span class="line">    <span class="keyword">if</span>(<span class="variable">$num</span> &gt; <span class="number">0</span>)</span><br><span class="line">        <span class="comment">// 使用数组给方法传送参数，并执行他。</span></span><br><span class="line">        <span class="variable">$res</span> = <span class="variable">$method</span>-&gt;<span class="title function_ invoke__">invokeArgs</span>(<span class="literal">null</span>,<span class="variable">$args</span>);</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="comment">// 执行一个反射的方法。</span></span><br><span class="line">        <span class="variable">$res</span> = <span class="variable">$method</span>-&gt;<span class="title function_ invoke__">invoke</span>(<span class="literal">null</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="variable">$res</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable">$res</span> = <span class="title function_ invoke__">invokeMethod_1</span>(<span class="string">&#x27;Test2&#x27;</span>,<span class="string">&#x27;sayHi&#x27;</span>,[<span class="number">2</span>,<span class="string">&#x27;Sam&#x27;</span>]);</span><br><span class="line"><span class="title function_ invoke__">var_dump</span>(<span class="variable">$res</span>);</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>输出 </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">string(21) &quot;hello Sam, your id=2.&quot;</span><br></pre></td></tr></table></figure><p>以上功能作用与  </p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$res</span> = <span class="title function_ invoke__">call_user_func_array</span>([<span class="keyword">__NAMESPACE__</span>.<span class="string">&#x27;Test2&#x27;</span>,<span class="string">&#x27;sayHi&#x27;</span>],[<span class="number">2</span>,<span class="string">&#x27;Sam&#x27;</span>]); </span><br></pre></td></tr></table></figure><p>相似。</p><h3><span id="diao-yong-wu-can-shu-de-fang-fa">调用无参数的方法</span><a href="#diao-yong-wu-can-shu-de-fang-fa" class="header-anchor">#</a></h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$res</span> = <span class="title function_ invoke__">invokeMethod_1</span>(<span class="string">&#x27;Test2&#x27;</span>,<span class="string">&#x27;index&#x27;</span>,[]);</span><br><span class="line"><span class="title function_ invoke__">var_dump</span>(<span class="variable">$res</span>);</span><br></pre></td></tr></table></figure><p>输出 </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">string(11) &quot;hello index&quot;</span><br></pre></td></tr></table></figure><p>以上功能作用与  </p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$res</span> = <span class="title function_ invoke__">call_user_func</span>([<span class="keyword">__NAMESPACE__</span>.<span class="string">&#x27;Test2&#x27;</span>,<span class="string">&#x27;index&#x27;</span>]);</span><br></pre></td></tr></table></figure><p>相似。</p><h2><span id="reflectionfunction-fan-she-lei">ReflectionFunction 反射类</span><a href="#reflectionfunction-fan-she-lei" class="header-anchor">#</a></h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 一个处理数据的方法</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">processUserData</span>(<span class="params"><span class="variable">$name</span>, <span class="variable">$age</span>, <span class="variable">$job</span> = <span class="string">&quot;&quot;</span>, <span class="variable">$hobbie</span> = <span class="string">&quot;&quot;</span></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="variable">$msg</span> = <span class="string">&quot;Hello <span class="subst">$name</span>. You have <span class="subst">$age</span> years old&quot;</span>;</span><br><span class="line">    <span class="keyword">if</span> (!<span class="keyword">empty</span>(<span class="variable">$job</span>)) &#123;</span><br><span class="line">    <span class="variable">$msg</span> .= <span class="string">&quot;. Your job is <span class="subst">$job</span>&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (!<span class="keyword">empty</span>(<span class="variable">$hobbie</span>)) &#123;</span><br><span class="line">        <span class="variable">$msg</span> .= <span class="string">&quot;. Your hobbie is <span class="subst">$hobbie</span>&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="variable">$msg</span> . <span class="string">&quot;.&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable">$refFunction</span> = <span class="keyword">new</span> <span class="title class_">ReflectionFunction</span>(<span class="string">&#x27;processUserData&#x27;</span>);</span><br><span class="line"><span class="variable">$valuesToProcess</span> = [</span><br><span class="line">    <span class="string">&#x27;name&#x27;</span> =&gt; <span class="string">&#x27;Anderson Lucas Silva de Oliveira&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;age&#x27;</span> =&gt; <span class="number">21</span>,</span><br><span class="line">    <span class="string">&#x27;hobbie&#x27;</span> =&gt; <span class="string">&#x27;Play games&#x27;</span></span><br><span class="line">  ];</span><br><span class="line"><span class="variable">$res</span> = <span class="variable">$refFunction</span>-&gt;<span class="title function_ invoke__">invoke</span>(...<span class="variable">$valuesToProcess</span>);</span><br><span class="line"><span class="title function_ invoke__">var_dump</span>(<span class="variable">$res</span>);</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>输出 </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">string(89) &quot;Hello Anderson Lucas Silva de Oliveira. You have 21 years old. Your hobbie is Play games.&quot;</span><br></pre></td></tr></table></figure><h2><span id="yi-ge-demo">一个demo</span><a href="#yi-ge-demo" class="header-anchor">#</a></h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 通过反射调用函数或者类方法</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">invoke</span>(<span class="params"><span class="variable">$class</span>,<span class="variable">$function</span>,<span class="variable">$args</span></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(<span class="title function_ invoke__">function_exists</span>(<span class="variable">$function</span>))</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="variable">$refFunction</span> = <span class="keyword">new</span> <span class="title class_">ReflectionFunction</span>(<span class="variable">$function</span>);</span><br><span class="line">        <span class="variable">$res</span> = <span class="variable">$refFunction</span>-&gt;<span class="title function_ invoke__">invoke</span>(...<span class="variable">$args</span>);</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="variable">$reflect</span> = <span class="title function_ invoke__">getReflectObject</span>(<span class="variable">$class</span>);</span><br><span class="line">        <span class="variable">$constructor</span> = <span class="variable">$reflect</span>-&gt;<span class="title function_ invoke__">getConstructor</span>();</span><br><span class="line">        <span class="comment">// 构造函数是公有的</span></span><br><span class="line">        <span class="keyword">if</span>(<span class="variable">$constructor</span>-&gt;<span class="title function_ invoke__">isPublic</span>())</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="variable">$object</span> = <span class="variable">$reflect</span>-&gt;<span class="title function_ invoke__">newInstanceArgs</span>(<span class="variable">$args</span>);</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span>(<span class="variable">$reflect</span>-&gt;<span class="title function_ invoke__">hasMethod</span>(<span class="string">&#x27;getInstance&#x27;</span>))&#123;</span><br><span class="line">            <span class="comment">// 当构造函数为 private ，则通过 getInstance 方法获取类的实例</span></span><br><span class="line">            <span class="variable">$method</span> = <span class="variable">$reflect</span>-&gt;<span class="title function_ invoke__">getMethod</span>(<span class="string">&#x27;getInstance&#x27;</span>);</span><br><span class="line">            <span class="keyword">if</span> (<span class="variable">$method</span>-&gt;<span class="title function_ invoke__">isPublic</span>() &amp;&amp; <span class="variable">$method</span>-&gt;<span class="title function_ invoke__">isStatic</span>()) </span><br><span class="line">                <span class="comment">// 使用数组给方法传送参数，并执行他。</span></span><br><span class="line">                <span class="variable">$object</span> = <span class="variable">$method</span>-&gt;<span class="title function_ invoke__">invokeArgs</span>(<span class="literal">null</span>, <span class="variable">$args</span>);</span><br><span class="line">            </span><br><span class="line">        &#125;</span><br><span class="line">        <span class="variable">$res</span> = <span class="variable">$object</span>-&gt;<span class="variable">$function</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable">$res</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable">$valuesToProcess</span> = [</span><br><span class="line">    <span class="string">&#x27;name&#x27;</span> =&gt; <span class="string">&#x27;Anderson Lucas Silva de Oliveira&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;age&#x27;</span> =&gt; <span class="number">21</span>,</span><br><span class="line">    <span class="string">&#x27;hobbie&#x27;</span> =&gt; <span class="string">&#x27;Play games&#x27;</span></span><br><span class="line">  ];</span><br><span class="line"></span><br><span class="line"><span class="variable">$res</span> = <span class="title function_ invoke__">invoke</span>(<span class="literal">null</span>,<span class="string">&#x27;processUserData&#x27;</span>,<span class="variable">$valuesToProcess</span>);</span><br><span class="line"><span class="comment">// $res = invoke(&#x27;Test1&#x27;,&#x27;getName&#x27;,[2,&#x27;Sam&#x27;]);</span></span><br><span class="line"><span class="comment">// $res = invoke(&#x27;Test2&#x27;,&#x27;getName&#x27;,[1,&#x27;Jerry&#x27;]);</span></span><br><span class="line"></span><br><span class="line"><span class="title function_ invoke__">var_dump</span>(<span class="variable">$res</span>);</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>invoke 函数接收3个参数，分别是：类名，方法名&#x2F;函数名，传参数组。</p><p>invoke 函数会首先判断是否存在函数，存在的话则直接传递参数，执行函数；</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$res</span> = <span class="title function_ invoke__">invoke</span>(<span class="literal">null</span>,<span class="string">&#x27;processUserData&#x27;</span>,<span class="variable">$valuesToProcess</span>);</span><br></pre></td></tr></table></figure><p>若不存在对应的函数，则通过反射类反射指定的类。<br>首先判断构造函数的权限是否为 public ，是的话则通过构造函数实例化类，最后再调用方法；</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$res</span> = <span class="title function_ invoke__">invoke</span>(<span class="string">&#x27;Test1&#x27;</span>,<span class="string">&#x27;getName&#x27;</span>,[<span class="number">2</span>,<span class="string">&#x27;Sam&#x27;</span>]);</span><br></pre></td></tr></table></figure><p>若构造函数的权限不为 public ，则通过判断是否存在 getInstance 方法，并且方法权限为 public 和 static ， getInstance 方法体使用单例模式返回类的实例。调用 getInstance 方法得到类的实例，最后调用方法。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$res</span> = <span class="title function_ invoke__">invoke</span>(<span class="string">&#x27;Test2&#x27;</span>,<span class="string">&#x27;getName&#x27;</span>,[<span class="number">1</span>,<span class="string">&#x27;Jerry&#x27;</span>]);</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;PHP的反射机制提供了一套反射API，用来访问和使用类、方法、属性、参数和注释等。&lt;/p&gt;
&lt;p&gt;比如可以通过一个对象知道这个对象所属的类，这个类包含哪些方法，这些方法需要传入什么参数，每个参数是什么类型等等。&lt;/p&gt;
&lt;p&gt;不用创建类的实例也可以访问类的成员和方法，就算类</summary>
      
    
    
    
    <category term="php" scheme="http://chenfeng.org/categories/php/"/>
    
    
    <category term="php" scheme="http://chenfeng.org/tags/php/"/>
    
  </entry>
  
</feed>
